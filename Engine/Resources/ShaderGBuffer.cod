//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorldViewProjection;      // Offset:    0, size:   64
}

cbuffer cbSkinned : register(b1)
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 12 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 20 technique(s)
    //
    technique11 GBufferPositionColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   o0.x <- <VSGBPositionColor return value>.positionHomogeneous.x; o0.y <- <VSGBPositionColor return value>.positionHomogeneous.y; o0.z <- <VSGBPositionColor return value>.positionHomogeneous.z; o0.w <- <VSGBPositionColor return value>.positionHomogeneous.w
                //
                #line 18 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionColorI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float       
                // localTransform           0   xyzw        2     NONE   float   xyzw
                // localTransform           1   xyzw        3     NONE   float   xyzw
                // localTransform           2   xyzw        4     NONE   float   xyzw
                // localTransform           3   xyzw        5     NONE   float   xyzw
                // textureIndex             0   x           6     NONE   float       
                // SV_InstanceID            0   x           7   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.localTransform._m00; v2.y <- input.localTransform._m01; v2.z <- input.localTransform._m02; v2.w <- input.localTransform._m03; 
                //   v3.x <- input.localTransform._m10; v3.y <- input.localTransform._m11; v3.z <- input.localTransform._m12; v3.w <- input.localTransform._m13; 
                //   v4.x <- input.localTransform._m20; v4.y <- input.localTransform._m21; v4.z <- input.localTransform._m22; v4.w <- input.localTransform._m23; 
                //   v5.x <- input.localTransform._m30; v5.y <- input.localTransform._m31; v5.z <- input.localTransform._m32; v5.w <- input.localTransform._m33; 
                //   v6.x <- input.textureIndex; 
                //   v7.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionColorI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionColorI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionColorI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionColorI return value>.positionHomogeneous.w
                //
                #line 26 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionColorSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float       
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   o0.x <- <VSGBPositionColorSkinned return value>.positionHomogeneous.x; o0.y <- <VSGBPositionColorSkinned return value>.positionHomogeneous.y; o0.z <- <VSGBPositionColorSkinned return value>.positionHomogeneous.z; o0.w <- <VSGBPositionColorSkinned return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 357
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 45 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[0].xyzw
                dp4 o0.y, r1.xyzw, cb0[1].xyzw
                dp4 o0.z, r1.xyzw, cb0[2].xyzw
                dp4 o0.w, r1.xyzw, cb0[3].xyzw
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionColorSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float       
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float       
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionColorSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionColorSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionColorSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionColorSkinnedI return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 357
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 62 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, r1.yyyy, v5.xyzw
                mad r0.xyzw, r1.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 40 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <VSGBPositionNormalColor return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalColor return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalColor return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalColor return value>.positionHomogeneous.w
                //
                #line 73 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalColorI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // COLOR                    0   xyzw        2     NONE   float       
                // localTransform           0   xyzw        3     NONE   float   xyzw
                // localTransform           1   xyzw        4     NONE   float   xyzw
                // localTransform           2   xyzw        5     NONE   float   xyzw
                // localTransform           3   xyzw        6     NONE   float   xyzw
                // textureIndex             0   x           7     NONE   float       
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.localTransform._m00; v3.y <- input.localTransform._m01; v3.z <- input.localTransform._m02; v3.w <- input.localTransform._m03; 
                //   v4.x <- input.localTransform._m10; v4.y <- input.localTransform._m11; v4.z <- input.localTransform._m12; v4.w <- input.localTransform._m13; 
                //   v5.x <- input.localTransform._m20; v5.y <- input.localTransform._m21; v5.z <- input.localTransform._m22; v5.w <- input.localTransform._m23; 
                //   v6.x <- input.localTransform._m30; v6.y <- input.localTransform._m31; v6.z <- input.localTransform._m32; v6.w <- input.localTransform._m33; 
                //   v7.x <- input.textureIndex; 
                //   v8.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionNormalColorI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalColorI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalColorI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalColorI return value>.positionHomogeneous.w
                //
                #line 81 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalColorSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // COLOR                    0   xyzw        2     NONE   float       
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   o0.x <- <VSGBPositionNormalColorSkinned return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalColorSkinned return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalColorSkinned return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalColorSkinned return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 357
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v4.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 100 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[0].xyzw
                dp4 o0.y, r1.xyzw, cb0[1].xyzw
                dp4 o0.z, r1.xyzw, cb0[2].xyzw
                dp4 o0.w, r1.xyzw, cb0[3].xyzw
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalColorSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // COLOR                    0   xyzw        2     NONE   float       
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                // localTransform           0   xyzw        5     NONE   float   xyzw
                // localTransform           1   xyzw        6     NONE   float   xyzw
                // localTransform           2   xyzw        7     NONE   float   xyzw
                // localTransform           3   xyzw        8     NONE   float   xyzw
                // textureIndex             0   x           9     NONE   float       
                // SV_InstanceID            0   x          10   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   v5.x <- input.localTransform._m00; v5.y <- input.localTransform._m01; v5.z <- input.localTransform._m02; v5.w <- input.localTransform._m03; 
                //   v6.x <- input.localTransform._m10; v6.y <- input.localTransform._m11; v6.z <- input.localTransform._m12; v6.w <- input.localTransform._m13; 
                //   v7.x <- input.localTransform._m20; v7.y <- input.localTransform._m21; v7.z <- input.localTransform._m22; v7.w <- input.localTransform._m23; 
                //   v8.x <- input.localTransform._m30; v8.y <- input.localTransform._m31; v8.z <- input.localTransform._m32; v8.w <- input.localTransform._m33; 
                //   v9.x <- input.textureIndex; 
                //   v10.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionNormalColorSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalColorSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalColorSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalColorSkinnedI return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 357
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v4.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 117 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, r1.yyyy, v6.xyzw
                mad r0.xyzw, r1.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 40 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o0.x <- <VSGBPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSGBPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSGBPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSGBPositionTexture return value>.positionHomogeneous.w
                //
                #line 128 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionTextureI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                // localTransform           0   xyzw        2     NONE   float   xyzw
                // localTransform           1   xyzw        3     NONE   float   xyzw
                // localTransform           2   xyzw        4     NONE   float   xyzw
                // localTransform           3   xyzw        5     NONE   float   xyzw
                // textureIndex             0   x           6     NONE   float       
                // SV_InstanceID            0   x           7   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.localTransform._m00; v2.y <- input.localTransform._m01; v2.z <- input.localTransform._m02; v2.w <- input.localTransform._m03; 
                //   v3.x <- input.localTransform._m10; v3.y <- input.localTransform._m11; v3.z <- input.localTransform._m12; v3.w <- input.localTransform._m13; 
                //   v4.x <- input.localTransform._m20; v4.y <- input.localTransform._m21; v4.z <- input.localTransform._m22; v4.w <- input.localTransform._m23; 
                //   v5.x <- input.localTransform._m30; v5.y <- input.localTransform._m31; v5.z <- input.localTransform._m32; v5.w <- input.localTransform._m33; 
                //   v6.x <- input.textureIndex; 
                //   v7.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionTextureI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionTextureI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionTextureI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionTextureI return value>.positionHomogeneous.w
                //
                #line 136 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   o0.x <- <VSGBPositionTextureSkinned return value>.positionHomogeneous.x; o0.y <- <VSGBPositionTextureSkinned return value>.positionHomogeneous.y; o0.z <- <VSGBPositionTextureSkinned return value>.positionHomogeneous.z; o0.w <- <VSGBPositionTextureSkinned return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 357
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 155 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[0].xyzw
                dp4 o0.y, r1.xyzw, cb0[1].xyzw
                dp4 o0.z, r1.xyzw, cb0[2].xyzw
                dp4 o0.w, r1.xyzw, cb0[3].xyzw
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionTextureSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float       
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionTextureSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionTextureSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionTextureSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionTextureSkinnedI return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 357
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 172 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, r1.yyyy, v5.xyzw
                mad r0.xyzw, r1.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 40 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   o0.x <- <VSGBPositionNormalTexture return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTexture return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTexture return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTexture return value>.positionHomogeneous.w
                //
                #line 183 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // localTransform           0   xyzw        3     NONE   float   xyzw
                // localTransform           1   xyzw        4     NONE   float   xyzw
                // localTransform           2   xyzw        5     NONE   float   xyzw
                // localTransform           3   xyzw        6     NONE   float   xyzw
                // textureIndex             0   x           7     NONE   float       
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.localTransform._m00; v3.y <- input.localTransform._m01; v3.z <- input.localTransform._m02; v3.w <- input.localTransform._m03; 
                //   v4.x <- input.localTransform._m10; v4.y <- input.localTransform._m11; v4.z <- input.localTransform._m12; v4.w <- input.localTransform._m13; 
                //   v5.x <- input.localTransform._m20; v5.y <- input.localTransform._m21; v5.z <- input.localTransform._m22; v5.w <- input.localTransform._m23; 
                //   v6.x <- input.localTransform._m30; v6.y <- input.localTransform._m31; v6.z <- input.localTransform._m32; v6.w <- input.localTransform._m33; 
                //   v7.x <- input.textureIndex; 
                //   v8.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionNormalTextureI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureI return value>.positionHomogeneous.w
                //
                #line 191 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   o0.x <- <VSGBPositionNormalTextureSkinned return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureSkinned return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureSkinned return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureSkinned return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 357
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v4.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 210 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[0].xyzw
                dp4 o0.y, r1.xyzw, cb0[1].xyzw
                dp4 o0.z, r1.xyzw, cb0[2].xyzw
                dp4 o0.w, r1.xyzw, cb0[3].xyzw
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                // localTransform           0   xyzw        5     NONE   float   xyzw
                // localTransform           1   xyzw        6     NONE   float   xyzw
                // localTransform           2   xyzw        7     NONE   float   xyzw
                // localTransform           3   xyzw        8     NONE   float   xyzw
                // textureIndex             0   x           9     NONE   float       
                // SV_InstanceID            0   x          10   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   v5.x <- input.localTransform._m00; v5.y <- input.localTransform._m01; v5.z <- input.localTransform._m02; v5.w <- input.localTransform._m03; 
                //   v6.x <- input.localTransform._m10; v6.y <- input.localTransform._m11; v6.z <- input.localTransform._m12; v6.w <- input.localTransform._m13; 
                //   v7.x <- input.localTransform._m20; v7.y <- input.localTransform._m21; v7.z <- input.localTransform._m22; v7.w <- input.localTransform._m23; 
                //   v8.x <- input.localTransform._m30; v8.y <- input.localTransform._m31; v8.z <- input.localTransform._m32; v8.w <- input.localTransform._m33; 
                //   v9.x <- input.textureIndex; 
                //   v10.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionNormalTextureSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureSkinnedI return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 357
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v4.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 227 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, r1.yyyy, v6.xyzw
                mad r0.xyzw, r1.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 40 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureTangent
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TANGENT                  0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   o0.x <- <VSGBPositionNormalTextureTangent return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureTangent return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureTangent return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureTangent return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureTangentI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TANGENT                  0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float       
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionNormalTextureTangentI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureTangentI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureTangentI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureTangentI return value>.positionHomogeneous.w
                //
                #line 246 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, v0.yyyy, v5.xyzw
                mad r0.xyzw, v0.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureTangentSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TANGENT                  0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.weights.x; v4.y <- input.weights.y; v4.z <- input.weights.z; 
                //   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
                //   o0.x <- <VSGBPositionNormalTextureTangentSkinned return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureTangentSkinned return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureTangentSkinned return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureTangentSkinned return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                
                #line 357
                mov x0[0].x, v4.x
                mov x0[1].x, v4.y
                mov x0[2].x, v4.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v5.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 265 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[0].xyzw
                dp4 o0.y, r1.xyzw, cb0[1].xyzw
                dp4 o0.z, r1.xyzw, cb0[2].xyzw
                dp4 o0.w, r1.xyzw, cb0[3].xyzw
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 GBufferPositionNormalTextureTangentSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TANGENT                  0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                // localTransform           0   xyzw        6     NONE   float   xyzw
                // localTransform           1   xyzw        7     NONE   float   xyzw
                // localTransform           2   xyzw        8     NONE   float   xyzw
                // localTransform           3   xyzw        9     NONE   float   xyzw
                // textureIndex             0   x          10     NONE   float       
                // SV_InstanceID            0   x          11   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_input v9.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.weights.x; v4.y <- input.weights.y; v4.z <- input.weights.z; 
                //   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
                //   v6.x <- input.localTransform._m00; v6.y <- input.localTransform._m01; v6.z <- input.localTransform._m02; v6.w <- input.localTransform._m03; 
                //   v7.x <- input.localTransform._m10; v7.y <- input.localTransform._m11; v7.z <- input.localTransform._m12; v7.w <- input.localTransform._m13; 
                //   v8.x <- input.localTransform._m20; v8.y <- input.localTransform._m21; v8.z <- input.localTransform._m22; v8.w <- input.localTransform._m23; 
                //   v9.x <- input.localTransform._m30; v9.y <- input.localTransform._m31; v9.z <- input.localTransform._m32; v9.w <- input.localTransform._m33; 
                //   v10.x <- input.textureIndex; 
                //   v11.x <- input.instanceId; 
                //   o0.x <- <VSGBPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSGBPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSGBPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSGBPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.w
                //
                #line 346 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                
                #line 357
                mov x0[0].x, v4.x
                mov x0[1].x, v4.y
                mov x0[2].x, v4.z
                mov x0[3].x, r0.x
                
                #line 363
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v5.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb1[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb1[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb1[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 282 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mul r0.xyzw, r1.yyyy, v7.xyzw
                mad r0.xyzw, r1.xxxx, v6.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v8.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v9.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[0].xyzw
                dp4 o0.y, r0.xyzw, cb0[1].xyzw
                dp4 o0.z, r0.xyzw, cb0[2].xyzw
                dp4 o0.w, r0.xyzw, cb0[3].xyzw
                ret 
                // Approximately 40 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   o3.x <- <PSGBGeneral return value>.Depth.x; o3.y <- <PSGBGeneral return value>.Depth.y; o3.z <- <PSGBGeneral return value>.Depth.z; o3.w <- <PSGBGeneral return value>.Depth.w; 
                //   o2.x <- <PSGBGeneral return value>.Normal.x; o2.y <- <PSGBGeneral return value>.Normal.y; o2.z <- <PSGBGeneral return value>.Normal.z; o2.w <- <PSGBGeneral return value>.Normal.w; 
                //   o1.x <- <PSGBGeneral return value>.Color.x; o1.y <- <PSGBGeneral return value>.Color.y; o1.z <- <PSGBGeneral return value>.Color.z; o1.w <- <PSGBGeneral return value>.Color.w
                //
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

}

