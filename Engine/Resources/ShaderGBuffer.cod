//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 World;                     // Offset:    0, size:   64
    float4x4 View;                      // Offset:   64, size:   64
    float4x4 Projection;                // Offset:  128, size:   64
    float   specularIntensity = 0.800000012;// Offset:  192, size:    4
    float   specularPower = 0.5;        // Offset:  196, size:    4
}

//
// 4 local object(s)
//
Texture2D Texture;
Texture2D SpecularMap;
Texture2D NormalMap;
SamplerState diffuseSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 GBuffer
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyzw        0     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_output o0.xyzw
                
                #line 38 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o0.xyz, v0.xyzx  // GBufferVertexShaderFunction<0,1,2>
                mov o0.w, l(1.000000)  // GBufferVertexShaderFunction<3: 1f>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyzw        0     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                1   xyzw        1   TARGET  float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET  float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                
                #line 65 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov o1.xyzw, l(0,0,0,0)  // GBufferPixelShaderFunction<0: 0f,1: 0f,2: 0f,3: 0f>
                mov o2.xyzw, l(0.500000,0.500000,0.500000,0)  // GBufferPixelShaderFunction<4: 0.5f,5: 0.5f,6: 0.5f,7: 0f>
                mov o3.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // GBufferPixelShaderFunction<8: 1f,9: 1f,10: 1f,11: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 Render
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 World;                    // Offset:    0 Size:    64
                //   float4x4 View;                     // Offset:   64 Size:    64
                //   float4x4 Projection;               // Offset:  128 Size:    64
                //   float specularIntensity;           // Offset:  192 Size:     4 [unused]
                //      = 0x3f4ccccd 
                //   float specularPower;               // Offset:  196 Size:     4 [unused]
                //      = 0x3f000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyzw        0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // BINORMAL                 0   xyz         3     NONE  float   xyz 
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyzw        0     NONE  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyz         2     NONE  float   xyz 
                // TEXCOORD                 3   xyz         3     NONE  float   xyz 
                // TEXCOORD                 4   xyz         4     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_output o0.xyzw
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_temps 2
                
                #line 88 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // worldPosition<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // worldPosition<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // worldPosition<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // worldPosition<3:NaN:Inf>
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // viewPosition<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // viewPosition<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // viewPosition<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // viewPosition<3:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // output<3:NaN:Inf>
                
                #line 102
                mov o0.zw, r1.zzzw  // RenderVertexShaderFunction<2:NaN:Inf,3:NaN:Inf>
                mov o1.zw, r1.zzzw  // RenderVertexShaderFunction<6:NaN:Inf,7:NaN:Inf>
                
                #line 90
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // RenderVertexShaderFunction<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // RenderVertexShaderFunction<1:NaN:Inf>
                
                #line 102
                mov o1.xy, v2.xyxx  // RenderVertexShaderFunction<4,5>
                
                #line 98
                dp3 o2.x, v4.xyzx, cb0[0].xyzx  // RenderVertexShaderFunction<8:NaN:Inf>
                dp3 o2.y, v3.xyzx, cb0[0].xyzx  // RenderVertexShaderFunction<11:NaN:Inf>
                dp3 o2.z, v1.xyzx, cb0[0].xyzx  // RenderVertexShaderFunction<14:NaN:Inf>
                dp3 o3.x, v4.xyzx, cb0[1].xyzx  // RenderVertexShaderFunction<9:NaN:Inf>
                dp3 o3.y, v3.xyzx, cb0[1].xyzx  // RenderVertexShaderFunction<12:NaN:Inf>
                dp3 o3.z, v1.xyzx, cb0[1].xyzx  // RenderVertexShaderFunction<15:NaN:Inf>
                dp3 o4.x, v4.xyzx, cb0[2].xyzx  // RenderVertexShaderFunction<10:NaN:Inf>
                dp3 o4.y, v3.xyzx, cb0[2].xyzx  // RenderVertexShaderFunction<13:NaN:Inf>
                dp3 o4.z, v1.xyzx, cb0[2].xyzx  // RenderVertexShaderFunction<16:NaN:Inf>
                ret 
                // Approximately 27 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // diffuseSampler                    sampler      NA          NA    0        1
                // Texture                           texture  float4          2d    0        1
                // SpecularMap                       texture  float4          2d    1        1
                // NormalMap                         texture  float4          2d    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyzw        0     NONE  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                // TEXCOORD                 2   xyz         2     NONE  float   xyz 
                // TEXCOORD                 3   xyz         3     NONE  float   xyz 
                // TEXCOORD                 4   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET  float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.zw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 2
                
                #line 120 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderGBuffer.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0  // color<0:Inf,1:Inf,2:Inf>
                
                #line 134
                mov o0.xyz, r0.xyzx  // RenderPixelShaderFunction<0:Inf,1:Inf,2:Inf>
                
                #line 117
                sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t1.xwyz, s0  // specularAttributes<0:Inf,3:Inf>
                
                #line 134
                mov o0.w, r0.x  // RenderPixelShaderFunction<3:Inf>
                mov o1.w, r0.y  // RenderPixelShaderFunction<7:Inf>
                
                #line 124
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t2.xyzw, s0  // normalFromMap<0:Inf,1:Inf,2:Inf>
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalFromMap<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r1.x, r0.xyzx, v2.xyzx  // normalFromMap<0:NaN:Inf>
                dp3 r1.y, r0.xyzx, v3.xyzx  // normalFromMap<1:NaN:Inf>
                dp3 r1.z, r0.xyzx, v4.xyzx  // normalFromMap<2:NaN:Inf>
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                
                #line 130
                mad r0.xyz, r1.xyzx, r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // RenderPixelShaderFunction<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                div o2.xyzw, v1.zzzz, v1.wwww  // RenderPixelShaderFunction<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 16 instruction slots used
                            
            };
        }

    }

}

