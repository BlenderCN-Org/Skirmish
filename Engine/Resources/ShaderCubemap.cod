//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorldViewProjection;      // Offset:    0, size:   64
    float3  gEyePositionWorld;          // Offset:   64, size:   12
    DirectionalLight gDirLights[3];     // Offset:   80, size:  144
    PointLight gPointLights[4];         // Offset:  224, size:  192
    SpotLight gSpotLights[4];           // Offset:  416, size:  256
    float   gFogStart;                  // Offset:  672, size:    4
    float   gFogRange;                  // Offset:  676, size:    4
    float4  gFogColor;                  // Offset:  688, size:   16
}

//
// 5 local object(s)
//
SamplerState SamplerPoint
{
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
TextureCube gCubemap;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 ForwardCubemap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float3 gEyePositionWorld;          // Offset:   64 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:   80
                //       float Ambient;                 // Offset:   92
                //       float Diffuse;                 // Offset:   96
                //       float3 Direction;              // Offset:  100
                //       float CastShadow;              // Offset:  112
                //       float Enabled;                 // Offset:  116
                //       float Pad1;                    // Offset:  120
                //       float Pad2;                    // Offset:  124
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   144 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  224
                //       float Ambient;                 // Offset:  236
                //       float Diffuse;                 // Offset:  240
                //       float3 Position;               // Offset:  244
                //       float Radius;                  // Offset:  256
                //       float CastShadow;              // Offset:  260
                //       float Enabled;                 // Offset:  264
                //       float Pad1;                    // Offset:  268
                //
                //   } gPointLights[4];                 // Offset:  224 Size:   192 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  416
                //       float Ambient;                 // Offset:  428
                //       float Diffuse;                 // Offset:  432
                //       float3 Position;               // Offset:  436
                //       float3 Direction;              // Offset:  448
                //       float Angle;                   // Offset:  460
                //       float Radius;                  // Offset:  464
                //       float CastShadow;              // Offset:  468
                //       float Enabled;                 // Offset:  472
                //       float Pad1;                    // Offset:  476
                //
                //   } gSpotLights[4];                  // Offset:  416 Size:   256 [unused]
                //   float gFogStart;                   // Offset:  672 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  676 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  688 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o1.x <- <VSCubic return value>.positionLocal.x; o1.y <- <VSCubic return value>.positionLocal.y; o1.z <- <VSCubic return value>.positionLocal.z; 
                //   o0.x <- <VSCubic return value>.positionHomogeneous.x; o0.y <- <VSCubic return value>.positionHomogeneous.y; o0.z <- <VSCubic return value>.positionHomogeneous.z; o0.w <- <VSCubic return value>.positionHomogeneous.w
                //
                #line 23 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[3].xyzw  // r1.z <- output.positionHomogeneous.z
                
                #line 26
                mov o0.xyzw, r1.xyzz
                mov o1.xyz, v0.xyzx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:   64 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:   80
                //       float Ambient;                 // Offset:   92
                //       float Diffuse;                 // Offset:   96
                //       float3 Direction;              // Offset:  100
                //       float CastShadow;              // Offset:  112
                //       float Enabled;                 // Offset:  116
                //       float Pad1;                    // Offset:  120
                //       float Pad2;                    // Offset:  124
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   144
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  224
                //       float Ambient;                 // Offset:  236
                //       float Diffuse;                 // Offset:  240
                //       float3 Position;               // Offset:  244
                //       float Radius;                  // Offset:  256
                //       float CastShadow;              // Offset:  260
                //       float Enabled;                 // Offset:  264
                //       float Pad1;                    // Offset:  268
                //
                //   } gPointLights[4];                 // Offset:  224 Size:   192
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  416
                //       float Ambient;                 // Offset:  428
                //       float Diffuse;                 // Offset:  432
                //       float3 Position;               // Offset:  436
                //       float3 Direction;              // Offset:  448
                //       float Angle;                   // Offset:  460
                //       float Radius;                  // Offset:  464
                //       float CastShadow;              // Offset:  468
                //       float Enabled;                 // Offset:  472
                //       float Pad1;                    // Offset:  476
                //
                //   } gSpotLights[4];                  // Offset:  416 Size:   256
                //   float gFogStart;                   // Offset:  672 Size:     4
                //   float gFogRange;                   // Offset:  676 Size:     4
                //   float4 gFogColor;                  // Offset:  688 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // SamplerLinear                     sampler      NA          NA    1        1
                // gCubemap                          texture  float4        cube    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[44], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionLocal.x; v1.y <- input.positionLocal.y; v1.z <- input.positionLocal.z; 
                //   o0.x <- <PSForwardCubic return value>.x; o0.y <- <PSForwardCubic return value>.y; o0.z <- <PSForwardCubic return value>.z; o0.w <- <PSForwardCubic return value>.w
                //
                #line 31 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                sample_indexable(texturecube)(float,float,float,float) r0.xyzw, v1.xyzx, t0.xyzw, s1  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[4].xyzx  // r1.x <- toEyeWorld.x; r1.y <- toEyeWorld.y; r1.z <- toEyeWorld.z
                
                #line 304 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.w, cb0[7].y, l(1.000000)
                if_nz r1.w
                
                #line 173
                  eq r1.w, cb0[7].x, l(1.000000)
                  mul r2.xyz, r0.xyzx, cb0[5].wwww  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 103
                  sample_indexable(texture2d)(float,float,float,float) r2.w, l(0.500000, 0.500000, 0.000000, 0.000000), t1.yzwx, s0  // r2.w <- depthS
                
                #line 107
                  lt r2.w, l(-0.001000), r2.w
                
                #line 155
                  mul r3.xyz, r0.xyzx, cb0[5].xyzx
                  mul r3.xyz, r3.xyzx, cb0[5].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 191
                  movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx
                
                #line 208
                  movc r2.xyz, r1.wwww, r2.xyzx, r3.xyzx  // r2.x <- <ComputeDirectionalLight return value>.x; r2.y <- <ComputeDirectionalLight return value>.y; r2.z <- <ComputeDirectionalLight return value>.z
                
                #line 317
                else 
                  mov r2.xyz, l(0,0,0,0)
                endif 
                
                #line 304
                eq r1.w, cb0[10].y, l(1.000000)
                if_nz r1.w
                
                #line 173
                  eq r1.w, cb0[10].x, l(1.000000)
                  mul r3.xyz, r0.xyzx, cb0[8].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 103
                  sample_indexable(texture2d)(float,float,float,float) r2.w, l(0.500000, 0.500000, 0.000000, 0.000000), t1.yzwx, s0  // r2.w <- depthS
                
                #line 107
                  lt r2.w, l(-0.001000), r2.w
                
                #line 155
                  mul r4.xyz, r0.xyzx, cb0[8].xyzx
                  mul r4.xyz, r4.xyzx, cb0[8].wwww  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 191
                  movc r3.xyz, r2.wwww, r4.xyzx, r3.xyzx
                
                #line 208
                  movc r3.xyz, r1.wwww, r3.xyzx, r4.xyzx  // r3.x <- <ComputeDirectionalLight return value>.x; r3.y <- <ComputeDirectionalLight return value>.y; r3.z <- <ComputeDirectionalLight return value>.z
                
                #line 306
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 317
                endif 
                
                #line 304
                eq r1.w, cb0[13].y, l(1.000000)
                if_nz r1.w
                
                #line 173
                  eq r1.w, cb0[13].x, l(1.000000)
                  mul r3.xyz, r0.xyzx, cb0[11].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 103
                  sample_indexable(texture2d)(float,float,float,float) r2.w, l(0.500000, 0.500000, 0.000000, 0.000000), t1.yzwx, s0  // r2.w <- depthS
                
                #line 107
                  lt r2.w, l(-0.001000), r2.w
                
                #line 155
                  mul r4.xyz, r0.xyzx, cb0[11].xyzx
                  mul r4.xyz, r4.xyzx, cb0[11].wwww  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 191
                  movc r3.xyz, r2.wwww, r4.xyzx, r3.xyzx
                
                #line 208
                  movc r3.xyz, r1.wwww, r3.xyzx, r4.xyzx  // r3.x <- <ComputeDirectionalLight return value>.x; r3.y <- <ComputeDirectionalLight return value>.y; r3.z <- <ComputeDirectionalLight return value>.z
                
                #line 306
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 317
                endif 
                
                #line 323
                eq r1.w, cb0[16].z, l(1.000000)
                
                #line 220
                add r3.xyz, v1.xyzx, -cb0[15].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                dp3 r2.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r2.w  // r2.w <- distance
                
                #line 155
                mul r3.xyz, r0.xyzx, cb0[14].xyzx
                mul r3.xyz, r3.xyzx, cb0[14].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 80
                div r3.w, r2.w, cb0[16].x  // r3.w <- f
                mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                lt r4.x, l(0.000000), r3.w
                div r2.w, r2.w, r3.w  // r2.w <- d
                add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                mul r2.w, r2.w, r2.w
                div r2.w, cb0[15].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 92
                and r2.w, r2.w, r4.x
                
                #line 325
                mad r3.xyz, r3.xyzx, r2.wwww, r2.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 333
                movc r2.xyz, r1.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 323
                eq r1.w, cb0[19].z, l(1.000000)
                
                #line 220
                add r3.xyz, v1.xyzx, -cb0[18].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                dp3 r2.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r2.w  // r2.w <- distance
                
                #line 155
                mul r3.xyz, r0.xyzx, cb0[17].xyzx
                mul r3.xyz, r3.xyzx, cb0[17].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 80
                div r3.w, r2.w, cb0[19].x  // r3.w <- f
                mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                lt r4.x, l(0.000000), r3.w
                div r2.w, r2.w, r3.w  // r2.w <- d
                add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                mul r2.w, r2.w, r2.w
                div r2.w, cb0[18].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 92
                and r2.w, r2.w, r4.x
                
                #line 325
                mad r3.xyz, r3.xyzx, r2.wwww, r2.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 333
                movc r2.xyz, r1.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 323
                eq r1.w, cb0[22].z, l(1.000000)
                
                #line 220
                add r3.xyz, v1.xyzx, -cb0[21].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                dp3 r2.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r2.w  // r2.w <- distance
                
                #line 155
                mul r3.xyz, r0.xyzx, cb0[20].xyzx
                mul r3.xyz, r3.xyzx, cb0[20].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 80
                div r3.w, r2.w, cb0[22].x  // r3.w <- f
                mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                lt r4.x, l(0.000000), r3.w
                div r2.w, r2.w, r3.w  // r2.w <- d
                add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                mul r2.w, r2.w, r2.w
                div r2.w, cb0[21].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 92
                and r2.w, r2.w, r4.x
                
                #line 325
                mad r3.xyz, r3.xyzx, r2.wwww, r2.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 333
                movc r2.xyz, r1.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 323
                eq r1.w, cb0[25].z, l(1.000000)
                
                #line 220
                add r3.xyz, v1.xyzx, -cb0[24].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                dp3 r2.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r2.w  // r2.w <- distance
                
                #line 155
                mul r3.xyz, r0.xyzx, cb0[23].xyzx
                mul r3.xyz, r3.xyzx, cb0[23].wwww  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 80
                div r3.w, r2.w, cb0[25].x  // r3.w <- f
                mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                lt r4.x, l(0.000000), r3.w
                div r2.w, r2.w, r3.w  // r2.w <- d
                add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                mul r2.w, r2.w, r2.w
                div r2.w, cb0[24].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 92
                and r2.w, r2.w, r4.x
                
                #line 325
                mad r3.xyz, r3.xyzx, r2.wwww, r2.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 333
                movc r2.xyz, r1.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 339
                eq r1.w, cb0[29].z, l(1.000000)
                if_nz r1.w
                
                #line 252
                  add r3.xyz, v1.xyzx, -cb0[27].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r1.w, r3.xyzx, r3.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r3.xyz, r3.xyzx, r1.wwww
                  dp3 r2.w, r3.xyzx, cb0[28].xyzx  // r2.w <- spotFactor
                  add r3.x, -|r2.w|, l(1.000000)
                  sqrt r3.x, r3.x
                  mad r3.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r3.y, r3.y, |r2.w|, l(-0.212114)
                  mad r3.y, r3.y, |r2.w|, l(1.570729)
                  mul r3.z, r3.x, r3.y
                  mad r3.z, r3.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r3.z
                  mad r2.w, r3.y, r3.x, r2.w
                  mul r3.x, r2.w, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[28].w, r3.x
                
                #line 155
                  mul r3.yzw, r0.xxyz, cb0[26].xxyz
                  mul r3.yzw, r3.yyzw, cb0[26].wwww  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                
                #line 80
                  div r4.x, r1.w, cb0[29].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r1.w, r1.w, r4.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[27].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 92
                  and r1.w, r1.w, r4.y
                
                #line 275
                  mad r2.w, -r2.w, l(57.295780), l(1.000000)
                  add r4.x, -cb0[28].w, l(1.000000)
                  div r2.w, r2.w, r4.x
                  add r2.w, -r2.w, l(1.000000)  // r2.w <- attenuationS
                  mul r1.w, r1.w, r2.w
                  mul r3.yzw, r1.wwww, r3.yyzw  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  and r3.xyz, r3.yzwy, r3.xxxx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 341
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 349
                endif 
                
                #line 339
                eq r1.w, cb0[33].z, l(1.000000)
                if_nz r1.w
                
                #line 252
                  add r3.xyz, v1.xyzx, -cb0[31].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r1.w, r3.xyzx, r3.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r3.xyz, r3.xyzx, r1.wwww
                  dp3 r2.w, r3.xyzx, cb0[32].xyzx  // r2.w <- spotFactor
                  add r3.x, -|r2.w|, l(1.000000)
                  sqrt r3.x, r3.x
                  mad r3.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r3.y, r3.y, |r2.w|, l(-0.212114)
                  mad r3.y, r3.y, |r2.w|, l(1.570729)
                  mul r3.z, r3.x, r3.y
                  mad r3.z, r3.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r3.z
                  mad r2.w, r3.y, r3.x, r2.w
                  mul r3.x, r2.w, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[32].w, r3.x
                
                #line 155
                  mul r3.yzw, r0.xxyz, cb0[30].xxyz
                  mul r3.yzw, r3.yyzw, cb0[30].wwww  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                
                #line 80
                  div r4.x, r1.w, cb0[33].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r1.w, r1.w, r4.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[31].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 92
                  and r1.w, r1.w, r4.y
                
                #line 275
                  mad r2.w, -r2.w, l(57.295780), l(1.000000)
                  add r4.x, -cb0[32].w, l(1.000000)
                  div r2.w, r2.w, r4.x
                  add r2.w, -r2.w, l(1.000000)  // r2.w <- attenuationS
                  mul r1.w, r1.w, r2.w
                  mul r3.yzw, r1.wwww, r3.yyzw  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  and r3.xyz, r3.yzwy, r3.xxxx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 341
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 349
                endif 
                
                #line 339
                eq r1.w, cb0[37].z, l(1.000000)
                if_nz r1.w
                
                #line 252
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r1.w, r3.xyzx, r3.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r3.xyz, r3.xyzx, r1.wwww
                  dp3 r2.w, r3.xyzx, cb0[36].xyzx  // r2.w <- spotFactor
                  add r3.x, -|r2.w|, l(1.000000)
                  sqrt r3.x, r3.x
                  mad r3.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r3.y, r3.y, |r2.w|, l(-0.212114)
                  mad r3.y, r3.y, |r2.w|, l(1.570729)
                  mul r3.z, r3.x, r3.y
                  mad r3.z, r3.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r3.z
                  mad r2.w, r3.y, r3.x, r2.w
                  mul r3.x, r2.w, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 155
                  mul r3.yzw, r0.xxyz, cb0[34].xxyz
                  mul r3.yzw, r3.yyzw, cb0[34].wwww  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                
                #line 80
                  div r4.x, r1.w, cb0[37].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r1.w, r1.w, r4.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[35].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 92
                  and r1.w, r1.w, r4.y
                
                #line 275
                  mad r2.w, -r2.w, l(57.295780), l(1.000000)
                  add r4.x, -cb0[36].w, l(1.000000)
                  div r2.w, r2.w, r4.x
                  add r2.w, -r2.w, l(1.000000)  // r2.w <- attenuationS
                  mul r1.w, r1.w, r2.w
                  mul r3.yzw, r1.wwww, r3.yyzw  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  and r3.xyz, r3.yzwy, r3.xxxx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 341
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 349
                endif 
                
                #line 339
                eq r1.w, cb0[41].z, l(1.000000)
                if_nz r1.w
                
                #line 252
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r1.w, r3.xyzx, r3.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r3.xyz, r3.xyzx, r1.wwww
                  dp3 r2.w, r3.xyzx, cb0[40].xyzx  // r2.w <- spotFactor
                  add r3.x, -|r2.w|, l(1.000000)
                  sqrt r3.x, r3.x
                  mad r3.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r3.y, r3.y, |r2.w|, l(-0.212114)
                  mad r3.y, r3.y, |r2.w|, l(1.570729)
                  mul r3.z, r3.x, r3.y
                  mad r3.z, r3.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r3.z
                  mad r2.w, r3.y, r3.x, r2.w
                  mul r3.x, r2.w, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 155
                  mul r0.xyz, r0.xyzx, cb0[38].xyzx
                  mul r0.xyz, r0.xyzx, cb0[38].wwww  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 80
                  div r3.y, r1.w, cb0[41].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r1.w, r1.w, r3.y  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[39].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 92
                  and r1.w, r1.w, r3.z
                
                #line 275
                  mad r2.w, -r2.w, l(57.295780), l(1.000000)
                  add r3.y, -cb0[40].w, l(1.000000)
                  div r2.w, r2.w, r3.y
                  add r2.w, -r2.w, l(1.000000)  // r2.w <- attenuationS
                  mul r1.w, r1.w, r2.w
                  mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  and r0.xyz, r0.xyzx, r3.xxxx
                
                #line 341
                  add r2.xyz, r0.xyzx, r2.xyzx
                
                #line 349
                endif 
                
                #line 50 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                lt r0.x, l(0.000000), cb0[42].y
                dp3 r0.y, r1.xyzx, r1.xyzx
                sqrt r0.y, r0.y  // r0.y <- distToEye
                
                #line 117 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[42].x
                div_sat r0.y, r0.y, cb0[42].y  // r0.y <- fogLerp
                add r1.xyz, -r2.xyzx, cb0[43].xyzx
                mad r1.xyz, r0.yyyy, r1.xyzx, r2.xyzx  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z
                
                #line 55 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                movc o0.xyz, r0.xxxx, r1.xyzx, r2.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 265 instruction slots used
                            
            };
        }

    }

    technique11 DeferredCubemap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float3 gEyePositionWorld;          // Offset:   64 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:   80
                //       float Ambient;                 // Offset:   92
                //       float Diffuse;                 // Offset:   96
                //       float3 Direction;              // Offset:  100
                //       float CastShadow;              // Offset:  112
                //       float Enabled;                 // Offset:  116
                //       float Pad1;                    // Offset:  120
                //       float Pad2;                    // Offset:  124
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   144 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  224
                //       float Ambient;                 // Offset:  236
                //       float Diffuse;                 // Offset:  240
                //       float3 Position;               // Offset:  244
                //       float Radius;                  // Offset:  256
                //       float CastShadow;              // Offset:  260
                //       float Enabled;                 // Offset:  264
                //       float Pad1;                    // Offset:  268
                //
                //   } gPointLights[4];                 // Offset:  224 Size:   192 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  416
                //       float Ambient;                 // Offset:  428
                //       float Diffuse;                 // Offset:  432
                //       float3 Position;               // Offset:  436
                //       float3 Direction;              // Offset:  448
                //       float Angle;                   // Offset:  460
                //       float Radius;                  // Offset:  464
                //       float CastShadow;              // Offset:  468
                //       float Enabled;                 // Offset:  472
                //       float Pad1;                    // Offset:  476
                //
                //   } gSpotLights[4];                  // Offset:  416 Size:   256 [unused]
                //   float gFogStart;                   // Offset:  672 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  676 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  688 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o1.x <- <VSCubic return value>.positionLocal.x; o1.y <- <VSCubic return value>.positionLocal.y; o1.z <- <VSCubic return value>.positionLocal.z; 
                //   o0.x <- <VSCubic return value>.positionHomogeneous.x; o0.y <- <VSCubic return value>.positionHomogeneous.y; o0.z <- <VSCubic return value>.positionHomogeneous.z; o0.w <- <VSCubic return value>.positionHomogeneous.w
                //
                #line 23 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[3].xyzw  // r1.z <- output.positionHomogeneous.z
                
                #line 26
                mov o0.xyzw, r1.xyzz
                mov o1.xyz, v0.xyzx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gCubemap                          texture  float4        cube    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionLocal.x; v1.y <- input.positionLocal.y; v1.z <- input.positionLocal.z; 
                //   o2.x <- <PSDeferredCubic return value>.depth.x; o2.y <- <PSDeferredCubic return value>.depth.y; o2.z <- <PSDeferredCubic return value>.depth.z; o2.w <- <PSDeferredCubic return value>.depth.w; 
                //   o1.x <- <PSDeferredCubic return value>.normal.x; o1.y <- <PSDeferredCubic return value>.normal.y; o1.z <- <PSDeferredCubic return value>.normal.z; o1.w <- <PSDeferredCubic return value>.normal.w; 
                //   o0.x <- <PSDeferredCubic return value>.color.x; o0.y <- <PSDeferredCubic return value>.color.y; o0.z <- <PSDeferredCubic return value>.color.z; o0.w <- <PSDeferredCubic return value>.color.w
                //
                #line 63 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                sample_indexable(texturecube)(float,float,float,float) o0.xyzw, v1.xyzx, t0.xyzw, s0
                
                #line 69
                mov o1.xyzw, l(0,0,0,0)
                mov o2.xyz, v1.xyzx
                mov o2.w, l(0)
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

}

