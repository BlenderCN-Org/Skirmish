//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorldViewProjection;      // Offset:    0, size:   64
    float3  gEyePositionWorld;          // Offset:   64, size:   12
    DirectionalLight gDirLights[3];     // Offset:   80, size:  136
    PointLight gPointLights[4];         // Offset:  224, size:  188
    SpotLight gSpotLights[4];           // Offset:  416, size:  252
    float   gFogStart;                  // Offset:  668, size:    4
    float   gFogRange;                  // Offset:  672, size:    4
    float4  gFogColor;                  // Offset:  688, size:   16
}

//
// 6 local object(s)
//
SamplerState SamplerPoint
{
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState SamplerComparisonShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
TextureCube gCubemap;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 ForwardCubemap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float3 gEyePositionWorld;          // Offset:   64 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:   80
                //       float Ambient;                 // Offset:   92
                //       float Diffuse;                 // Offset:   96
                //       float3 Direction;              // Offset:  100
                //       float CastShadow;              // Offset:  112
                //       float Enabled;                 // Offset:  116
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  224
                //       float Ambient;                 // Offset:  236
                //       float Diffuse;                 // Offset:  240
                //       float3 Position;               // Offset:  244
                //       float Radius;                  // Offset:  256
                //       float CastShadow;              // Offset:  260
                //       float Enabled;                 // Offset:  264
                //
                //   } gPointLights[4];                 // Offset:  224 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  416
                //       float Ambient;                 // Offset:  428
                //       float Diffuse;                 // Offset:  432
                //       float3 Position;               // Offset:  436
                //       float3 Direction;              // Offset:  448
                //       float Angle;                   // Offset:  460
                //       float Radius;                  // Offset:  464
                //       float CastShadow;              // Offset:  468
                //       float Enabled;                 // Offset:  472
                //
                //   } gSpotLights[4];                  // Offset:  416 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  668 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  672 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  688 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o1.x <- <VSCubic return value>.positionLocal.x; o1.y <- <VSCubic return value>.positionLocal.y; o1.z <- <VSCubic return value>.positionLocal.z; 
                //   o0.x <- <VSCubic return value>.positionHomogeneous.x; o0.y <- <VSCubic return value>.positionHomogeneous.y; o0.z <- <VSCubic return value>.positionHomogeneous.z; o0.w <- <VSCubic return value>.positionHomogeneous.w
                //
                #line 23 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[3].xyzw  // r1.z <- output.positionHomogeneous.z
                
                #line 26
                mov o0.xyzw, r1.xyzz
                mov o1.xyz, v0.xyzx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:   64 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:   80
                //       float Ambient;                 // Offset:   92
                //       float Diffuse;                 // Offset:   96
                //       float3 Direction;              // Offset:  100
                //       float CastShadow;              // Offset:  112
                //       float Enabled;                 // Offset:  116
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  224
                //       float Ambient;                 // Offset:  236
                //       float Diffuse;                 // Offset:  240
                //       float3 Position;               // Offset:  244
                //       float Radius;                  // Offset:  256
                //       float CastShadow;              // Offset:  260
                //       float Enabled;                 // Offset:  264
                //
                //   } gPointLights[4];                 // Offset:  224 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  416
                //       float Ambient;                 // Offset:  428
                //       float Diffuse;                 // Offset:  432
                //       float3 Position;               // Offset:  436
                //       float3 Direction;              // Offset:  448
                //       float Angle;                   // Offset:  460
                //       float Radius;                  // Offset:  464
                //       float CastShadow;              // Offset:  468
                //       float Enabled;                 // Offset:  472
                //
                //   } gSpotLights[4];                  // Offset:  416 Size:   252
                //   float gFogStart;                   // Offset:  668 Size:     4
                //   float gFogRange;                   // Offset:  672 Size:     4
                //   float4 gFogColor;                  // Offset:  688 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerComparisonShadow         sampler_c      NA          NA    1        1
                // gCubemap                          texture  float4        cube    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[44], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionLocal.x; v1.y <- input.positionLocal.y; v1.z <- input.positionLocal.z; 
                //   o0.x <- <PSForwardCubic return value>.x; o0.y <- <PSForwardCubic return value>.y; o0.z <- <PSForwardCubic return value>.z; o0.w <- <PSForwardCubic return value>.w
                //
                #line 31 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                sample_indexable(texturecube)(float,float,float,float) r0.xyzw, v1.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                
                #line 300 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.x, cb0[7].y, l(1.000000)
                if_nz r1.x
                
                #line 171
                  mul r1.xyz, r0.xyzx, cb0[5].xyzx
                  mul r1.xyz, r1.xyzx, cb0[5].wwww  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                  log r1.xyz, r1.xyzx
                  mul r1.xyz, r1.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r1.xyz, r1.xyzx
                  min r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 201
                  eq r1.w, cb0[7].x, l(1.000000)
                
                #line 125
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, l(-1.#IND00, -1.#IND00, 0.000000, 0.000000), t1.xxxx, s1, l(-1.#IND00)  // r2.x <- percentLit
                
                #line 129
                  mul r2.x, r2.x, l(1.000000)  // r2.x <- <CalcShadowFactor return value>
                
                #line 205
                  mul r2.xyz, r1.xyzx, r2.xxxx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                  movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 312
                  mov r1.w, r0.w
                else 
                  mov r1.xyzw, l(0,0,0,0)
                endif 
                
                #line 300
                eq r2.x, cb0[10].y, l(1.000000)
                if_nz r2.x
                
                #line 171
                  mul r2.xyz, r0.xyzx, cb0[8].xyzx
                  mul r2.xyz, r2.xyzx, cb0[8].wwww  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                  log r2.xyz, r2.xyzx
                  mul r2.xyz, r2.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r2.xyz, r2.xyzx
                  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 201
                  eq r2.w, cb0[10].x, l(1.000000)
                
                #line 125
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, l(-1.#IND00, -1.#IND00, 0.000000, 0.000000), t1.xxxx, s1, l(-1.#IND00)  // r3.x <- percentLit
                
                #line 129
                  mul r3.x, r3.x, l(1.000000)  // r3.x <- <CalcShadowFactor return value>
                
                #line 205
                  mul r3.xyz, r2.xyzx, r3.xxxx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 302
                  mov r2.w, r0.w
                  add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 312
                endif 
                
                #line 300
                eq r2.x, cb0[13].y, l(1.000000)
                if_nz r2.x
                
                #line 171
                  mul r2.xyz, r0.xyzx, cb0[11].xyzx
                  mul r2.xyz, r2.xyzx, cb0[11].wwww  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                  log r2.xyz, r2.xyzx
                  mul r2.xyz, r2.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r2.xyz, r2.xyzx
                  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 201
                  eq r2.w, cb0[13].x, l(1.000000)
                
                #line 125
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, l(-1.#IND00, -1.#IND00, 0.000000, 0.000000), t1.xxxx, s1, l(-1.#IND00)  // r3.x <- percentLit
                
                #line 129
                  mul r3.x, r3.x, l(1.000000)  // r3.x <- <CalcShadowFactor return value>
                
                #line 205
                  mul r3.xyz, r2.xyzx, r3.xxxx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 302
                  mov r2.w, r0.w
                  add r1.xyzw, r1.xyzw, r2.xyzw
                
                #line 312
                endif 
                
                #line 318
                eq r2.x, cb0[16].z, l(1.000000)
                if_nz r2.x
                
                #line 220
                  add r2.xyz, v1.xyzx, -cb0[15].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[14].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 98
                  div r2.y, r2.x, cb0[16].x  // r2.y <- f
                  mad r2.y, -r2.y, r2.y, l(1.000000)  // r2.y <- denom
                  lt r2.z, l(0.000000), r2.y
                  div r2.x, r2.x, r2.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[15].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.x, r2.x, r2.z
                
                #line 238
                  mov r3.w, r0.w
                
                #line 320
                  mad r1.xyzw, r3.xyzw, r2.xxxx, r1.xyzw
                
                #line 328
                endif 
                
                #line 318
                eq r2.x, cb0[19].z, l(1.000000)
                if_nz r2.x
                
                #line 220
                  add r2.xyz, v1.xyzx, -cb0[18].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[17].xxyz
                  mul r2.yzw, r2.yyzw, cb0[17].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 98
                  div r2.y, r2.x, cb0[19].x  // r2.y <- f
                  mad r2.y, -r2.y, r2.y, l(1.000000)  // r2.y <- denom
                  lt r2.z, l(0.000000), r2.y
                  div r2.x, r2.x, r2.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[18].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.x, r2.x, r2.z
                
                #line 238
                  mov r3.w, r0.w
                
                #line 320
                  mad r1.xyzw, r3.xyzw, r2.xxxx, r1.xyzw
                
                #line 328
                endif 
                
                #line 318
                eq r2.x, cb0[22].z, l(1.000000)
                if_nz r2.x
                
                #line 220
                  add r2.xyz, v1.xyzx, -cb0[21].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[20].xxyz
                  mul r2.yzw, r2.yyzw, cb0[20].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 98
                  div r2.y, r2.x, cb0[22].x  // r2.y <- f
                  mad r2.y, -r2.y, r2.y, l(1.000000)  // r2.y <- denom
                  lt r2.z, l(0.000000), r2.y
                  div r2.x, r2.x, r2.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[21].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.x, r2.x, r2.z
                
                #line 238
                  mov r3.w, r0.w
                
                #line 320
                  mad r1.xyzw, r3.xyzw, r2.xxxx, r1.xyzw
                
                #line 328
                endif 
                
                #line 318
                eq r2.x, cb0[25].z, l(1.000000)
                if_nz r2.x
                
                #line 220
                  add r2.xyz, v1.xyzx, -cb0[24].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[23].xxyz
                  mul r2.yzw, r2.yyzw, cb0[23].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 98
                  div r2.y, r2.x, cb0[25].x  // r2.y <- f
                  mad r2.y, -r2.y, r2.y, l(1.000000)  // r2.y <- denom
                  lt r2.z, l(0.000000), r2.y
                  div r2.x, r2.x, r2.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[24].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.x, r2.x, r2.z
                
                #line 238
                  mov r3.w, r0.w
                
                #line 320
                  mad r1.xyzw, r3.xyzw, r2.xxxx, r1.xyzw
                
                #line 328
                endif 
                
                #line 334
                eq r2.x, cb0[29].z, l(1.000000)
                if_nz r2.x
                
                #line 252
                  add r2.xyz, v1.xyzx, -cb0[27].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, cb0[28].xyzx
                  add r2.y, -|r2.x|, l(1.000000)
                  sqrt r2.y, r2.y
                  mad r2.z, |r2.x|, l(-0.018729), l(0.074261)
                  mad r2.z, r2.z, |r2.x|, l(-0.212114)
                  mad r2.z, r2.z, |r2.x|, l(1.570729)
                  mul r2.w, r2.y, r2.z
                  mad r2.w, r2.w, l(-2.000000), l(3.141593)
                  lt r2.x, r2.x, -r2.x
                  and r2.x, r2.x, r2.w
                  mad r2.x, r2.z, r2.y, r2.x
                  mul r2.x, r2.x, l(57.295780)  // r2.x <- lightToSurfaceAngle
                  ge r2.x, cb0[28].w, r2.x
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[26].xxyz
                  mul r2.yzw, r2.yyzw, cb0[26].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 275
                  mov r3.w, r0.w
                  and r2.xyzw, r2.xxxx, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 336
                  add r1.xyzw, r1.xyzw, r2.xyzw
                
                #line 344
                endif 
                
                #line 334
                eq r2.x, cb0[33].z, l(1.000000)
                if_nz r2.x
                
                #line 252
                  add r2.xyz, v1.xyzx, -cb0[31].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, cb0[32].xyzx
                  add r2.y, -|r2.x|, l(1.000000)
                  sqrt r2.y, r2.y
                  mad r2.z, |r2.x|, l(-0.018729), l(0.074261)
                  mad r2.z, r2.z, |r2.x|, l(-0.212114)
                  mad r2.z, r2.z, |r2.x|, l(1.570729)
                  mul r2.w, r2.y, r2.z
                  mad r2.w, r2.w, l(-2.000000), l(3.141593)
                  lt r2.x, r2.x, -r2.x
                  and r2.x, r2.x, r2.w
                  mad r2.x, r2.z, r2.y, r2.x
                  mul r2.x, r2.x, l(57.295780)  // r2.x <- lightToSurfaceAngle
                  ge r2.x, cb0[32].w, r2.x
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[30].xxyz
                  mul r2.yzw, r2.yyzw, cb0[30].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 275
                  mov r3.w, r0.w
                  and r2.xyzw, r2.xxxx, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 336
                  add r1.xyzw, r1.xyzw, r2.xyzw
                
                #line 344
                endif 
                
                #line 334
                eq r2.x, cb0[37].z, l(1.000000)
                if_nz r2.x
                
                #line 252
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, cb0[36].xyzx
                  add r2.y, -|r2.x|, l(1.000000)
                  sqrt r2.y, r2.y
                  mad r2.z, |r2.x|, l(-0.018729), l(0.074261)
                  mad r2.z, r2.z, |r2.x|, l(-0.212114)
                  mad r2.z, r2.z, |r2.x|, l(1.570729)
                  mul r2.w, r2.y, r2.z
                  mad r2.w, r2.w, l(-2.000000), l(3.141593)
                  lt r2.x, r2.x, -r2.x
                  and r2.x, r2.x, r2.w
                  mad r2.x, r2.z, r2.y, r2.x
                  mul r2.x, r2.x, l(57.295780)  // r2.x <- lightToSurfaceAngle
                  ge r2.x, cb0[36].w, r2.x
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[34].xxyz
                  mul r2.yzw, r2.yyzw, cb0[34].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 275
                  mov r3.w, r0.w
                  and r2.xyzw, r2.xxxx, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 336
                  add r1.xyzw, r1.xyzw, r2.xyzw
                
                #line 344
                endif 
                
                #line 334
                eq r2.x, cb0[41].z, l(1.000000)
                if_nz r2.x
                
                #line 252
                  add r2.xyz, v1.xyzx, -cb0[39].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.x, r2.xyzx, cb0[40].xyzx
                  add r2.y, -|r2.x|, l(1.000000)
                  sqrt r2.y, r2.y
                  mad r2.z, |r2.x|, l(-0.018729), l(0.074261)
                  mad r2.z, r2.z, |r2.x|, l(-0.212114)
                  mad r2.z, r2.z, |r2.x|, l(1.570729)
                  mul r2.w, r2.y, r2.z
                  mad r2.w, r2.w, l(-2.000000), l(3.141593)
                  lt r2.x, r2.x, -r2.x
                  and r2.x, r2.x, r2.w
                  mad r2.x, r2.z, r2.y, r2.x
                  mul r2.x, r2.x, l(57.295780)  // r2.x <- lightToSurfaceAngle
                  ge r2.x, cb0[40].w, r2.x
                
                #line 171
                  mul r2.yzw, r0.xxyz, cb0[38].xxyz
                  mul r2.yzw, r2.yyzw, cb0[38].wwww  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r0.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 275
                  and r0.xyzw, r0.xyzw, r2.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 336
                  add r1.xyzw, r0.xyzw, r1.xyzw
                
                #line 344
                endif 
                
                #line 48 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                lt r0.x, l(0.000000), cb0[42].x
                add r0.yzw, -v1.xxyz, cb0[4].xxyz  // r0.y <- toEyeWorld.x; r0.z <- toEyeWorld.y; r0.w <- toEyeWorld.z
                dp3 r0.y, r0.yzwy, r0.yzwy
                sqrt r0.y, r0.y  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[41].w
                div_sat r0.y, r0.y, cb0[42].x  // r0.y <- fogLerp
                add r2.xyzw, -r1.xyzw, cb0[43].xyzw
                mad r2.xyzw, r0.yyyy, r2.xyzw, r1.xyzw  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z; r2.w <- <ComputeFog return value>.w
                
                #line 54 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                movc o0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw
                ret 
                // Approximately 251 instruction slots used
                            
            };
        }

    }

    technique11 DeferredCubemap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float3 gEyePositionWorld;          // Offset:   64 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:   80
                //       float Ambient;                 // Offset:   92
                //       float Diffuse;                 // Offset:   96
                //       float3 Direction;              // Offset:  100
                //       float CastShadow;              // Offset:  112
                //       float Enabled;                 // Offset:  116
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  224
                //       float Ambient;                 // Offset:  236
                //       float Diffuse;                 // Offset:  240
                //       float3 Position;               // Offset:  244
                //       float Radius;                  // Offset:  256
                //       float CastShadow;              // Offset:  260
                //       float Enabled;                 // Offset:  264
                //
                //   } gPointLights[4];                 // Offset:  224 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  416
                //       float Ambient;                 // Offset:  428
                //       float Diffuse;                 // Offset:  432
                //       float3 Position;               // Offset:  436
                //       float3 Direction;              // Offset:  448
                //       float Angle;                   // Offset:  460
                //       float Radius;                  // Offset:  464
                //       float CastShadow;              // Offset:  468
                //       float Enabled;                 // Offset:  472
                //
                //   } gSpotLights[4];                  // Offset:  416 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  668 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  672 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  688 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o1.x <- <VSCubic return value>.positionLocal.x; o1.y <- <VSCubic return value>.positionLocal.y; o1.z <- <VSCubic return value>.positionLocal.z; 
                //   o0.x <- <VSCubic return value>.positionHomogeneous.x; o0.y <- <VSCubic return value>.positionHomogeneous.y; o0.z <- <VSCubic return value>.positionHomogeneous.z; o0.w <- <VSCubic return value>.positionHomogeneous.w
                //
                #line 23 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[3].xyzw  // r1.z <- output.positionHomogeneous.z
                
                #line 26
                mov o0.xyzw, r1.xyzz
                mov o1.xyz, v0.xyzx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gCubemap                          texture  float4        cube    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     zw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.zw, position
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionLocal.x; v1.y <- input.positionLocal.y; v1.z <- input.positionLocal.z; 
                //   o3.x <- <PSDeferredCubic return value>.shadow.x; o3.y <- <PSDeferredCubic return value>.shadow.y; o3.z <- <PSDeferredCubic return value>.shadow.z; o3.w <- <PSDeferredCubic return value>.shadow.w; 
                //   o2.x <- <PSDeferredCubic return value>.depth.x; o2.y <- <PSDeferredCubic return value>.depth.y; o2.z <- <PSDeferredCubic return value>.depth.z; o2.w <- <PSDeferredCubic return value>.depth.w; 
                //   o1.x <- <PSDeferredCubic return value>.normal.x; o1.y <- <PSDeferredCubic return value>.normal.y; o1.z <- <PSDeferredCubic return value>.normal.z; o1.w <- <PSDeferredCubic return value>.normal.w; 
                //   o0.x <- <PSDeferredCubic return value>.color.x; o0.y <- <PSDeferredCubic return value>.color.y; o0.z <- <PSDeferredCubic return value>.color.z; o0.w <- <PSDeferredCubic return value>.color.w
                //
                #line 63 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderCubemap.fx"
                sample_indexable(texturecube)(float,float,float,float) o0.xyzw, v1.xyzx, t0.xyzw, s0
                
                #line 71
                mov o1.xyzw, l(0,0,0,0)
                
                #line 68
                div o2.w, v0.z, v0.w
                
                #line 71
                mov o2.xyz, v1.xyzx
                mov o3.xyzw, l(0,0,0,0)
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

}

