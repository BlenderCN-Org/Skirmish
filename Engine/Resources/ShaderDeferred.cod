//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProjection;      // Offset:   64, size:   64
    float3  gEyePositionWorld;          // Offset:  128, size:   12
    float   gPadding;                   // Offset:  140, size:    4
    DirectionalLight gDirLight;         // Offset:  144, size:   64
    PointLight gPointLight;             // Offset:  208, size:   80
    SpotLight gSpotLight;               // Offset:  288, size:   96
    float   gFogStart;                  // Offset:  384, size:    4
    float   gFogRange;                  // Offset:  388, size:    4
    float4  gFogColor;                  // Offset:  400, size:   16
}

//
// 17 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerState SamplerPoint
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2D gColorMap;
Texture2D gNormalMap;
Texture2D gDepthMap;
Texture2D gLightMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 DeferredDirectionalLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o1.x <- <VSDirectionalLight return value>.tex.x; o1.y <- <VSDirectionalLight return value>.tex.y; 
                //   o0.x <- <VSDirectionalLight return value>.positionHomogeneous.x; o0.y <- <VSDirectionalLight return value>.positionHomogeneous.y; o0.z <- <VSDirectionalLight return value>.positionHomogeneous.z; o0.w <- <VSDirectionalLight return value>.positionHomogeneous.w
                //
                #line 50 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[4].xyzw
                dp4 o0.y, r0.xyzw, cb0[5].xyzw
                dp4 o0.z, r0.xyzw, cb0[6].xyzw
                dp4 o0.w, r0.xyzw, cb0[7].xyzw
                
                #line 53
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gDepthMap                         texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o0.x <- <PSDirectionalLight return value>.x; o0.y <- <PSDirectionalLight return value>.y; o0.z <- <PSDirectionalLight return value>.z; o0.w <- <PSDirectionalLight return value>.w
                //
                #line 88 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.wxyz, s0  // r0.x <- depth.w
                eq r0.x, r0.x, l(1.000000)
                mov o0.xyzw, l(1.000000,1.000000,1.000000,0)
                retc_nz r0.x
                
                #line 96
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xyzw, s0  // r0.x <- normal.x; r0.y <- normal.y; r0.z <- normal.z
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w
                eq r1.x, r0.w, l(0.000000)
                mov o0.xyzw, l(1.000000,1.000000,1.000000,0)
                retc_nz r1.x
                
                #line 296 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                dp3 r0.x, r0.xyzx, -cb0[12].xyzx
                max r0.x, r0.x, l(0.000000)
                dp3 r0.y, -cb0[12].xyzx, -cb0[12].xyzx
                sqrt r0.y, r0.y
                mul r0.y, r0.w, r0.y
                div r0.x, r0.x, r0.y  // r0.x <- brightness
                min r0.x, r0.x, l(1.000000)
                mul o0.xyz, r0.xxxx, cb0[10].xyzx
                
                #line 108 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov o0.w, l(0)
                ret 
                // Approximately 20 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 DeferredPointLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o2.x <- <VSPointLight return value>.positionScreen.x; o2.y <- <VSPointLight return value>.positionScreen.y; o2.z <- <VSPointLight return value>.positionScreen.z; o2.w <- <VSPointLight return value>.positionScreen.w; 
                //   o1.x <- <VSPointLight return value>.positionWorld.x; o1.y <- <VSPointLight return value>.positionWorld.y; o1.z <- <VSPointLight return value>.positionWorld.z; 
                //   o0.x <- <VSPointLight return value>.positionHomogeneous.x; o0.y <- <VSPointLight return value>.positionHomogeneous.y; o0.z <- <VSPointLight return value>.positionHomogeneous.z; o0.w <- <VSPointLight return value>.positionHomogeneous.w
                //
                #line 59 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.positionHomogeneous.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.positionHomogeneous.w
                
                #line 63
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r1.xyzw
                
                #line 60
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 63
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gDepthMap                         texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xyzw        2     NONE   float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v2.xyw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.positionScreen.x; v2.y <- input.positionScreen.y; v2.z <- input.positionScreen.z; v2.w <- input.positionScreen.w; 
                //   o0.x <- <PSPointLight return value>.x; o0.y <- <PSPointLight return value>.y; o0.z <- <PSPointLight return value>.z; o0.w <- <PSPointLight return value>.w
                //
                #line 112 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                div r0.xy, v2.xyxx, v2.wwww  // r0.x <- input.positionScreen.x; r0.y <- input.positionScreen.y
                
                #line 116
                mov r0.z, -r0.y
                add r0.xy, r0.xzxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r0.x <- tex.x; r0.y <- tex.y
                
                #line 119
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s0  // r1.x <- depth.x; r1.y <- depth.y; r1.z <- depth.z; r1.w <- depth.w
                eq r0.z, r1.w, l(1.000000)
                mov o0.xyzw, l(1.000000,1.000000,1.000000,0)
                retc_nz r0.z
                
                #line 127
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t1.xyzw, s0  // r0.x <- normal.x; r0.y <- normal.y; r0.z <- normal.z
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w
                eq r0.w, r0.w, l(0.000000)
                mov o0.xyzw, l(1.000000,1.000000,1.000000,0)
                retc_nz r0.w
                
                #line 309 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r1.xyz, -r1.xyzx, cb0[16].xyzx  // r1.x <- lightVec.x; r1.y <- lightVec.y; r1.z <- lightVec.z
                
                #line 312
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 315
                lt r1.w, cb0[16].w, r0.w
                
                #line 322
                div r1.xyz, r1.xyzx, r0.wwww
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)  // r0.x <- intensity
                div r0.y, r0.w, cb0[16].w
                add r0.y, -r0.y, l(1.000000)
                mul r0.yzw, r0.yyyy, cb0[14].xxyz
                mul r1.x, cb0[16].w, l(0.100000)
                mul r0.yzw, r0.yyzw, r1.xxxx
                mul r0.xyz, r0.yzwy, r0.xxxx  // r0.x <- light.x; r0.y <- light.y; r0.z <- light.z
                movc o0.xyz, r1.wwww, l(0,0,0,0), r0.xyzx
                mov o0.w, l(0)
                
                #line 140 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                ret 
                // Approximately 30 instruction slots used
                            
            };
        }

    }

    technique11 DeferredSpotLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o2.x <- <VSSpotLight return value>.positionScreen.x; o2.y <- <VSSpotLight return value>.positionScreen.y; o2.z <- <VSSpotLight return value>.positionScreen.z; o2.w <- <VSSpotLight return value>.positionScreen.w; 
                //   o1.x <- <VSSpotLight return value>.positionWorld.x; o1.y <- <VSSpotLight return value>.positionWorld.y; o1.z <- <VSSpotLight return value>.positionWorld.z; 
                //   o0.x <- <VSSpotLight return value>.positionHomogeneous.x; o0.y <- <VSSpotLight return value>.positionHomogeneous.y; o0.z <- <VSSpotLight return value>.positionHomogeneous.z; o0.w <- <VSSpotLight return value>.positionHomogeneous.w
                //
                #line 69 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.positionHomogeneous.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.positionHomogeneous.w
                
                #line 73
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r1.xyzw
                
                #line 70
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 73
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gDepthMap                         texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xyzw        2     NONE   float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v2.xyw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.positionScreen.x; v2.y <- input.positionScreen.y; v2.z <- input.positionScreen.z; v2.w <- input.positionScreen.w; 
                //   o0.x <- <PSSpotLight return value>.x; o0.y <- <PSSpotLight return value>.y; o0.z <- <PSSpotLight return value>.z; o0.w <- <PSSpotLight return value>.w
                //
                #line 144 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                div r0.xy, v2.xyxx, v2.wwww  // r0.x <- input.positionScreen.x; r0.y <- input.positionScreen.y
                
                #line 148
                mov r0.z, -r0.y
                add r0.xy, r0.xzxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r0.x <- tex.x; r0.y <- tex.y
                
                #line 151
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s0  // r1.x <- depth.x; r1.y <- depth.y; r1.z <- depth.z; r1.w <- depth.w
                eq r0.z, r1.w, l(1.000000)
                mov o0.xyzw, l(1.000000,1.000000,1.000000,0)
                retc_nz r0.z
                
                #line 159
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t1.xyzw, s0  // r0.x <- normal.x; r0.y <- normal.y; r0.z <- normal.z
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w
                eq r0.w, r0.w, l(0.000000)
                mov o0.xyzw, l(1.000000,1.000000,1.000000,0)
                retc_nz r0.w
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r1.xyz, -r1.xyzx, cb0[21].xyzx  // r1.x <- lightVec.x; r1.y <- lightVec.y; r1.z <- lightVec.z
                
                #line 340
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 343
                lt r1.w, cb0[21].w, r0.w
                
                #line 350
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 353
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)  // r0.x <- intensity
                
                #line 356
                dp3 r0.y, -r1.xyzx, cb0[22].xyzx
                max r0.y, r0.y, l(0.000000)
                log r0.y, r0.y
                mul r0.y, r0.y, cb0[22].w
                exp r0.y, r0.y  // r0.y <- spot
                mul r0.x, r0.y, r0.x
                div r0.y, r0.w, cb0[21].w
                add r0.y, -r0.y, l(1.000000)
                mul r0.yzw, r0.yyyy, cb0[19].xxyz
                mul r1.x, cb0[21].w, l(0.100000)
                mul r0.yzw, r0.yyzw, r1.xxxx
                mul r0.xyz, r0.yzwy, r0.xxxx  // r0.x <- light.x; r0.y <- light.y; r0.z <- light.z
                movc o0.xyz, r1.wwww, l(0,0,0,0), r0.xyzx
                mov o0.w, l(0)
                
                #line 172 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                ret 
                // Approximately 36 instruction slots used
                            
            };
        }

    }

    technique11 DeferredCombineLights
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  388 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  400 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o1.x <- <VSCombineLights return value>.tex.x; o1.y <- <VSCombineLights return value>.tex.y; 
                //   o0.x <- <VSCombineLights return value>.position.x; o0.y <- <VSCombineLights return value>.position.y; o0.z <- <VSCombineLights return value>.position.z; o0.w <- <VSCombineLights return value>.position.w
                //
                #line 79 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[4].xyzw
                dp4 o0.y, r0.xyzw, cb0[5].xyzw
                dp4 o0.z, r0.xyzw, cb0[6].xyzw
                dp4 o0.w, r0.xyzw, cb0[7].xyzw
                
                #line 82
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12
                //   float gPadding;                    // Offset:  140 Size:     4 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Direction;              // Offset:  192
                //       float Padding;                 // Offset:  204
                //
                //   } gDirLight;                       // Offset:  144 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  208
                //       float4 Diffuse;                // Offset:  224
                //       float4 Specular;               // Offset:  240
                //       float3 Position;               // Offset:  256
                //       float Range;                   // Offset:  268
                //       float3 Attenuation;            // Offset:  272
                //       float Padding;                 // Offset:  284
                //
                //   } gPointLight;                     // Offset:  208 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  288
                //       float4 Diffuse;                // Offset:  304
                //       float4 Specular;               // Offset:  320
                //       float3 Position;               // Offset:  336
                //       float Range;                   // Offset:  348
                //       float3 Direction;              // Offset:  352
                //       float Spot;                    // Offset:  364
                //       float3 Attenuation;            // Offset:  368
                //       float Padding;                 // Offset:  380
                //
                //   } gSpotLight;                      // Offset:  288 Size:    96 [unused]
                //   float gFogStart;                   // Offset:  384 Size:     4
                //   float gFogRange;                   // Offset:  388 Size:     4
                //   float4 gFogColor;                  // Offset:  400 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gColorMap                         texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gDepthMap                         texture  float4          2d    2        1
                // gLightMap                         texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[26], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o0.x <- color.x; o0.y <- color.y; o0.z <- color.z; o0.w <- color.w
                //
                #line 176 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t2.xyzw, s0  // r1.x <- depth.x; r1.y <- depth.y; r1.z <- depth.z; r1.w <- depth.w
                
                #line 181
                eq r0.w, r1.w, l(1.000000)
                if_nz r0.w
                
                #line 184
                  mov o0.xyz, r0.xyzx
                  mov o0.w, l(1.000000)
                else 
                
                #line 187
                  sample_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t1.xyzw, s0  // r0.w <- normal.w
                  sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t3.xyzw, s0  // r2.x <- lightColor.x; r2.y <- lightColor.y; r2.z <- lightColor.z
                  add r2.xyz, r0.wwww, r2.xyzx
                  mul r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                  lt r1.w, l(0.000000), cb0[24].y
                  add r1.xyz, -r1.xyzx, cb0[8].xyzx  // r1.x <- toEyeWorld.x; r1.y <- toEyeWorld.y; r1.z <- toEyeWorld.z
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x  // r1.x <- distToEye
                
                #line 472 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                  add r1.x, r1.x, -cb0[24].x
                  div_sat r1.x, r1.x, cb0[24].y  // r1.x <- fogLerp
                  mov r0.w, l(1.000000)
                  add r2.xyzw, -r0.xyzw, cb0[25].xyzw
                  mad r2.xyzw, r1.xxxx, r2.xyzw, r0.xyzw  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z; r2.w <- <ComputeFog return value>.w
                
                #line 198 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                  movc o0.xyzw, r1.wwww, r2.xyzw, r0.xyzw  // o0.x <- color.x; o0.y <- color.y; o0.z <- color.z; o0.w <- color.w
                endif 
                ret 
                // Approximately 23 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

}

