//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProjection;      // Offset:   64, size:   64
    float3  gEyePositionWorld;          // Offset:  128, size:   12
    DirectionalLight gDirLight;         // Offset:  144, size:   40
    PointLight gPointLight;             // Offset:  192, size:   44
    SpotLight gSpotLight;               // Offset:  240, size:   68
    float   gFogStart;                  // Offset:  308, size:    4
    float   gFogRange;                  // Offset:  312, size:    4
    float4  gFogColor;                  // Offset:  320, size:   16
}

//
// 22 local object(s)
//
RasterizerState RasterizerDefault
{
};
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDefault
{
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendDefault
{
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerState SamplerPoint
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2D gTG1Map;
Texture2D gTG2Map;
Texture2D gTG3Map;
Texture2D gTG4Map;
Texture2D gShadowMap;
Texture2D gLightMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 DeferredDirectionalLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o1.x <- <VSDirectionalLight return value>.tex.x; o1.y <- <VSDirectionalLight return value>.tex.y; 
                //   o0.x <- <VSDirectionalLight return value>.positionHomogeneous.x; o0.y <- <VSDirectionalLight return value>.positionHomogeneous.y; o0.z <- <VSDirectionalLight return value>.positionHomogeneous.z; o0.w <- <VSDirectionalLight return value>.positionHomogeneous.w
                //
                #line 51 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[4].xyzw
                dp4 o0.y, r0.xyzw, cb0[5].xyzw
                dp4 o0.z, r0.xyzw, cb0[6].xyzw
                dp4 o0.w, r0.xyzw, cb0[7].xyzw
                
                #line 54
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // SamplerShadow                   sampler_c      NA          NA    1        1
                // gTG1Map                           texture  float4          2d    0        1
                // gTG2Map                           texture  float4          2d    1        1
                // gTG3Map                           texture  float4          2d    2        1
                // gTG4Map                           texture  float4          2d    3        1
                // gShadowMap                        texture  float4          2d    4        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o0.x <- <PSDirectionalLight return value>.x; o0.y <- <PSDirectionalLight return value>.y; o0.z <- <PSDirectionalLight return value>.z; o0.w <- <PSDirectionalLight return value>.w
                //
                #line 90 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s0  // r1.x <- depth.x; r1.y <- depth.y; r1.z <- depth.z
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t1.xyzw, s0  // r2.x <- normal.x; r2.y <- normal.y; r2.z <- normal.z; r2.w <- normal.w
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t3.xyzw, s0  // r3.x <- shadow.x; r3.y <- shadow.y; r3.z <- shadow.z; r3.w <- shadow.w
                add r1.xyz, -r1.xyzx, cb0[8].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 207 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                dp3 r0.w, r2.xyzx, -cb0[10].yzwy  // r0.w <- diffuseFactor
                lt r1.w, l(0.000000), r0.w
                mul r4.xyz, cb0[9].xyzx, cb0[10].xxxx
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r0.w, cb0[10].yzwy, r2.xyzx
                add r0.w, r0.w, r0.w
                mad r2.xyz, r2.xyzx, -r0.wwww, cb0[10].yzwy
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                dp3 r0.w, r1.xyzx, r2.xyzx  // r0.w <- specFactor
                lt r1.x, l(0.000000), r0.w
                
                #line 218
                max r1.y, r2.w, l(1.000000)
                log r0.w, |r0.w|
                mul r0.w, r0.w, r1.y
                exp r0.w, r0.w  // r0.w <- specFactor
                mul r2.xyz, r3.wwww, cb0[9].xyzx
                mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                and r1.xyz, r1.xxxx, r2.xyzx  // r1.x <- specularColor.x; r1.y <- specularColor.y; r1.z <- specularColor.z
                and r2.xyz, r1.wwww, r4.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                and r1.xyz, r1.xyzx, r1.wwww
                mad r2.xyz, cb0[9].xyzx, cb0[9].wwww, r2.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- <ComputeBaseLight return value>.x; r1.y <- <ComputeBaseLight return value>.y; r1.z <- <ComputeBaseLight return value>.z
                
                #line 247
                eq r0.w, cb0[11].x, l(1.000000)
                if_nz r0.w
                
                #line 178
                  add r2.xyzw, r3.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r2.xyxx, t4.xxxx, s1, r3.z  // r0.w <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  add r2.xyzw, r3.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  add r2.xyzw, r3.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  add r2.xyzw, r3.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t4.xxxx, s1, r3.z
                  add r0.w, r0.w, r1.w
                
                #line 182
                  mul r0.w, r0.w, l(0.111111)  // r0.w <- <CalcShadowFactor return value>
                
                #line 251
                  mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                endif 
                
                #line 107 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mul o0.xyz, r0.xyzx, r1.xyzx
                
                #line 110
                mov o0.w, l(1.000000)
                ret 
                // Approximately 60 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 DeferredPointLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o2.x <- <VSPointLight return value>.positionScreen.x; o2.y <- <VSPointLight return value>.positionScreen.y; o2.z <- <VSPointLight return value>.positionScreen.z; o2.w <- <VSPointLight return value>.positionScreen.w; 
                //   o1.x <- <VSPointLight return value>.positionWorld.x; o1.y <- <VSPointLight return value>.positionWorld.y; o1.z <- <VSPointLight return value>.positionWorld.z; 
                //   o0.x <- <VSPointLight return value>.positionHomogeneous.x; o0.y <- <VSPointLight return value>.positionHomogeneous.y; o0.z <- <VSPointLight return value>.positionHomogeneous.z; o0.w <- <VSPointLight return value>.positionHomogeneous.w
                //
                #line 60 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.positionHomogeneous.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.positionHomogeneous.w
                
                #line 64
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r1.xyzw
                
                #line 61
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 64
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gTG1Map                           texture  float4          2d    0        1
                // gTG2Map                           texture  float4          2d    1        1
                // gTG3Map                           texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xyzw        2     NONE   float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v2.xyw
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.positionScreen.x; v2.y <- input.positionScreen.y; v2.z <- input.positionScreen.z; v2.w <- input.positionScreen.w; 
                //   o0.x <- <PSPointLight return value>.x; o0.y <- <PSPointLight return value>.y; o0.z <- <PSPointLight return value>.z; o0.w <- <PSPointLight return value>.w
                //
                #line 116 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                div r0.xy, v2.xyxx, v2.wwww  // r0.x <- input.positionScreen.x; r0.y <- input.positionScreen.y
                
                #line 120
                mov r0.z, -r0.y
                add r0.xy, r0.xzxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r0.x <- tex.x; r0.y <- tex.y
                
                #line 123
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t2.xyzw, s0  // r1.x <- depth.x; r1.y <- depth.y; r1.z <- depth.z
                
                #line 126
                add r2.xyz, -r1.xyzx, cb0[8].xyzx
                
                #line 265 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r1.xyz, r1.xyzx, -cb0[13].yzwy  // r1.x <- lightDirection.x; r1.y <- lightDirection.y; r1.z <- lightDirection.z
                
                #line 126 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                dp3 r0.z, r2.xyzx, r2.xyzx
                rsq r0.z, r0.z
                mul r2.xyz, r0.zzzz, r2.xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 266 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                dp3 r0.z, r1.xyzx, r1.xyzx
                sqrt r0.z, r0.z  // r0.z <- distance
                div r1.xyz, r1.xyzx, r0.zzzz
                
                #line 124 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t1.xyzw, s0  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z; r3.w <- normal.w
                sample_indexable(texture2d)(float,float,float,float) r0.xyw, r0.xyxx, t0.xywz, s0  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.w <- diffuseColor.z
                
                #line 213 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                dp3 r1.w, r1.xyzx, r3.xyzx
                add r1.w, r1.w, r1.w
                mad r4.xyz, r3.xyzx, -r1.wwww, r1.xyzx
                
                #line 207
                dp3 r1.x, r3.xyzx, -r1.xyzx  // r1.x <- diffuseFactor
                
                #line 218
                max r1.y, r3.w, l(1.000000)
                
                #line 213
                dp3 r1.z, r4.xyzx, r4.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r4.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.z, r2.xyzx, r3.xyzx  // r1.z <- specFactor
                
                #line 218
                log r1.w, |r1.z|
                lt r1.z, l(0.000000), r1.z
                mul r1.y, r1.w, r1.y
                exp r1.y, r1.y  // r1.y <- specFactor
                mul r2.xyz, r1.yyyy, cb0[12].xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                and r1.yzw, r1.zzzz, r2.xxyz  // r1.y <- specularColor.x; r1.z <- specularColor.y; r1.w <- specularColor.z
                
                #line 209
                lt r2.x, l(0.000000), r1.x
                
                #line 221
                and r1.yzw, r1.yyzw, r2.xxxx
                
                #line 211
                mul r2.yzw, cb0[12].xxyz, cb0[13].xxxx
                mul r2.yzw, r1.xxxx, r2.yyzw  // r2.y <- diffuseColor.x; r2.z <- diffuseColor.y; r2.w <- diffuseColor.z
                
                #line 221
                and r2.xyz, r2.yzwy, r2.xxxx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                mad r2.xyz, cb0[12].xyzx, cb0[12].wwww, r2.xyzx
                add r1.xyz, r1.yzwy, r2.xyzx  // r1.x <- <ComputeBaseLight return value>.x; r1.y <- <ComputeBaseLight return value>.y; r1.z <- <ComputeBaseLight return value>.z
                
                #line 151
                div r1.w, r0.z, cb0[14].x  // r1.w <- f
                mad r1.w, -r1.w, r1.w, l(1.000000)  // r1.w <- denom
                
                #line 155
                div r0.z, r0.z, r1.w  // r0.z <- d
                lt r1.w, l(0.000000), r1.w
                
                #line 156
                add r0.z, r0.z, l(1.000000)  // r0.z <- dn
                mul r0.z, r0.z, r0.z
                div r0.z, cb0[13].x, r0.z  // r0.z <- <CalcSphericAttenuation return value>
                
                #line 163
                and r0.z, r0.z, r1.w
                
                #line 282
                mul r1.xyz, r0.zzzz, r1.xyzx  // r1.x <- <ComputePointLight return value>.x; r1.y <- <ComputePointLight return value>.y; r1.z <- <ComputePointLight return value>.z
                
                #line 136 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mul o0.xyz, r0.xywx, r1.xyzx
                
                #line 139
                mov o0.w, l(1.000000)
                ret 
                // Approximately 49 instruction slots used
                            
            };
        }

    }

    technique11 DeferredSpotLight
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   o2.x <- <VSSpotLight return value>.positionScreen.x; o2.y <- <VSSpotLight return value>.positionScreen.y; o2.z <- <VSSpotLight return value>.positionScreen.z; o2.w <- <VSSpotLight return value>.positionScreen.w; 
                //   o1.x <- <VSSpotLight return value>.positionWorld.x; o1.y <- <VSSpotLight return value>.positionWorld.y; o1.z <- <VSSpotLight return value>.positionWorld.z; 
                //   o0.x <- <VSSpotLight return value>.positionHomogeneous.x; o0.y <- <VSSpotLight return value>.positionHomogeneous.y; o0.z <- <VSSpotLight return value>.positionHomogeneous.z; o0.w <- <VSSpotLight return value>.positionHomogeneous.w
                //
                #line 70 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.positionHomogeneous.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.positionHomogeneous.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.positionHomogeneous.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.positionHomogeneous.w
                
                #line 74
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r1.xyzw
                
                #line 71
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 74
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gTG1Map                           texture  float4          2d    0        1
                // gTG2Map                           texture  float4          2d    1        1
                // gTG3Map                           texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xyzw        2     NONE   float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v2.xyw
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.positionScreen.x; v2.y <- input.positionScreen.y; v2.z <- input.positionScreen.z; v2.w <- input.positionScreen.w; 
                //   o0.x <- <PSSpotLight return value>.x; o0.y <- <PSSpotLight return value>.y; o0.z <- <PSSpotLight return value>.z; o0.w <- <PSSpotLight return value>.w
                //
                #line 145 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                div r0.xy, v2.xyxx, v2.wwww  // r0.x <- input.positionScreen.x; r0.y <- input.positionScreen.y
                
                #line 149
                mov r0.z, -r0.y
                add r0.xy, r0.xzxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r0.x <- tex.x; r0.y <- tex.y
                
                #line 152
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t2.xyzw, s0  // r1.x <- depth.x; r1.y <- depth.y; r1.z <- depth.z
                
                #line 155
                add r2.xyz, -r1.xyzx, cb0[8].xyzx
                
                #line 293 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r1.xyz, r1.xyzx, -cb0[16].yzwy  // r1.x <- lightDirection.x; r1.y <- lightDirection.y; r1.z <- lightDirection.z
                
                #line 155 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                dp3 r0.z, r2.xyzx, r2.xyzx
                rsq r0.z, r0.z
                mul r2.xyz, r0.zzzz, r2.xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t1.xyzw, s0  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z; r3.w <- normal.w
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0  // r0.x <- diffuseColor.x; r0.y <- diffuseColor.y; r0.z <- diffuseColor.z
                
                #line 213 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                dp3 r0.w, cb0[17].xyzx, r3.xyzx
                add r0.w, r0.w, r0.w
                mad r4.xyz, r3.xyzx, -r0.wwww, cb0[17].xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r0.w, r2.xyzx, r4.xyzx  // r0.w <- specFactor
                
                #line 218
                log r1.w, |r0.w|
                lt r0.w, l(0.000000), r0.w
                max r2.x, r3.w, l(1.000000)
                
                #line 207
                dp3 r2.y, r3.xyzx, -cb0[17].xyzx  // r2.y <- diffuseFactor
                
                #line 218
                mul r1.w, r1.w, r2.x
                exp r1.w, r1.w  // r1.w <- specFactor
                mul r2.xzw, r1.wwww, cb0[15].xxyz  // r2.x <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                and r2.xzw, r0.wwww, r2.xxzw
                
                #line 209
                lt r0.w, l(0.000000), r2.y
                
                #line 221
                and r2.xzw, r2.xxzw, r0.wwww
                
                #line 211
                mul r3.xyz, cb0[15].xyzx, cb0[16].xxxx
                mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                
                #line 221
                and r3.xyz, r0.wwww, r3.xyzx
                mad r3.xyz, cb0[15].xyzx, cb0[15].wwww, r3.xyzx
                add r2.xyz, r2.xzwx, r3.xyzx  // r2.x <- <ComputeBaseLight return value>.x; r2.y <- <ComputeBaseLight return value>.y; r2.z <- <ComputeBaseLight return value>.z
                
                #line 298
                dp3 r0.w, r1.xyzx, r1.xyzx
                
                #line 294
                dp3 r1.x, r1.xyzx, cb0[17].xyzx  // r1.x <- spot
                lt r1.x, cb0[17].w, r1.x
                sqrt r1.y, r0.w  // r1.y <- distance
                
                #line 301
                mad r1.y, cb0[18].y, r1.y, cb0[18].x
                mad r0.w, r0.w, cb0[18].z, r1.y  // r0.w <- attenuation
                
                #line 306
                max r0.w, r0.w, l(1.000000)
                
                #line 319
                div r1.yzw, r2.xxyz, r0.wwww  // r1.y <- <ComputeSpotLight return value>.x; r1.z <- <ComputeSpotLight return value>.y; r1.w <- <ComputeSpotLight return value>.z
                
                #line 324
                and r1.xyz, r1.yzwy, r1.xxxx  // r1.x <- <ComputeSpotLight return value>.x; r1.y <- <ComputeSpotLight return value>.y; r1.z <- <ComputeSpotLight return value>.z
                
                #line 165 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mul o0.xyz, r0.xyzx, r1.xyzx
                
                #line 168
                mov o0.w, l(1.000000)
                ret 
                // Approximately 46 instruction slots used
                            
            };
        }

    }

    technique11 DeferredCombineLights
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  312 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o1.x <- <VSCombineLights return value>.tex.x; o1.y <- <VSCombineLights return value>.tex.y; 
                //   o0.x <- <VSCombineLights return value>.position.x; o0.y <- <VSCombineLights return value>.position.y; o0.z <- <VSCombineLights return value>.position.z; o0.w <- <VSCombineLights return value>.position.w
                //
                #line 80 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[4].xyzw
                dp4 o0.y, r0.xyzw, cb0[5].xyzw
                dp4 o0.z, r0.xyzw, cb0[6].xyzw
                dp4 o0.w, r0.xyzw, cb0[7].xyzw
                
                #line 83
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  128 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  144
                //       float Ambient;                 // Offset:  156
                //       float Diffuse;                 // Offset:  160
                //       float3 Direction;              // Offset:  164
                //       float CastShadow;              // Offset:  176
                //       float Enabled;                 // Offset:  180
                //
                //   } gDirLight;                       // Offset:  144 Size:    40 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  192
                //       float Ambient;                 // Offset:  204
                //       float Diffuse;                 // Offset:  208
                //       float3 Position;               // Offset:  212
                //       float Radius;                  // Offset:  224
                //       float CastShadow;              // Offset:  228
                //       float Enabled;                 // Offset:  232
                //
                //   } gPointLight;                     // Offset:  192 Size:    44 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  240
                //       float Ambient;                 // Offset:  252
                //       float Diffuse;                 // Offset:  256
                //       float3 Position;               // Offset:  260
                //       float3 Direction;              // Offset:  272
                //       float Spot;                    // Offset:  284
                //       float AttenuationConstant;     // Offset:  288
                //       float AttenuationLinear;       // Offset:  292
                //       float AttenuationExp;          // Offset:  296
                //       float CastShadow;              // Offset:  300
                //       float Enabled;                 // Offset:  304
                //
                //   } gSpotLight;                      // Offset:  240 Size:    68 [unused]
                //   float gFogStart;                   // Offset:  308 Size:     4
                //   float gFogRange;                   // Offset:  312 Size:     4
                //   float4 gFogColor;                  // Offset:  320 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerPoint                      sampler      NA          NA    0        1
                // gTG3Map                           texture  float4          2d    2        1
                // gLightMap                         texture  float4          2d    5        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o0.x <- <PSCombineLights return value>.x; o0.y <- <PSCombineLights return value>.y; o0.z <- <PSCombineLights return value>.z; o0.w <- <PSCombineLights return value>.w
                //
                #line 172 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t2.xyzw, s0  // r0.x <- depth.x; r0.y <- depth.y; r0.z <- depth.z
                
                #line 177
                add r0.xyz, -r0.xyzx, cb0[8].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 186 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[19].y
                div_sat r0.x, r0.x, cb0[19].z  // r0.x <- fogLerp
                
                #line 173 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t5.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 188 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[20].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 175 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderDeferred.fx"
                lt r2.x, l(0.000000), cb0[19].z
                
                #line 181
                movc o0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw
                ret 
                // Approximately 12 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

}

