//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float   gMaximumAge;                // Offset:    0, size:    4
    float   gEmitterAge;                // Offset:    4, size:    4
    float   gTotalTime;                 // Offset:    8, size:    4
    float   gElapsedTime;               // Offset:   12, size:    4
    float3  gAccelerationWorld;         // Offset:   16, size:   12
    float3  gEyePositionWorld;          // Offset:   32, size:   12
    float4x4 gWorld;                    // Offset:   48, size:   64
    float4x4 gWorldViewProjection;      // Offset:  112, size:   64
    uint    gTextureCount;              // Offset:  176, size:    4
}

cbuffer cbFixed : register(b1)
{
    float2  gQuadTexC[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 21 local object(s)
//
RasterizerState RasterizerDefault
{
};
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDefault
{
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendDefault
{
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerState SamplerPoint
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2DArray gTextureArray;
Texture1D gTextureRandom;
GeometryShader gsStreamOutFire = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float gMaximumAge;                 // Offset:    0 Size:     4
        //   float gEmitterAge;                 // Offset:    4 Size:     4
        //   float gTotalTime;                  // Offset:    8 Size:     4
        //   float gElapsedTime;                // Offset:   12 Size:     4
        //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
        //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
        //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
        //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
        //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // SamplerLinear                     sampler      NA          NA    0        1
        // gTextureRandom                    texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[1], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 2
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 2
        //
        // Initial variable locations:
        //   m0 <- ptStream; 
        //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
        //   v[0][1].x <- input[0].velocityWorld.x; v[0][1].y <- input[0].velocityWorld.y; v[0][1].z <- input[0].velocityWorld.z; 
        //   v[0][2].x <- input[0].sizeWorld.x; v[0][2].y <- input[0].sizeWorld.y; v[0][2].z <- input[0].age; 
        //   v[0][3].x <- input[0].type
        //
        #line 52 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
        add r0.x, cb0[0].w, v[0][2].z  // r0.x <- input[0].age
        if_z v[0][3].x
          lt r0.y, cb0[0].y, r0.x
          if_nz r0.y
        
        #line 41
            sample_l_indexable(texture1d)(float,float,float,float) r0.yzw, cb0[0].z, t0.wxyz, s0, l(0.000000)  // r0.y <- <RandomVector3 return value>.x; r0.z <- <RandomVector3 return value>.y; r0.w <- <RandomVector3 return value>.z
        
        #line 58
            dp3 r1.x, r0.yzwy, r0.yzwy
            rsq r1.x, r1.x
            mul r0.yzw, r0.yyzw, r1.xxxx  // r0.y <- vRandom.x; r0.z <- vRandom.y; r0.w <- vRandom.z
        
        #line 64
            mul r0.yzw, r0.yyzw, v[0][2].xxxx
            mul r0.yzw, r0.yyzw, l(0.000000, 0.495000, 1.500000, 0.495000)  // r0.y <- p.velocityWorld.x; r0.z <- p.velocityWorld.y; r0.w <- p.velocityWorld.z
        
        #line 69
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, r0.yzwy
            mov o2.xy, v[0][2].xyxx
            mov o2.z, l(0)
            mov o3.x, l(1)
            emit_stream m0
        
        #line 72
            mov r0.x, l(0)
          endif 
          mov o0.xyz, v[0][0].xyzx
          mov o1.xyz, v[0][1].xyzx
          mov o2.xy, v[0][2].xyxx
          mov o2.z, r0.x
          mov o3.x, l(0)
          emit_stream m0
        else 
        
        #line 78
          ge r0.y, cb0[0].x, r0.x
          if_nz r0.y
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xy, v[0][2].xyxx
            mov o2.z, r0.x
            mov o3.x, v[0][3].x
            emit_stream m0
          endif 
        endif 
        ret 
        // Approximately 36 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;
GeometryShader gsStreamOutSmoke = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float gMaximumAge;                 // Offset:    0 Size:     4
        //   float gEmitterAge;                 // Offset:    4 Size:     4
        //   float gTotalTime;                  // Offset:    8 Size:     4
        //   float gElapsedTime;                // Offset:   12 Size:     4
        //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
        //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
        //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
        //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
        //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // SamplerLinear                     sampler      NA          NA    0        1
        // gTextureRandom                    texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[1], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 2
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 50
        //
        // Initial variable locations:
        //   m0 <- ptStream; 
        //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
        //   v[0][1].x <- input[0].velocityWorld.x; v[0][1].y <- input[0].velocityWorld.y; v[0][1].z <- input[0].velocityWorld.z; 
        //   v[0][2].x <- input[0].sizeWorld.x; v[0][2].y <- input[0].sizeWorld.y; v[0][2].z <- input[0].age; 
        //   v[0][3].x <- input[0].type
        //
        #line 87 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
        add r0.x, cb0[0].w, v[0][2].z  // r0.x <- input[0].age
        if_z v[0][3].x
          lt r0.y, cb0[0].y, r0.x
          if_nz r0.y
            mov r0.y, l(0)  // r0.y <- i
            loop 
              ige r0.z, r0.y, l(49)
              breakc_nz r0.z
              itof r0.z, r0.y
        
        #line 39
              mad r0.z, r0.z, l(0.020408), cb0[0].z  // r0.z <- u
              sample_l_indexable(texture1d)(float,float,float,float) r1.xyz, r0.z, t0.xyzw, s0, l(0.000000)  // r1.x <- <RandomVector3 return value>.x; r1.y <- <RandomVector3 return value>.y; r1.z <- <RandomVector3 return value>.z
        
        #line 95
              dp3 r0.z, r1.xyzx, r1.xyzx
              rsq r0.z, r0.z
              mul r1.xyz, r0.zzzz, r1.xyzx  // r1.x <- vRandom.x; r1.y <- vRandom.y; r1.z <- vRandom.z
        
        #line 101
              mul r1.xyz, r1.xyzx, v[0][2].xxxx
              mul r1.xyz, r1.xyzx, l(0.250000, 0.500000, 0.250000, 0.000000)  // r1.x <- p.velocityWorld.x; r1.y <- p.velocityWorld.y; r1.z <- p.velocityWorld.z
        
        #line 106
              mov o0.xyz, v[0][0].xyzx
              mov o1.xyz, r1.xyzx
              mov o2.xy, v[0][2].xyxx
              mov o2.z, l(0)
              mov o3.x, l(1)
              emit_stream m0
              iadd r0.y, r0.y, l(1)
            endloop 
        
        #line 110
            mov r0.x, l(0)
          endif 
          mov o0.xyz, v[0][0].xyzx
          mov o1.xyz, v[0][1].xyzx
          mov o2.xy, v[0][2].xyxx
          mov o2.z, r0.x
          mov o3.x, l(0)
          emit_stream m0
        else 
        
        #line 116
          ge r0.y, cb0[0].x, r0.x
          if_nz r0.y
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xy, v[0][2].xyxx
            mov o2.z, r0.x
            mov o3.x, v[0][3].x
            emit_stream m0
          endif 
        endif 
        ret 
        // Approximately 44 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;
GeometryShader gsStreamOutRain = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float gMaximumAge;                 // Offset:    0 Size:     4
        //   float gEmitterAge;                 // Offset:    4 Size:     4
        //   float gTotalTime;                  // Offset:    8 Size:     4
        //   float gElapsedTime;                // Offset:   12 Size:     4
        //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
        //   float3 gEyePositionWorld;          // Offset:   32 Size:    12
        //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
        //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
        //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // SamplerLinear                     sampler      NA          NA    0        1
        // gTextureRandom                    texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[3], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 2
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 6
        //
        // Initial variable locations:
        //   m0 <- ptStream; 
        //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
        //   v[0][1].x <- input[0].velocityWorld.x; v[0][1].y <- input[0].velocityWorld.y; v[0][1].z <- input[0].velocityWorld.z; 
        //   v[0][2].x <- input[0].sizeWorld.x; v[0][2].y <- input[0].sizeWorld.y; v[0][2].z <- input[0].age; 
        //   v[0][3].x <- input[0].type
        //
        #line 125 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
        add r0.x, cb0[0].w, v[0][2].z  // r0.x <- input[0].age
        if_z v[0][3].x
          lt r0.y, cb0[0].y, r0.x
          if_nz r0.y
        
        #line 134
            mad r0.y, -cb0[1].y, cb0[0].x, cb0[2].y
            mul r1.y, r0.y, l(0.500000)  // r1.y <- vRandom.y
        
        #line 131
            mov r0.y, l(0)  // r0.y <- i
            loop 
              ige r0.z, r0.y, l(5)
              breakc_nz r0.z
              itof r0.z, r0.y
        
        #line 39
              mad r0.z, r0.z, l(0.200000), cb0[0].z  // r0.z <- u
              sample_l_indexable(texture1d)(float,float,float,float) r0.zw, r0.z, t0.ywxz, s0, l(0.000000)  // r0.z <- <RandomVector3 return value>.x; r0.w <- <RandomVector3 return value>.z
        
        #line 133
              mul r1.xz, r0.zzwz, l(35.000000, 0.000000, 35.000000, 0.000000)  // r1.x <- vRandom.x; r1.z <- vRandom.z
        
        #line 137
              add r1.xzw, r1.xxyz, cb0[2].xxyz  // r1.x <- p.positionWorld.x; r1.z <- p.positionWorld.y; r1.w <- p.positionWorld.z
        
        #line 143
              mov o0.xyz, r1.xzwx
              mov o1.xyz, cb0[1].xyzx
              mov o2.xy, v[0][2].xyxx
              mov o2.z, l(0)
              mov o3.x, l(1)
              emit_stream m0
              iadd r0.y, r0.y, l(1)
            endloop 
        
        #line 147
            mov r0.x, l(0)
          endif 
          mov o0.xyz, v[0][0].xyzx
          mov o1.xyz, v[0][1].xyzx
          mov o2.xy, v[0][2].xyxx
          mov o2.z, r0.x
          mov o3.x, l(0)
          emit_stream m0
        else 
        
        #line 153
          ge r0.y, cb0[0].x, r0.x
          if_nz r0.y
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xy, v[0][2].xyxx
            mov o2.z, r0.x
            mov o3.x, v[0][3].x
            emit_stream m0
          endif 
        endif 
        ret 
        // Approximately 43 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 7 technique(s)
    //
    technique11 FireStreamOut
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0     z         2     NONE   float     z 
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o3.x <- <VSStreamOut return value>.type; 
                //   o2.x <- <VSStreamOut return value>.sizeWorld.x; o2.y <- <VSStreamOut return value>.sizeWorld.y; o2.z <- <VSStreamOut return value>.age; 
                //   o1.x <- <VSStreamOut return value>.velocityWorld.x; o1.y <- <VSStreamOut return value>.velocityWorld.y; o1.z <- <VSStreamOut return value>.velocityWorld.z; 
                //   o0.x <- <VSStreamOut return value>.positionWorld.x; o0.y <- <VSStreamOut return value>.positionWorld.y; o0.z <- <VSStreamOut return value>.positionWorld.z
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xyz, v1.xyzx
                mov o2.xy, v2.xyxx
                mov o2.z, v3.x
                mov o3.x, v4.x
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = gsStreamOutFire;
            PixelShader = NULL;
            RasterizerState = RasterizerSolid;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilDisableDepth;
        }

    }

    technique11 SmokeStreamOut
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0     z         2     NONE   float     z 
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o3.x <- <VSStreamOut return value>.type; 
                //   o2.x <- <VSStreamOut return value>.sizeWorld.x; o2.y <- <VSStreamOut return value>.sizeWorld.y; o2.z <- <VSStreamOut return value>.age; 
                //   o1.x <- <VSStreamOut return value>.velocityWorld.x; o1.y <- <VSStreamOut return value>.velocityWorld.y; o1.z <- <VSStreamOut return value>.velocityWorld.z; 
                //   o0.x <- <VSStreamOut return value>.positionWorld.x; o0.y <- <VSStreamOut return value>.positionWorld.y; o0.z <- <VSStreamOut return value>.positionWorld.z
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xyz, v1.xyzx
                mov o2.xy, v2.xyxx
                mov o2.z, v3.x
                mov o3.x, v4.x
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = gsStreamOutSmoke;
            PixelShader = NULL;
            RasterizerState = RasterizerSolid;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilDisableDepth;
        }

    }

    technique11 RainStreamOut
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0     z         2     NONE   float     z 
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o3.x <- <VSStreamOut return value>.type; 
                //   o2.x <- <VSStreamOut return value>.sizeWorld.x; o2.y <- <VSStreamOut return value>.sizeWorld.y; o2.z <- <VSStreamOut return value>.age; 
                //   o1.x <- <VSStreamOut return value>.velocityWorld.x; o1.y <- <VSStreamOut return value>.velocityWorld.y; o1.z <- <VSStreamOut return value>.velocityWorld.z; 
                //   o0.x <- <VSStreamOut return value>.positionWorld.x; o0.y <- <VSStreamOut return value>.positionWorld.y; o0.z <- <VSStreamOut return value>.positionWorld.z
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xyz, v1.xyzx
                mov o2.xy, v2.xyxx
                mov o2.z, v3.x
                mov o3.x, v4.x
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = gsStreamOutRain;
            PixelShader = NULL;
            RasterizerState = RasterizerSolid;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilDisableDepth;
        }

    }

    technique11 SolidDraw
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o3.x <- <VSDrawSolid return value>.type; 
                //   o2.x <- <VSDrawSolid return value>.color.x; o2.y <- <VSDrawSolid return value>.color.y; o2.z <- <VSDrawSolid return value>.color.z; o2.w <- <VSDrawSolid return value>.color.w; 
                //   o1.x <- <VSDrawSolid return value>.sizeWorld.x; o1.y <- <VSDrawSolid return value>.sizeWorld.y; 
                //   o0.x <- <VSDrawSolid return value>.positionWorld.x; o0.y <- <VSDrawSolid return value>.positionWorld.y; o0.z <- <VSDrawSolid return value>.positionWorld.z
                //
                #line 165 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mul r0.x, v3.x, v3.x
                mul r0.x, r0.x, l(0.500000)
                mul r0.yzw, v1.xxyz, v3.xxxx
                mad r0.xyz, r0.xxxx, cb0[1].xyzx, r0.yzwy
                add r0.xyz, r0.xyzx, v0.xyzx  // r0.x <- pos.x; r0.y <- pos.y; r0.z <- pos.z
                
                #line 168
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[3].xyzw
                dp4 o0.y, r0.xyzw, cb0[4].xyzw
                dp4 o0.z, r0.xyzw, cb0[5].xyzw
                
                #line 173
                mov o1.xy, v2.xyxx
                
                #line 163
                mov_sat r0.x, v3.x
                mad r0.y, r0.x, l(-2.000000), l(3.000000)
                mul r0.x, r0.x, r0.x
                mad o2.w, -r0.y, r0.x, l(1.000000)
                
                #line 173
                mov o2.xyz, l(1.000000,1.000000,1.000000,0)
                mov o3.x, v4.x
                ret 
                // Approximately 17 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TYPE                     0   x           3     NONE    uint   x   
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_PrimitiveID           0   x           3   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input v[1][2].xyzw
                dcl_input v[1][3].x
                dcl_input vPrim
                dcl_temps 6
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_output_sgv o3.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- triStream; 
                //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y; 
                //   v[0][2].x <- input[0].color.x; v[0][2].y <- input[0].color.y; v[0][2].z <- input[0].color.z; v[0][2].w <- input[0].color.w; 
                //   v[0][3].x <- input[0].type
                //
                #line 191 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                if_nz v[0][3].x
                  add r0.xyz, cb0[2].zxyz, -v[0][0].zxyz
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- look.z; r0.y <- look.x; r0.z <- look.y
                  mul r1.xyz, r0.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
                  mad r1.xyz, r0.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000), -r1.xyzx
                  dp2 r0.w, r1.xzxx, r1.xzxx
                  rsq r0.w, r0.w
                  mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- right.x; r1.y <- right.y; r1.z <- right.z
                  mul r2.xyz, r0.xyzx, r1.yzxy
                  mad r0.xyz, r0.zxyz, r1.zxyz, -r2.xyzx  // r0.x <- up.x; r0.y <- up.y; r0.z <- up.z
                
                #line 198
                  mul r2.xy, l(0.500000, 0.500000, 0.000000, 0.000000), v[0][1].xyxx  // r2.x <- halfWidth; r2.y <- halfHeight
                
                #line 201
                  mad r3.xyz, r2.xxxx, r1.xyzx, v[0][0].xyzx
                  mad r4.xyz, -r2.yyyy, r0.xyzx, r3.xyzx
                  mad r3.xyz, r2.yyyy, r0.xyzx, r3.xyzx
                  mad r1.xyz, -r2.xxxx, r1.xyzx, v[0][0].xyzx
                  mad r5.xyz, -r2.yyyy, r0.xyzx, r1.xyzx
                  mad r0.xyz, r2.yyyy, r0.xyzx, r1.xyzx
                
                #line 210
                  mad r4.y, v[0][1].y, l(0.500000), r4.y
                  mov r4.w, l(1.000000)
                  dp4 r1.x, r4.xyzw, cb0[7].xyzw  // r1.x <- output.positionHomogeneous.x
                  dp4 r1.y, r4.xyzw, cb0[8].xyzw  // r1.y <- output.positionHomogeneous.y
                  dp4 r1.z, r4.xyzw, cb0[9].xyzw  // r1.z <- output.positionHomogeneous.z
                  dp4 r1.w, r4.xyzw, cb0[10].xyzw  // r1.w <- output.positionHomogeneous.w
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[0].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 210
                  mad r3.y, v[0][1].y, l(0.500000), r3.y
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[7].xyzw
                  dp4 r1.y, r3.xyzw, cb0[8].xyzw
                  dp4 r1.z, r3.xyzw, cb0[9].xyzw
                  dp4 r1.w, r3.xyzw, cb0[10].xyzw
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[1].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 210
                  mad r5.y, v[0][1].y, l(0.500000), r5.y
                  mov r5.w, l(1.000000)
                  dp4 r1.x, r5.xyzw, cb0[7].xyzw
                  dp4 r1.y, r5.xyzw, cb0[8].xyzw
                  dp4 r1.z, r5.xyzw, cb0[9].xyzw
                  dp4 r1.w, r5.xyzw, cb0[10].xyzw
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[2].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 210
                  mad r0.y, v[0][1].y, l(0.500000), r0.y
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[7].xyzw
                  dp4 r1.y, r0.xyzw, cb0[8].xyzw
                  dp4 r1.z, r0.xyzw, cb0[9].xyzw
                  dp4 r0.x, r0.xyzw, cb0[10].xyzw  // r0.x <- output.positionHomogeneous.w
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.x
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[3].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 77 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_PrimitiveID           0   x           3   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_input_ps_sgv v3.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.primitiveID; 
                //   o0.x <- <PSDrawSolid return value>.x; o0.y <- <PSDrawSolid return value>.y; o0.z <- <PSDrawSolid return value>.z; o0.w <- <PSDrawSolid return value>.w
                //
                #line 245 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                udiv null, r0.x, v3.x, cb0[11].x
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v2.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v1.xyzw
                ret 
                // Approximately 6 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = BlendAdditive;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilEnableDepth;
        }

    }

    technique11 LineDraw
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float       
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TYPE                     0   x           1     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o1.x <- <VSDrawLine return value>.type; 
                //   o0.x <- <VSDrawLine return value>.positionWorld.x; o0.y <- <VSDrawLine return value>.positionWorld.y; o0.z <- <VSDrawLine return value>.positionWorld.z
                //
                #line 179 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mul r0.x, v3.x, v3.x
                mul r0.x, r0.x, l(0.500000)
                mul r0.yzw, v1.xxyz, v3.xxxx
                mad r0.xyz, r0.xxxx, cb0[1].xyzx, r0.yzwy
                add r0.xyz, r0.xyzx, v0.xyzx  // r0.x <- pos.x; r0.y <- pos.y; r0.z <- pos.z
                
                #line 182
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[3].xyzw
                dp4 o0.y, r0.xyzw, cb0[4].xyzw
                dp4 o0.z, r0.xyzw, cb0[5].xyzw
                
                #line 185
                mov o1.x, v4.x
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TYPE                     0   x           1     NONE    uint   x   
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0   x           2   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].x
                dcl_input vPrim
                dcl_temps 3
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology linestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output_sgv o2.x, primitive_id
                dcl_maxout 2
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- lineStream; 
                //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
                //   v[0][1].x <- input[0].type
                //
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                if_nz v[0][1].x
                
                #line 227
                  mad r0.xyz, cb0[1].xyzx, l(0.070000, 0.070000, 0.070000, 0.000000), v[0][0].xyzx  // r0.x <- p1.x; r0.y <- p1.y; r0.z <- p1.z
                
                #line 230
                  mov r1.xyz, v[0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[7].xyzw  // r2.x <- v0.positionHomogeneous.x
                  dp4 r2.y, r1.xyzw, cb0[8].xyzw  // r2.y <- v0.positionHomogeneous.y
                  dp4 r2.z, r1.xyzw, cb0[9].xyzw  // r2.z <- v0.positionHomogeneous.z
                  dp4 r1.x, r1.xyzw, cb0[10].xyzw  // r1.x <- v0.positionHomogeneous.w
                
                #line 233
                  mov o0.x, r2.x
                  mov o0.y, r2.y
                  mov o0.z, r2.z
                  mov o0.w, r1.x
                  mov o1.xy, l(0,0,0,0)
                  mov o2.x, vPrim
                  emit_stream m0
                
                #line 236
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[7].xyzw  // r1.x <- v1.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[8].xyzw  // r1.y <- v1.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[9].xyzw  // r1.z <- v1.positionHomogeneous.z
                  dp4 r0.x, r0.xyzw, cb0[10].xyzw  // r0.x <- v1.positionHomogeneous.w
                
                #line 239
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.x
                  mov o1.xy, l(1.000000,1.000000,0,0)
                  mov o2.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 29 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0   x           2   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps_sgv v2.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.primitiveID; 
                //   o0.x <- <PSDrawLine return value>.x; o0.y <- <PSDrawLine return value>.y; o0.z <- <PSDrawLine return value>.z; o0.w <- <PSDrawLine return value>.w
                //
                #line 251 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                udiv null, r0.x, v2.x, cb0[11].x
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v1.xyxx
                sample_indexable(texture2darray)(float,float,float,float) o0.xyzw, r0.xyzx, t0.xyzw, s0
                ret 
                // Approximately 5 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilEnableDepth;
        }

    }

    technique11 DeferredSolidDraw
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o3.x <- <VSDrawSolid return value>.type; 
                //   o2.x <- <VSDrawSolid return value>.color.x; o2.y <- <VSDrawSolid return value>.color.y; o2.z <- <VSDrawSolid return value>.color.z; o2.w <- <VSDrawSolid return value>.color.w; 
                //   o1.x <- <VSDrawSolid return value>.sizeWorld.x; o1.y <- <VSDrawSolid return value>.sizeWorld.y; 
                //   o0.x <- <VSDrawSolid return value>.positionWorld.x; o0.y <- <VSDrawSolid return value>.positionWorld.y; o0.z <- <VSDrawSolid return value>.positionWorld.z
                //
                #line 165 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mul r0.x, v3.x, v3.x
                mul r0.x, r0.x, l(0.500000)
                mul r0.yzw, v1.xxyz, v3.xxxx
                mad r0.xyz, r0.xxxx, cb0[1].xyzx, r0.yzwy
                add r0.xyz, r0.xyzx, v0.xyzx  // r0.x <- pos.x; r0.y <- pos.y; r0.z <- pos.z
                
                #line 168
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[3].xyzw
                dp4 o0.y, r0.xyzw, cb0[4].xyzw
                dp4 o0.z, r0.xyzw, cb0[5].xyzw
                
                #line 173
                mov o1.xy, v2.xyxx
                
                #line 163
                mov_sat r0.x, v3.x
                mad r0.y, r0.x, l(-2.000000), l(3.000000)
                mul r0.x, r0.x, r0.x
                mad o2.w, -r0.y, r0.x, l(1.000000)
                
                #line 173
                mov o2.xyz, l(1.000000,1.000000,1.000000,0)
                mov o3.x, v4.x
                ret 
                // Approximately 17 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TYPE                     0   x           3     NONE    uint   x   
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_PrimitiveID           0   x           3   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input v[1][2].xyzw
                dcl_input v[1][3].x
                dcl_input vPrim
                dcl_temps 6
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_output_sgv o3.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- triStream; 
                //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y; 
                //   v[0][2].x <- input[0].color.x; v[0][2].y <- input[0].color.y; v[0][2].z <- input[0].color.z; v[0][2].w <- input[0].color.w; 
                //   v[0][3].x <- input[0].type
                //
                #line 191 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                if_nz v[0][3].x
                  add r0.xyz, cb0[2].zxyz, -v[0][0].zxyz
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- look.z; r0.y <- look.x; r0.z <- look.y
                  mul r1.xyz, r0.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
                  mad r1.xyz, r0.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000), -r1.xyzx
                  dp2 r0.w, r1.xzxx, r1.xzxx
                  rsq r0.w, r0.w
                  mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- right.x; r1.y <- right.y; r1.z <- right.z
                  mul r2.xyz, r0.xyzx, r1.yzxy
                  mad r0.xyz, r0.zxyz, r1.zxyz, -r2.xyzx  // r0.x <- up.x; r0.y <- up.y; r0.z <- up.z
                
                #line 198
                  mul r2.xy, l(0.500000, 0.500000, 0.000000, 0.000000), v[0][1].xyxx  // r2.x <- halfWidth; r2.y <- halfHeight
                
                #line 201
                  mad r3.xyz, r2.xxxx, r1.xyzx, v[0][0].xyzx
                  mad r4.xyz, -r2.yyyy, r0.xyzx, r3.xyzx
                  mad r3.xyz, r2.yyyy, r0.xyzx, r3.xyzx
                  mad r1.xyz, -r2.xxxx, r1.xyzx, v[0][0].xyzx
                  mad r5.xyz, -r2.yyyy, r0.xyzx, r1.xyzx
                  mad r0.xyz, r2.yyyy, r0.xyzx, r1.xyzx
                
                #line 210
                  mad r4.y, v[0][1].y, l(0.500000), r4.y
                  mov r4.w, l(1.000000)
                  dp4 r1.x, r4.xyzw, cb0[7].xyzw  // r1.x <- output.positionHomogeneous.x
                  dp4 r1.y, r4.xyzw, cb0[8].xyzw  // r1.y <- output.positionHomogeneous.y
                  dp4 r1.z, r4.xyzw, cb0[9].xyzw  // r1.z <- output.positionHomogeneous.z
                  dp4 r1.w, r4.xyzw, cb0[10].xyzw  // r1.w <- output.positionHomogeneous.w
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[0].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 210
                  mad r3.y, v[0][1].y, l(0.500000), r3.y
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[7].xyzw
                  dp4 r1.y, r3.xyzw, cb0[8].xyzw
                  dp4 r1.z, r3.xyzw, cb0[9].xyzw
                  dp4 r1.w, r3.xyzw, cb0[10].xyzw
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[1].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 210
                  mad r5.y, v[0][1].y, l(0.500000), r5.y
                  mov r5.w, l(1.000000)
                  dp4 r1.x, r5.xyzw, cb0[7].xyzw
                  dp4 r1.y, r5.xyzw, cb0[8].xyzw
                  dp4 r1.z, r5.xyzw, cb0[9].xyzw
                  dp4 r1.w, r5.xyzw, cb0[10].xyzw
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[2].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 210
                  mad r0.y, v[0][1].y, l(0.500000), r0.y
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[7].xyzw
                  dp4 r1.y, r0.xyzw, cb0[8].xyzw
                  dp4 r1.z, r0.xyzw, cb0[9].xyzw
                  dp4 r0.x, r0.xyzw, cb0[10].xyzw  // r0.x <- output.positionHomogeneous.w
                
                #line 217
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.x
                  mov o1.xyzw, v[0][2].xyzw
                  mov o2.xy, cb1[3].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 77 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_PrimitiveID           0   x           3   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.xyzw, position
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_input_ps_sgv v3.x, primitive_id
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.primitiveID; 
                //   o3.x <- <PSDeferredDrawSolid return value>.shadow.x; o3.y <- <PSDeferredDrawSolid return value>.shadow.y; o3.z <- <PSDeferredDrawSolid return value>.shadow.z; o3.w <- <PSDeferredDrawSolid return value>.shadow.w; 
                //   o2.x <- <PSDeferredDrawSolid return value>.depth.x; o2.y <- <PSDeferredDrawSolid return value>.depth.y; o2.z <- <PSDeferredDrawSolid return value>.depth.z; o2.w <- <PSDeferredDrawSolid return value>.depth.w; 
                //   o1.x <- <PSDeferredDrawSolid return value>.normal.x; o1.y <- <PSDeferredDrawSolid return value>.normal.y; o1.z <- <PSDeferredDrawSolid return value>.normal.z; o1.w <- <PSDeferredDrawSolid return value>.normal.w; 
                //   o0.x <- <PSDeferredDrawSolid return value>.color.x; o0.y <- <PSDeferredDrawSolid return value>.color.y; o0.z <- <PSDeferredDrawSolid return value>.color.z; o0.w <- <PSDeferredDrawSolid return value>.color.w
                //
                #line 260 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                udiv null, r0.x, v3.x, cb0[11].x
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v2.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v1.xyzw
                
                #line 269
                mov o1.xyzw, l(0,0,0,0)
                
                #line 266
                div o2.w, v0.z, v0.w
                
                #line 269
                mov o2.xyz, v0.xyzx
                mov o3.xyzw, l(0,0,0,0)
                ret 
                // Approximately 10 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = BlendAdditive;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilEnableDepth;
        }

    }

    technique11 DeferredLineDraw
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float       
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TYPE                     0   x           1     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[6], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.x
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.velocityWorld.x; v1.y <- input.velocityWorld.y; v1.z <- input.velocityWorld.z; 
                //   v2.x <- input.sizeWorld.x; v2.y <- input.sizeWorld.y; 
                //   v3.x <- input.age; 
                //   v4.x <- input.type; 
                //   o1.x <- <VSDrawLine return value>.type; 
                //   o0.x <- <VSDrawLine return value>.positionWorld.x; o0.y <- <VSDrawLine return value>.positionWorld.y; o0.z <- <VSDrawLine return value>.positionWorld.z
                //
                #line 179 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                mul r0.x, v3.x, v3.x
                mul r0.x, r0.x, l(0.500000)
                mul r0.yzw, v1.xxyz, v3.xxxx
                mad r0.xyz, r0.xxxx, cb0[1].xyzx, r0.yzwy
                add r0.xyz, r0.xyzx, v0.xyzx  // r0.x <- pos.x; r0.y <- pos.y; r0.z <- pos.z
                
                #line 182
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[3].xyzw
                dp4 o0.y, r0.xyzw, cb0[4].xyzw
                dp4 o0.z, r0.xyzw, cb0[5].xyzw
                
                #line 185
                mov o1.x, v4.x
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64
                //   uint gTextureCount;                // Offset:  176 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TYPE                     0   x           1     NONE    uint   x   
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0   x           2   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].x
                dcl_input vPrim
                dcl_temps 3
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology linestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output_sgv o2.x, primitive_id
                dcl_maxout 2
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- lineStream; 
                //   v[0][0].x <- input[0].positionWorld.x; v[0][0].y <- input[0].positionWorld.y; v[0][0].z <- input[0].positionWorld.z; 
                //   v[0][1].x <- input[0].type
                //
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                if_nz v[0][1].x
                
                #line 227
                  mad r0.xyz, cb0[1].xyzx, l(0.070000, 0.070000, 0.070000, 0.000000), v[0][0].xyzx  // r0.x <- p1.x; r0.y <- p1.y; r0.z <- p1.z
                
                #line 230
                  mov r1.xyz, v[0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[7].xyzw  // r2.x <- v0.positionHomogeneous.x
                  dp4 r2.y, r1.xyzw, cb0[8].xyzw  // r2.y <- v0.positionHomogeneous.y
                  dp4 r2.z, r1.xyzw, cb0[9].xyzw  // r2.z <- v0.positionHomogeneous.z
                  dp4 r1.x, r1.xyzw, cb0[10].xyzw  // r1.x <- v0.positionHomogeneous.w
                
                #line 233
                  mov o0.x, r2.x
                  mov o0.y, r2.y
                  mov o0.z, r2.z
                  mov o0.w, r1.x
                  mov o1.xy, l(0,0,0,0)
                  mov o2.x, vPrim
                  emit_stream m0
                
                #line 236
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[7].xyzw  // r1.x <- v1.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[8].xyzw  // r1.y <- v1.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[9].xyzw  // r1.z <- v1.positionHomogeneous.z
                  dp4 r0.x, r0.xyzw, cb0[10].xyzw  // r0.x <- v1.positionHomogeneous.w
                
                #line 239
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.x
                  mov o1.xy, l(1.000000,1.000000,0,0)
                  mov o2.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 29 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gMaximumAge;                 // Offset:    0 Size:     4 [unused]
                //   float gEmitterAge;                 // Offset:    4 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:    8 Size:     4 [unused]
                //   float gElapsedTime;                // Offset:   12 Size:     4 [unused]
                //   float3 gAccelerationWorld;         // Offset:   16 Size:    12 [unused]
                //   float3 gEyePositionWorld;          // Offset:   32 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   48 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  112 Size:    64 [unused]
                //   uint gTextureCount;                // Offset:  176 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0   x           2   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.xyzw, position
                dcl_input_ps linear v1.xy
                dcl_input_ps_sgv v2.x, primitive_id
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.primitiveID; 
                //   o3.x <- <PSDeferredDrawLine return value>.shadow.x; o3.y <- <PSDeferredDrawLine return value>.shadow.y; o3.z <- <PSDeferredDrawLine return value>.shadow.z; o3.w <- <PSDeferredDrawLine return value>.shadow.w; 
                //   o2.x <- <PSDeferredDrawLine return value>.depth.x; o2.y <- <PSDeferredDrawLine return value>.depth.y; o2.z <- <PSDeferredDrawLine return value>.depth.z; o2.w <- <PSDeferredDrawLine return value>.depth.w; 
                //   o1.x <- <PSDeferredDrawLine return value>.normal.x; o1.y <- <PSDeferredDrawLine return value>.normal.y; o1.z <- <PSDeferredDrawLine return value>.normal.z; o1.w <- <PSDeferredDrawLine return value>.normal.w; 
                //   o0.x <- <PSDeferredDrawLine return value>.color.x; o0.y <- <PSDeferredDrawLine return value>.color.y; o0.z <- <PSDeferredDrawLine return value>.color.z; o0.w <- <PSDeferredDrawLine return value>.color.w
                //
                #line 275 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderParticles.fx"
                udiv null, r0.x, v2.x, cb0[11].x
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v1.xyxx
                sample_indexable(texture2darray)(float,float,float,float) o0.xyzw, r0.xyzx, t0.xyzw, s0
                
                #line 284
                mov o1.xyzw, l(0,0,0,0)
                
                #line 281
                div o2.w, v0.z, v0.w
                
                #line 284
                mov o2.xyz, v0.xyzx
                mov o3.xyzw, l(0,0,0,0)
                ret 
                // Approximately 9 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
            DS_StencilRef = uint(0);
            DepthStencilState = StencilEnableDepth;
        }

    }

}

