//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorldViewProjection;      // Offset:    0, size:   64
    float4x4 gShadowTransform;          // Offset:   64, size:   64
    DirectionalLight gDirLights[3];     // Offset:  128, size:  192
    PointLight gPointLight;             // Offset:  320, size:   80
    SpotLight gSpotLight;               // Offset:  400, size:   96
    float3  gEyePositionWorld;          // Offset:  496, size:   12
    float   gFogStart;                  // Offset:  508, size:    4
    float   gFogRange;                  // Offset:  512, size:    4
    float4  gFogColor;                  // Offset:  528, size:   16
    float   gEnableShadows;             // Offset:  544, size:    4
    float   gRadius;                    // Offset:  548, size:    4
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   68
    uint    gTextureCount;              // Offset:   68, size:    4
}

cbuffer cbFixed : register(b2)
{
    float2  gQuadTexC[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 14 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2DArray gTextureArray;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 ForwardBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  128
                //       float4 Diffuse;                // Offset:  144
                //       float4 Specular;               // Offset:  160
                //       float3 Direction;              // Offset:  176
                //       float Padding;                 // Offset:  188
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float3 Position;               // Offset:  368
                //       float Range;                   // Offset:  380
                //       float3 Attenuation;            // Offset:  384
                //       float Padding;                 // Offset:  396
                //
                //   } gPointLight;                     // Offset:  320 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  400
                //       float4 Diffuse;                // Offset:  416
                //       float4 Specular;               // Offset:  432
                //       float3 Position;               // Offset:  448
                //       float Range;                   // Offset:  460
                //       float3 Direction;              // Offset:  464
                //       float Spot;                    // Offset:  476
                //       float3 Attenuation;            // Offset:  480
                //       float Padding;                 // Offset:  492
                //
                //   } gSpotLight;                      // Offset:  400 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  496 Size:    12
                //   float gFogStart;                   // Offset:  508 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  512 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  528 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  544 Size:     4 [unused]
                //   float gRadius;                     // Offset:  548 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[35], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 7
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_output_sgv o5.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y
                //
                #line 52 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[31].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[34].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[34].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 57
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yw, r0.xxxz, r1.xxxx  // r1.y <- look.x; r1.w <- look.z
                  mov r1.z, l(0)  // r1.z <- look.y
                  mul r0.xy, r1.wyww, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xwyx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 65
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r2.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r2.xyzx  // r3.x <- gout.positionWorld.x; r3.y <- gout.positionWorld.y; r3.z <- gout.positionWorld.z
                  mad r2.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r2.xyzx  // r2.x <- gout.positionWorld.x; r2.y <- gout.positionWorld.y; r2.z <- gout.positionWorld.z
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r4.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r4.x <- gout.positionWorld.x; r4.y <- gout.positionWorld.y; r4.z <- gout.positionWorld.z
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r0.x <- gout.positionWorld.x; r0.y <- gout.positionWorld.y; r0.z <- gout.positionWorld.z
                
                #line 75
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r5.x, r3.xyzw, cb0[1].xyzw  // r5.x <- gout.positionHomogeneous.y
                  dp4 r5.y, r3.xyzw, cb0[2].xyzw  // r5.y <- gout.positionHomogeneous.z
                  dp4 r5.z, r3.xyzw, cb0[3].xyzw  // r5.z <- gout.positionHomogeneous.w
                  dp4 r5.w, r3.xyzw, cb0[4].xyzw  // r5.w <- gout.shadowHomogeneous.x
                  dp4 r6.x, r3.xyzw, cb0[5].xyzw  // r6.x <- gout.shadowHomogeneous.y
                  dp4 r6.y, r3.xyzw, cb0[6].xyzw  // r6.y <- gout.shadowHomogeneous.z
                  dp4 r3.w, r3.xyzw, cb0[7].xyzw  // r3.w <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r5.x
                  mov o0.z, r5.y
                  mov o0.w, r5.z
                  mov o1.xyz, r3.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[0].xyxx
                  mov o4.x, r5.w
                  mov o4.y, r6.x
                  mov o4.z, r6.y
                  mov o4.w, r3.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 75
                  mov r2.w, l(1.000000)
                  dp4 r1.x, r2.xyzw, cb0[0].xyzw
                  dp4 r3.x, r2.xyzw, cb0[1].xyzw  // r3.x <- gout.positionHomogeneous.y
                  dp4 r3.y, r2.xyzw, cb0[2].xyzw  // r3.y <- gout.positionHomogeneous.z
                  dp4 r3.z, r2.xyzw, cb0[3].xyzw  // r3.z <- gout.positionHomogeneous.w
                  dp4 r3.w, r2.xyzw, cb0[4].xyzw  // r3.w <- gout.shadowHomogeneous.x
                  dp4 r5.x, r2.xyzw, cb0[5].xyzw  // r5.x <- gout.shadowHomogeneous.y
                  dp4 r5.y, r2.xyzw, cb0[6].xyzw  // r5.y <- gout.shadowHomogeneous.z
                  dp4 r2.w, r2.xyzw, cb0[7].xyzw  // r2.w <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r3.x
                  mov o0.z, r3.y
                  mov o0.w, r3.z
                  mov o1.xyz, r2.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[1].xyxx
                  mov o4.x, r3.w
                  mov o4.y, r5.x
                  mov o4.z, r5.y
                  mov o4.w, r2.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 75
                  mov r4.w, l(1.000000)
                  dp4 r1.x, r4.xyzw, cb0[0].xyzw
                  dp4 r2.x, r4.xyzw, cb0[1].xyzw  // r2.x <- gout.positionHomogeneous.y
                  dp4 r2.y, r4.xyzw, cb0[2].xyzw  // r2.y <- gout.positionHomogeneous.z
                  dp4 r2.z, r4.xyzw, cb0[3].xyzw  // r2.z <- gout.positionHomogeneous.w
                  dp4 r2.w, r4.xyzw, cb0[4].xyzw  // r2.w <- gout.shadowHomogeneous.x
                  dp4 r3.x, r4.xyzw, cb0[5].xyzw  // r3.x <- gout.shadowHomogeneous.y
                  dp4 r3.y, r4.xyzw, cb0[6].xyzw  // r3.y <- gout.shadowHomogeneous.z
                  dp4 r3.z, r4.xyzw, cb0[7].xyzw  // r3.z <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r2.x
                  mov o0.z, r2.y
                  mov o0.w, r2.z
                  mov o1.xyz, r4.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[2].xyxx
                  mov o4.x, r2.w
                  mov o4.y, r3.x
                  mov o4.z, r3.y
                  mov o4.w, r3.z
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 75
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw
                  dp4 r2.x, r0.xyzw, cb0[1].xyzw
                  dp4 r2.y, r0.xyzw, cb0[2].xyzw
                  dp4 r2.z, r0.xyzw, cb0[3].xyzw
                  dp4 r2.w, r0.xyzw, cb0[4].xyzw
                  dp4 r3.x, r0.xyzw, cb0[5].xyzw
                  dp4 r3.y, r0.xyzw, cb0[6].xyzw
                  dp4 r0.w, r0.xyzw, cb0[7].xyzw  // r0.w <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r2.x
                  mov o0.z, r2.y
                  mov o0.w, r2.z
                  mov o1.xyz, r0.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[3].xyxx
                  mov o4.x, r2.w
                  mov o4.y, r3.x
                  mov o4.z, r3.y
                  mov o4.w, r0.w
                  mov o5.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 111 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  128
                //       float4 Diffuse;                // Offset:  144
                //       float4 Specular;               // Offset:  160
                //       float3 Direction;              // Offset:  176
                //       float Padding;                 // Offset:  188
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float3 Position;               // Offset:  368
                //       float Range;                   // Offset:  380
                //       float3 Attenuation;            // Offset:  384
                //       float Padding;                 // Offset:  396
                //
                //   } gPointLight;                     // Offset:  320 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  400
                //       float4 Diffuse;                // Offset:  416
                //       float4 Specular;               // Offset:  432
                //       float3 Position;               // Offset:  448
                //       float Range;                   // Offset:  460
                //       float3 Direction;              // Offset:  464
                //       float Spot;                    // Offset:  476
                //       float3 Attenuation;            // Offset:  480
                //       float Padding;                 // Offset:  492
                //
                //   } gSpotLight;                      // Offset:  400 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  496 Size:    12
                //   float gFogStart;                   // Offset:  508 Size:     4
                //   float gFogRange;                   // Offset:  512 Size:     4
                //   float4 gFogColor;                  // Offset:  528 Size:    16
                //   float gEnableShadows;              // Offset:  544 Size:     4
                //   float gRadius;                     // Offset:  548 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68
                //   uint gTextureCount;                // Offset:   68 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerShadow                   sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[35], immediateIndexed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v4.xyzw
                dcl_input_ps_sgv v5.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v5.x <- input.primitiveID; 
                //   o0.x <- <PSForwardBillboard return value>.x; o0.y <- <PSForwardBillboard return value>.y; o0.z <- <PSForwardBillboard return value>.z; o0.w <- <PSForwardBillboard return value>.w
                //
                #line 121 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, -v1.xyzx, cb0[31].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                div r0.xyz, r0.xyzx, r0.wwww
                
                #line 325 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.x, cb0[34].x, l(1.000000)
                if_nz r1.x
                
                #line 299
                  div r1.xyz, v4.xyzx, v4.wwww  // r1.x <- shadowPosH.x; r1.y <- shadowPosH.y; r1.z <- shadowPosH.z
                
                #line 309
                  add r2.xyzw, r1.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.xxxx, s1, r1.z  // r1.w <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x
                  add r2.xyzw, r1.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r1.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x
                  add r2.xyzw, r1.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x
                  add r2.xyzw, r1.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.x, r1.x, r1.w  // r1.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.x, r1.y, r1.x
                
                #line 313
                  mul r1.x, r1.x, l(0.111111)
                
                #line 329
                else 
                  mov r1.x, l(1.000000)
                endif 
                
                #line 336
                eq r1.y, cb0[11].w, l(1.000000)
                if_nz r1.y
                
                #line 168
                  mul r1.yzw, cb0[8].xxyz, cb1[0].xxyz  // r1.y <- ambient.x; r1.z <- ambient.y; r1.w <- ambient.z
                
                #line 171
                  dp3 r2.x, -cb0[11].xyzx, v2.xyzx  // r2.x <- diffuseFactor
                
                #line 175
                  lt r2.y, l(0.000000), r2.x
                  dp3 r2.z, cb0[11].xyzx, v2.xyzx
                  add r2.z, r2.z, r2.z
                  mad r3.xyz, v2.xyzx, -r2.zzzz, cb0[11].xyzx  // r3.x <- v.x; r3.y <- v.y; r3.z <- v.z
                  dp3 r2.z, r3.xyzx, r0.xyzx
                  max r2.z, r2.z, l(0.000000)
                  log r2.z, r2.z
                  mul r2.z, r2.z, cb1[2].w
                  exp r2.z, r2.z  // r2.z <- specFactor
                  mul r3.xyz, r2.xxxx, cb1[1].xyzx
                  mul r3.xyz, r3.xyzx, cb0[9].xyzx  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                  mul r2.xzw, r2.zzzz, cb1[2].xxyz
                  mul r2.xzw, r2.xxzw, cb0[10].xxyz  // r2.x <- spec.x; r2.z <- spec.y; r2.w <- spec.z
                  and r3.xyz, r2.yyyy, r3.xyzx
                  and r2.xyz, r2.xzwx, r2.yyyy  // r2.y <- spec.y; r2.z <- spec.z
                
                #line 348
                  mul r3.xyz, r1.xxxx, r3.xyzx  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                  mul r2.xyz, r1.xxxx, r2.xyzx  // r2.x <- specular.x; r2.y <- specular.y; r2.z <- specular.z
                else 
                  mov r1.yzw, l(0,0,0,0)  // r1.y <- ambient.x; r1.z <- ambient.y; r1.w <- ambient.z
                  mov r3.xyz, l(0,0,0,0)  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z
                  mov r2.xyz, l(0,0,0,0)  // r2.x <- specular.x; r2.y <- specular.y; r2.z <- specular.z
                endif 
                
                #line 336
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 171
                  dp3 r1.x, -cb0[15].xyzx, v2.xyzx  // r1.x <- diffuseFactor
                
                #line 175
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[15].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[15].xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // r3.w <- specFactor
                  mul r4.xyz, r1.xxxx, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[13].xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[14].xyzx  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                  and r4.xyz, r2.wwww, r4.xyzx
                  and r5.xyz, r2.wwww, r5.xyzx
                
                #line 347
                  mad r1.yzw, cb1[0].xxyz, cb0[12].xxyz, r1.yyzw
                  add r3.xyz, r3.xyzx, r4.xyzx
                  add r2.xyz, r2.xyzx, r5.xyzx
                endif 
                
                #line 336
                eq r1.x, cb0[19].w, l(1.000000)
                if_nz r1.x
                
                #line 171
                  dp3 r1.x, -cb0[19].xyzx, v2.xyzx  // r1.x <- diffuseFactor
                
                #line 175
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // r3.w <- specFactor
                  mul r4.xyz, r1.xxxx, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                  and r4.xyz, r2.wwww, r4.xyzx
                  and r5.xyz, r2.wwww, r5.xyzx
                
                #line 347
                  mad r1.yzw, cb1[0].xxyz, cb0[16].xxyz, r1.yyzw
                  add r3.xyz, r3.xyzx, r4.xyzx
                  add r2.xyz, r2.xyzx, r5.xyzx
                endif 
                
                #line 353
                eq r1.x, cb0[24].w, l(1.000000)
                if_nz r1.x
                
                #line 200
                  add r4.xyz, -v1.xyzx, cb0[23].xyzx  // r4.x <- lightVec.x; r4.y <- lightVec.y; r4.z <- lightVec.z
                
                #line 203
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // r5.y <- d
                
                #line 210
                  ge r1.x, cb0[23].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy
                
                #line 213
                  dp3 r2.w, r4.xyzx, v2.xyzx  // r2.w <- diffuseFactor
                
                #line 217
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // r4.x <- v.x; r4.y <- v.y; r4.z <- v.z
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[2].w
                  exp r4.x, r4.x  // r4.x <- specFactor
                  mul r4.yzw, r2.wwww, cb1[1].xxyz
                  mul r4.yzw, r4.yyzw, cb0[21].xxyz  // r4.y <- diffuse.x; r4.z <- diffuse.y; r4.w <- diffuse.z
                  mul r6.xyz, r4.xxxx, cb1[2].xyzx
                  mul r6.xyz, r6.xyzx, cb0[22].xyzx  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                  and r4.xyz, r3.wwww, r4.yzwy  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                  and r6.xyz, r3.wwww, r6.xyzx
                
                #line 227
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[24].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // r2.w <- attenuation
                  mul r5.xyz, cb0[20].xyzx, cb1[0].xyzx
                  mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- ambient.x; r5.y <- ambient.y; r5.z <- ambient.z
                  mul r4.xyz, r2.wwww, r4.xyzx
                  mul r6.xyz, r2.wwww, r6.xyzx
                  and r5.xyz, r1.xxxx, r5.xyzx
                  and r4.xyz, r1.xxxx, r4.xyzx
                  and r6.xyz, r1.xxxx, r6.xyzx
                
                #line 365
                  add r1.yzw, r1.yyzw, r5.xxyz
                  add r3.xyz, r3.xyzx, r4.xyzx
                  add r2.xyz, r2.xyzx, r6.xyzx
                endif 
                eq r1.x, cb0[30].w, l(1.000000)
                if_nz r1.x
                
                #line 249
                  add r4.xyz, -v1.xyzx, cb0[28].xyzx  // r4.x <- lightVec.x; r4.y <- lightVec.y; r4.z <- lightVec.z
                
                #line 252
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // r5.y <- d
                
                #line 259
                  ge r1.x, cb0[28].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy
                
                #line 262
                  dp3 r2.w, r4.xyzx, v2.xyzx  // r2.w <- diffuseFactor
                
                #line 266
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r6.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // r6.x <- v.x; r6.y <- v.y; r6.z <- v.z
                  dp3 r0.x, r6.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[2].w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r6.xyz, r2.wwww, cb1[1].xyzx
                  mul r6.xyz, r6.xyzx, cb0[26].xyzx  // r6.x <- diffuse.x; r6.y <- diffuse.y; r6.z <- diffuse.z
                  mul r0.xyz, r0.xxxx, cb1[2].xyzx
                  mul r0.xyz, r0.xyzx, cb0[27].xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                  and r6.xyz, r3.wwww, r6.xyzx
                  and r0.xyz, r0.xyzx, r3.wwww
                
                #line 276
                  dp3 r2.w, -r4.xyzx, cb0[29].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[29].w
                  exp r2.w, r2.w  // r2.w <- spot
                
                #line 279
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[30].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // r3.w <- attenuation
                
                #line 282
                  mul r4.xyz, cb0[25].xyzx, cb1[0].xyzx
                  mul r4.xyz, r3.wwww, r4.xyzx
                  mul r4.xyz, r2.wwww, r4.xyzx  // r4.x <- ambient.x; r4.y <- ambient.y; r4.z <- ambient.z
                  mul r5.xyz, r3.wwww, r6.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                  mul r0.xyz, r0.xyzx, r3.wwww
                  and r4.xyz, r1.xxxx, r4.xyzx
                  and r5.xyz, r1.xxxx, r5.xyzx
                  and r0.xyz, r0.xyzx, r1.xxxx
                
                #line 382
                  add r1.yzw, r1.yyzw, r4.xxyz
                  add r3.xyz, r3.xyzx, r5.xyzx
                  add r2.xyz, r0.xyzx, r2.xyzx
                endif 
                
                #line 138 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v5.x, cb1[4].y
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r0.xyzx, t0.xyzw, s0  // r4.x <- textureColor.x; r4.y <- textureColor.y; r4.z <- textureColor.z; r4.w <- textureColor.w
                add r0.x, r4.w, l(-0.050000)
                lt r0.x, r0.x, l(0.000000)
                discard_nz r0.x
                add r0.xyz, r1.yzwy, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                lt r1.x, l(0.000000), cb0[32].x
                
                #line 396 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.w, r0.w, -cb0[31].w
                div_sat r0.w, r0.w, cb0[32].x  // r0.w <- fogLerp
                add r1.yzw, -r0.xxyz, cb0[33].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // r1.y <- <ComputeFog return value>.x; r1.z <- <ComputeFog return value>.y; r1.w <- <ComputeFog return value>.z
                
                #line 147 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
                mul o0.w, r4.w, cb1[1].w
                ret 
                // Approximately 199 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 DeferredBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  128
                //       float4 Diffuse;                // Offset:  144
                //       float4 Specular;               // Offset:  160
                //       float3 Direction;              // Offset:  176
                //       float Padding;                 // Offset:  188
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float3 Position;               // Offset:  368
                //       float Range;                   // Offset:  380
                //       float3 Attenuation;            // Offset:  384
                //       float Padding;                 // Offset:  396
                //
                //   } gPointLight;                     // Offset:  320 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  400
                //       float4 Diffuse;                // Offset:  416
                //       float4 Specular;               // Offset:  432
                //       float3 Position;               // Offset:  448
                //       float Range;                   // Offset:  460
                //       float3 Direction;              // Offset:  464
                //       float Spot;                    // Offset:  476
                //       float3 Attenuation;            // Offset:  480
                //       float Padding;                 // Offset:  492
                //
                //   } gSpotLight;                      // Offset:  400 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  496 Size:    12
                //   float gFogStart;                   // Offset:  508 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  512 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  528 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  544 Size:     4 [unused]
                //   float gRadius;                     // Offset:  548 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[35], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 7
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_output_sgv o5.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y
                //
                #line 52 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[31].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[34].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[34].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 57
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yw, r0.xxxz, r1.xxxx  // r1.y <- look.x; r1.w <- look.z
                  mov r1.z, l(0)  // r1.z <- look.y
                  mul r0.xy, r1.wyww, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xwyx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 65
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r2.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r2.xyzx  // r3.x <- gout.positionWorld.x; r3.y <- gout.positionWorld.y; r3.z <- gout.positionWorld.z
                  mad r2.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r2.xyzx  // r2.x <- gout.positionWorld.x; r2.y <- gout.positionWorld.y; r2.z <- gout.positionWorld.z
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r4.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r4.x <- gout.positionWorld.x; r4.y <- gout.positionWorld.y; r4.z <- gout.positionWorld.z
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r0.x <- gout.positionWorld.x; r0.y <- gout.positionWorld.y; r0.z <- gout.positionWorld.z
                
                #line 75
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r5.x, r3.xyzw, cb0[1].xyzw  // r5.x <- gout.positionHomogeneous.y
                  dp4 r5.y, r3.xyzw, cb0[2].xyzw  // r5.y <- gout.positionHomogeneous.z
                  dp4 r5.z, r3.xyzw, cb0[3].xyzw  // r5.z <- gout.positionHomogeneous.w
                  dp4 r5.w, r3.xyzw, cb0[4].xyzw  // r5.w <- gout.shadowHomogeneous.x
                  dp4 r6.x, r3.xyzw, cb0[5].xyzw  // r6.x <- gout.shadowHomogeneous.y
                  dp4 r6.y, r3.xyzw, cb0[6].xyzw  // r6.y <- gout.shadowHomogeneous.z
                  dp4 r3.w, r3.xyzw, cb0[7].xyzw  // r3.w <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r5.x
                  mov o0.z, r5.y
                  mov o0.w, r5.z
                  mov o1.xyz, r3.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[0].xyxx
                  mov o4.x, r5.w
                  mov o4.y, r6.x
                  mov o4.z, r6.y
                  mov o4.w, r3.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 75
                  mov r2.w, l(1.000000)
                  dp4 r1.x, r2.xyzw, cb0[0].xyzw
                  dp4 r3.x, r2.xyzw, cb0[1].xyzw  // r3.x <- gout.positionHomogeneous.y
                  dp4 r3.y, r2.xyzw, cb0[2].xyzw  // r3.y <- gout.positionHomogeneous.z
                  dp4 r3.z, r2.xyzw, cb0[3].xyzw  // r3.z <- gout.positionHomogeneous.w
                  dp4 r3.w, r2.xyzw, cb0[4].xyzw  // r3.w <- gout.shadowHomogeneous.x
                  dp4 r5.x, r2.xyzw, cb0[5].xyzw  // r5.x <- gout.shadowHomogeneous.y
                  dp4 r5.y, r2.xyzw, cb0[6].xyzw  // r5.y <- gout.shadowHomogeneous.z
                  dp4 r2.w, r2.xyzw, cb0[7].xyzw  // r2.w <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r3.x
                  mov o0.z, r3.y
                  mov o0.w, r3.z
                  mov o1.xyz, r2.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[1].xyxx
                  mov o4.x, r3.w
                  mov o4.y, r5.x
                  mov o4.z, r5.y
                  mov o4.w, r2.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 75
                  mov r4.w, l(1.000000)
                  dp4 r1.x, r4.xyzw, cb0[0].xyzw
                  dp4 r2.x, r4.xyzw, cb0[1].xyzw  // r2.x <- gout.positionHomogeneous.y
                  dp4 r2.y, r4.xyzw, cb0[2].xyzw  // r2.y <- gout.positionHomogeneous.z
                  dp4 r2.z, r4.xyzw, cb0[3].xyzw  // r2.z <- gout.positionHomogeneous.w
                  dp4 r2.w, r4.xyzw, cb0[4].xyzw  // r2.w <- gout.shadowHomogeneous.x
                  dp4 r3.x, r4.xyzw, cb0[5].xyzw  // r3.x <- gout.shadowHomogeneous.y
                  dp4 r3.y, r4.xyzw, cb0[6].xyzw  // r3.y <- gout.shadowHomogeneous.z
                  dp4 r3.z, r4.xyzw, cb0[7].xyzw  // r3.z <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r2.x
                  mov o0.z, r2.y
                  mov o0.w, r2.z
                  mov o1.xyz, r4.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[2].xyxx
                  mov o4.x, r2.w
                  mov o4.y, r3.x
                  mov o4.z, r3.y
                  mov o4.w, r3.z
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 75
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw
                  dp4 r2.x, r0.xyzw, cb0[1].xyzw
                  dp4 r2.y, r0.xyzw, cb0[2].xyzw
                  dp4 r2.z, r0.xyzw, cb0[3].xyzw
                  dp4 r2.w, r0.xyzw, cb0[4].xyzw
                  dp4 r3.x, r0.xyzw, cb0[5].xyzw
                  dp4 r3.y, r0.xyzw, cb0[6].xyzw
                  dp4 r0.w, r0.xyzw, cb0[7].xyzw  // r0.w <- gout.shadowHomogeneous.w
                
                #line 82
                  mov o0.x, r1.x
                  mov o0.y, r2.x
                  mov o0.z, r2.y
                  mov o0.w, r2.z
                  mov o1.xyz, r0.xyzx
                  mov o2.xyz, r1.yzwy
                  mov o3.xy, cb2[3].xyxx
                  mov o4.x, r2.w
                  mov o4.y, r3.x
                  mov o4.z, r3.y
                  mov o4.w, r0.w
                  mov o5.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 111 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68 [unused]
                //   uint gTextureCount;                // Offset:   68 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     zw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float       
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.zw, position
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps_sgv v5.x, primitive_id
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v5.x <- input.primitiveID; 
                //   o2.x <- <PSDeferredBillboard return value>.depth.x; o2.y <- <PSDeferredBillboard return value>.depth.y; o2.z <- <PSDeferredBillboard return value>.depth.z; o2.w <- <PSDeferredBillboard return value>.depth.w; 
                //   o1.x <- <PSDeferredBillboard return value>.normal.x; o1.y <- <PSDeferredBillboard return value>.normal.y; o1.z <- <PSDeferredBillboard return value>.normal.z; o1.w <- <PSDeferredBillboard return value>.normal.w; 
                //   o0.x <- <PSDeferredBillboard return value>.color.x; o0.y <- <PSDeferredBillboard return value>.color.y; o0.z <- <PSDeferredBillboard return value>.color.z; o0.w <- <PSDeferredBillboard return value>.color.w
                //
                #line 157 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v5.x, cb1[4].y
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.x, r0.w, l(-0.050000)
                
                #line 167
                mov o0.xyzw, r0.xyzw
                
                #line 159
                lt r0.x, r1.x, l(0.000000)
                discard_nz r0.x
                
                #line 167
                mov o1.xyz, v2.xyzx
                mov o1.w, l(0)
                div o2.w, v0.z, v0.w
                mov o2.xyz, v1.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 ShadowMapBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  128
                //       float4 Diffuse;                // Offset:  144
                //       float4 Specular;               // Offset:  160
                //       float3 Direction;              // Offset:  176
                //       float Padding;                 // Offset:  188
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  320
                //       float4 Diffuse;                // Offset:  336
                //       float4 Specular;               // Offset:  352
                //       float3 Position;               // Offset:  368
                //       float Range;                   // Offset:  380
                //       float3 Attenuation;            // Offset:  384
                //       float Padding;                 // Offset:  396
                //
                //   } gPointLight;                     // Offset:  320 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  400
                //       float4 Diffuse;                // Offset:  416
                //       float4 Specular;               // Offset:  432
                //       float3 Position;               // Offset:  448
                //       float Range;                   // Offset:  460
                //       float3 Direction;              // Offset:  464
                //       float Spot;                    // Offset:  476
                //       float3 Attenuation;            // Offset:  480
                //       float Padding;                 // Offset:  492
                //
                //   } gSpotLight;                      // Offset:  400 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  496 Size:    12
                //   float gFogStart;                   // Offset:  508 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  512 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  528 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  544 Size:     4 [unused]
                //   float gRadius;                     // Offset:  548 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint     NO
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[35], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 5
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y
                //
                #line 89 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[31].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[34].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[34].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 94
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 102
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                
                #line 112
                  mov r2.w, l(1.000000)
                  dp4 r4.x, r2.xyzw, cb0[0].xyzw  // r4.x <- gout.positionHomogeneous.x
                  dp4 r4.y, r2.xyzw, cb0[1].xyzw  // r4.y <- gout.positionHomogeneous.y
                  dp4 r4.z, r2.xyzw, cb0[2].xyzw  // r4.z <- gout.positionHomogeneous.z
                  dp4 r2.x, r2.xyzw, cb0[3].xyzw  // r2.x <- gout.positionHomogeneous.w
                  mov o0.x, r4.x
                  mov o0.y, r4.y
                  mov o0.z, r4.z
                  mov o0.w, r2.x
                  emit_stream m0
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- gout.positionHomogeneous.x
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- gout.positionHomogeneous.y
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw  // r2.z <- gout.positionHomogeneous.z
                  dp4 r1.x, r1.xyzw, cb0[3].xyzw  // r1.x <- gout.positionHomogeneous.w
                  mov o0.x, r2.x
                  mov o0.y, r2.y
                  mov o0.z, r2.z
                  mov o0.w, r1.x
                  emit_stream m0
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r3.xyzw, cb0[3].xyzw  // r1.w <- gout.positionHomogeneous.w
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  emit_stream m0
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw
                  dp4 r0.x, r0.xyzw, cb0[3].xyzw  // r0.x <- gout.positionHomogeneous.w
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.x
                  emit_stream m0
                endif 
                ret 
                // Approximately 62 instruction slots used
                            
            };
            PixelShader = NULL;
            RasterizerState = RasterizerDepth;
        }

    }

}

