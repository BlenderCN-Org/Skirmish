//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProjection;      // Offset:   64, size:   64
    float4x4 gLightViewProjection;      // Offset:  128, size:   64
    float3  gEyePositionWorld;          // Offset:  192, size:   12
    DirectionalLight gDirLights[3];     // Offset:  208, size:  144
    PointLight gPointLights[4];         // Offset:  352, size:  192
    SpotLight gSpotLights[4];           // Offset:  544, size:  256
    float   gFogStart;                  // Offset:  800, size:    4
    float   gFogRange;                  // Offset:  804, size:    4
    float4  gFogColor;                  // Offset:  816, size:   16
    float   gStartRadius;               // Offset:  832, size:    4
    float   gEndRadius;                 // Offset:  836, size:    4
    float3  gWindDirection;             // Offset:  848, size:   12
    float   gWindStrength;              // Offset:  860, size:    4
    float   gTotalTime;                 // Offset:  864, size:    4
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   24
    uint    gTextureCount;              // Offset:   24, size:    4
}

cbuffer cbFixed : register(b2)
{
    float2  gQuadTexC[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 8 local object(s)
//
SamplerState SamplerPoint
{
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState SamplerComparisonLessEqual
{
    Filter   = uint(COMPARISON_MIN_MAG_MIP_LINEAR /* 149 */);
    AddressU = uint(MIRROR /* 2 */);
    AddressV = uint(MIRROR /* 2 */);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
Texture2DArray gTextureArray;
Texture2D gShadowMapStatic;
Texture2D gShadowMapDynamic;
Texture1D gTextureRandom;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 ForwardBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 57 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mad o0.y, v1.y, l(0.450000), v0.y
                
                #line 60
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 4 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float4x4 gLightViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //       float Pad1;                    // Offset:  248
                //       float Pad2;                    // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   144 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //       float Pad1;                    // Offset:  396
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   192 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //       float Pad1;                    // Offset:  604
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   256 [unused]
                //   float gFogStart;                   // Offset:  800 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  804 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float gStartRadius;                // Offset:  832 Size:     4 [unused]
                //   float gEndRadius;                  // Offset:  836 Size:     4
                //   float3 gWindDirection;             // Offset:  848 Size:    12
                //   float gWindStrength;               // Offset:  860 Size:     4
                //   float gTotalTime;                  // Offset:  864 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureRandom                    texture  float4          1d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // SV_PrimitiveID           0   x           4   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[55], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture1d (float,float,float,float) t0
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output_sgv o4.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y; 
                //   x0 <- v[1].x
                //
                #line 66 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[12].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[52].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[52].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 71
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 79
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mov x0[1].xyz, r1.xyzx
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mov x0[3].xyz, r0.xyzx
                  lt r0.w, l(0.000000), cb0[53].w
                  if_nz r0.w
                
                #line 45
                    add r0.w, r1.y, r1.x
                    add r0.w, r1.z, r0.w
                    mad r0.w, r0.w, l(0.100000), cb0[54].x
                    sincos r0.w, null, r0.w
                    mad r4.xyz, cb0[53].xyzx, cb0[53].wwww, r0.wwww  // r4.x <- vWind.x; r4.y <- vWind.y; r4.z <- vWind.z
                    utof r0.w, vPrim
                    sample_l_indexable(texture1d)(float,float,float,float) r0.w, r0.w, t0.yzwx, s0, l(0.000000)  // r0.w <- sRandom
                    min r0.w, r0.w, l(1.000000)
                    mad r1.xyz, r4.xyzx, r0.wwww, r1.xyzx  // r1.x <- <CalcWindTranslation return value>.x; r1.y <- <CalcWindTranslation return value>.y; r1.z <- <CalcWindTranslation return value>.z
                
                #line 86
                    mov x0[1].xyz, r1.xyzx
                
                #line 45
                    add r1.x, r0.y, r0.x
                    add r1.x, r0.z, r1.x
                    mad r1.x, r1.x, l(0.100000), cb0[54].x
                    sincos r1.x, null, r1.x
                    mad r1.xyz, cb0[53].xyzx, cb0[53].wwww, r1.xxxx  // r1.x <- vWind.x; r1.y <- vWind.y; r1.z <- vWind.z
                
                #line 49
                    mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx  // r0.x <- <CalcWindTranslation return value>.x; r0.y <- <CalcWindTranslation return value>.y; r0.z <- <CalcWindTranslation return value>.z
                
                #line 87
                    mov x0[3].xyz, r0.xyzx
                  endif 
                
                #line 95
                  mov r2.w, l(1.000000)
                  dp4 r0.x, r2.xyzw, cb0[4].xyzw  // r0.x <- gout.positionHomogeneous.x
                  dp4 r0.y, r2.xyzw, cb0[5].xyzw  // r0.y <- gout.positionHomogeneous.y
                  dp4 r0.z, r2.xyzw, cb0[6].xyzw  // r0.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r2.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                  dp4 r1.x, r2.xyzw, cb0[0].xyzw  // r1.x <- gout.positionWorld.x
                  dp4 r1.y, r2.xyzw, cb0[1].xyzw  // r1.y <- gout.positionWorld.y
                  dp4 r1.z, r2.xyzw, cb0[2].xyzw  // r1.z <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r0.x
                  mov o0.y, r0.y
                  mov o0.z, r0.z
                  mov o0.w, r0.w
                  mov o1.x, r1.x
                  mov o1.y, r1.y
                  mov o1.z, r1.z
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[0].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                
                #line 95
                  mov r0.xyz, x0[1].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- gout.positionHomogeneous.w
                  dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- gout.positionWorld.x
                  dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- gout.positionWorld.y
                  dp4 r0.x, r0.xyzw, cb0[2].xyzw  // r0.x <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.x, r2.x
                  mov o1.y, r2.y
                  mov o1.z, r0.x
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[1].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                
                #line 95
                  mov r3.w, l(1.000000)
                  dp4 r0.x, r3.xyzw, cb0[4].xyzw  // r0.x <- gout.positionHomogeneous.x
                  dp4 r0.y, r3.xyzw, cb0[5].xyzw  // r0.y <- gout.positionHomogeneous.y
                  dp4 r0.z, r3.xyzw, cb0[6].xyzw  // r0.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r3.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionWorld.x
                  dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- gout.positionWorld.y
                  dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r0.x
                  mov o0.y, r0.y
                  mov o0.z, r0.z
                  mov o0.w, r0.w
                  mov o1.x, r1.x
                  mov o1.y, r1.y
                  mov o1.z, r1.z
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[2].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                
                #line 95
                  mov r0.xyz, x0[3].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- gout.positionHomogeneous.w
                  dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- gout.positionWorld.x
                  dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- gout.positionWorld.y
                  dp4 r0.x, r0.xyzw, cb0[2].xyzw  // r0.x <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.x, r2.x
                  mov o1.y, r2.y
                  mov o1.z, r0.x
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[3].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 122 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64 [unused]
                //   float4x4 gLightViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //       float Pad1;                    // Offset:  248
                //       float Pad2;                    // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   144
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //       float Pad1;                    // Offset:  396
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   192
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //       float Pad1;                    // Offset:  604
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   256
                //   float gFogStart;                   // Offset:  800 Size:     4
                //   float gFogRange;                   // Offset:  804 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float gStartRadius;                // Offset:  832 Size:     4 [unused]
                //   float gEndRadius;                  // Offset:  836 Size:     4
                //   float3 gWindDirection;             // Offset:  848 Size:    12 [unused]
                //   float gWindStrength;               // Offset:  860 Size:     4 [unused]
                //   float gTotalTime;                  // Offset:  864 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //   uint gTextureCount;                // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerComparisonLessEqual      sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMapStatic                  texture  float4          2d    1        1
                // gShadowMapDynamic                 texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // SV_PrimitiveID           0   x           4   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[53], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps_sgv v4.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[16], 4
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.primitiveID; 
                //   o0.x <- <PSForwardBillboard return value>.x; o0.y <- <PSForwardBillboard return value>.y; o0.z <- <PSForwardBillboard return value>.z; o0.w <- <PSForwardBillboard return value>.w
                //
                #line 73 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mov x0[0].xy, l(0.277074,0.695145,0,0)
                mov x0[1].xy, l(0.187426,-0.025616,0,0)
                mov x0[2].xy, l(-0.338193,0.871317,0,0)
                mov x0[3].xy, l(0.586775,0.108747,0,0)
                mov x0[4].xy, l(-0.307870,0.188545,0,0)
                mov x0[5].xy, l(0.799340,0.459509,0,0)
                mov x0[6].xy, l(-0.092426,0.526015,0,0)
                mov x0[7].xy, l(0.365755,-0.532960,0,0)
                mov x0[8].xy, l(-0.382972,-0.247617,0,0)
                mov x0[9].xy, l(-0.010851,-0.696630,0,0)
                mov x0[10].xy, l(0.840415,-0.354392,0,0)
                mov x0[11].xy, l(-0.518616,-0.762403,0,0)
                mov x0[12].xy, l(-0.813579,0.232849,0,0)
                mov x0[13].xy, l(-0.784665,-0.243493,0,0)
                mov x0[14].xy, l(0.992051,0.085516,0,0)
                mov x0[15].xy, l(-0.687256,0.671134,0,0)
                
                #line 149 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v4.x, cb1[1].z
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.x, r0.w, l(-0.050000)
                lt r1.x, r1.x, l(0.000000)
                discard_nz r1.x
                add r1.xyz, -v1.xyzx, cb0[12].xyzx  // r1.x <- toEyeWorld.x; r1.y <- toEyeWorld.y; r1.z <- toEyeWorld.z
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                mov r2.xyz, v1.xyzx
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[8].xyzw  // r3.x <- shadowPosition.x
                dp4 r3.y, r2.xyzw, cb0[9].xyzw  // r3.y <- shadowPosition.y
                dp4 r3.z, r2.xyzw, cb0[10].xyzw  // r3.z <- shadowPosition.z
                dp4 r2.x, r2.xyzw, cb0[11].xyzw  // r2.x <- shadowPosition.w
                
                #line 322 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.y, cb0[15].y, l(1.000000)
                if_nz r2.y
                
                #line 206
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 128
                  div r2.z, r3.x, r2.x
                  mad r4.x, r2.z, l(0.500000), l(0.500000)  // r4.x <- tex.x
                  div r2.z, -r3.y, r2.x
                  mad r4.y, r2.z, l(0.500000), l(0.500000)  // r4.y <- tex.y
                  div r2.z, r3.z, r2.x
                  add r2.z, r2.z, l(-0.001000)  // r2.z <- z
                  mov r2.w, l(0)  // r2.w <- shadow
                  mov r3.w, l(0)  // r3.w <- i
                  loop 
                    uge r4.z, r3.w, l(16)
                    breakc_nz r4.z
                    mov r4.zw, x0[r3.w + 0].xxxy
                    mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 0.001429, 0.001429), r4.xxxy  // r4.z <- stc.x; r4.w <- stc.y
                    sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r4.zwzz, t1.xxxx, s1, r2.z
                    ne r5.x, l(0.000000, 0.000000, 0.000000, 0.000000), r5.x
                    not r5.x, r5.x
                    sample_c_lz_indexable(texture2d)(float,float,float,float) r4.z, r4.zwzz, t2.xxxx, s1, r2.z
                    ne r4.z, l(0.000000, 0.000000, 0.000000, 0.000000), r4.z
                    not r4.z, r4.z
                    or r4.z, r4.z, r5.x
                
                #line 139
                    add r4.w, r2.w, l(0.800000)  // r4.w <- shadow
                    movc r2.w, r4.z, r4.w, r2.w  // r2.w <- shadow
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mad r2.z, -r2.w, l(0.062500), l(1.000000)  // r2.z <- <CalcShadowFactor return value>
                
                #line 209
                  movc r2.y, r2.y, r2.z, l(1.000000)  // r2.y <- shadowFactor
                
                #line 169
                  dp3 r2.z, v2.xyzx, -cb0[14].yzwy
                  max r2.z, r2.z, l(0.000000)  // r2.z <- diffuseFactor
                  lt r2.w, l(0.000000), r2.z
                  mul r2.z, r2.z, cb0[14].x
                  mul r4.x, r2.y, r2.z  // r4.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r5.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r5.xyzx, r5.xyzx
                  rsq r2.y, r2.y
                  mul r5.xyz, r2.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r2.y, r1.xyzx, r5.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.z, l(0.000000), r2.y
                
                #line 181
                  max r3.w, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.w
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r4.y, r2.y, r2.z  // r4.y <- specular
                  and r2.yz, r2.wwww, r4.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r4.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 335
                else 
                  mov r2.yzw, l(0,0,0,0)
                endif 
                
                #line 322
                eq r3.w, cb0[18].y, l(1.000000)
                if_nz r3.w
                
                #line 206
                  eq r3.w, cb0[18].x, l(1.000000)
                
                #line 128
                  div r4.x, r3.x, r2.x
                  mad r4.x, r4.x, l(0.500000), l(0.500000)  // r4.x <- tex.x
                  div r4.z, -r3.y, r2.x
                  mad r4.y, r4.z, l(0.500000), l(0.500000)  // r4.y <- tex.y
                  div r4.z, r3.z, r2.x
                  add r4.z, r4.z, l(-0.001000)  // r4.z <- z
                  mov r4.w, l(0)  // r4.w <- shadow
                  mov r5.x, l(0)  // r5.x <- i
                  loop 
                    uge r5.y, r5.x, l(16)
                    breakc_nz r5.y
                    mov r5.yz, x0[r5.x + 0].xxyx
                    mad r5.yz, r5.yyzy, l(0.000000, 0.001429, 0.001429, 0.000000), r4.xxyx  // r5.y <- stc.x; r5.z <- stc.y
                    sample_c_lz_indexable(texture2d)(float,float,float,float) r5.w, r5.yzyy, t1.xxxx, s1, r4.z
                    ne r5.w, l(0.000000, 0.000000, 0.000000, 0.000000), r5.w
                    sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r5.yzyy, t2.xxxx, s1, r4.z
                    ne r5.y, l(0.000000, 0.000000, 0.000000, 0.000000), r5.y
                    not r5.yw, r5.yyyw
                    or r5.y, r5.y, r5.w
                
                #line 139
                    add r5.z, r4.w, l(0.800000)  // r5.z <- shadow
                    movc r4.w, r5.y, r5.z, r4.w  // r4.w <- shadow
                    iadd r5.x, r5.x, l(1)
                  endloop 
                  mad r4.x, -r4.w, l(0.062500), l(1.000000)  // r4.x <- <CalcShadowFactor return value>
                
                #line 209
                  movc r3.w, r3.w, r4.x, l(1.000000)  // r3.w <- shadowFactor
                
                #line 169
                  dp3 r4.x, v2.xyzx, -cb0[17].yzwy
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r4.x, r4.x, cb0[17].x
                  mul r5.x, r3.w, r4.x  // r5.x <- diffuse
                  dp3 r3.w, cb0[17].yzwy, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xzw, v2.xxyz, -r3.wwww, cb0[17].yyzw
                  dp3 r3.w, r4.xzwx, r4.xzwx
                  rsq r3.w, r3.w
                  mul r4.xzw, r3.wwww, r4.xxzw  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r3.w, r1.xyzx, r4.xzwx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- specularFactor
                  lt r4.x, l(0.000000), r3.w
                
                #line 181
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r4.z
                  exp r3.w, r3.w  // r3.w <- specularFactor
                  mul r3.w, r3.w, cb1[1].x  // r3.w <- specular
                  and r5.y, r3.w, r4.x  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r0.xyzx, cb0[16].xyzx
                  add r3.w, r4.x, cb0[16].w
                  add r3.w, r4.y, r3.w
                
                #line 324
                  mad r2.yzw, r5.xxyz, r3.wwww, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 335
                endif 
                
                #line 322
                eq r3.w, cb0[21].y, l(1.000000)
                if_nz r3.w
                
                #line 206
                  eq r3.w, cb0[21].x, l(1.000000)
                
                #line 128
                  div r3.x, r3.x, r2.x
                  mad r4.x, r3.x, l(0.500000), l(0.500000)  // r4.x <- tex.x
                  div r3.x, -r3.y, r2.x
                  mad r4.y, r3.x, l(0.500000), l(0.500000)  // r4.y <- tex.y
                  div r2.x, r3.z, r2.x
                  add r2.x, r2.x, l(-0.001000)  // r2.x <- z
                  mov r3.xy, l(0,0,0,0)  // r3.x <- shadow; r3.y <- i
                  loop 
                    uge r3.z, r3.y, l(16)
                    breakc_nz r3.z
                    mov r4.zw, x0[r3.y + 0].xxxy
                    mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 0.001429, 0.001429), r4.xxxy  // r4.z <- stc.x; r4.w <- stc.y
                    sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r4.zwzz, t1.xxxx, s1, r2.x
                    ne r3.z, l(0.000000, 0.000000, 0.000000, 0.000000), r3.z
                    not r3.z, r3.z
                    sample_c_lz_indexable(texture2d)(float,float,float,float) r4.z, r4.zwzz, t2.xxxx, s1, r2.x
                    ne r4.z, l(0.000000, 0.000000, 0.000000, 0.000000), r4.z
                    not r4.z, r4.z
                    or r3.z, r3.z, r4.z
                
                #line 139
                    add r4.z, r3.x, l(0.800000)  // r4.z <- shadow
                    movc r3.x, r3.z, r4.z, r3.x  // r3.x <- shadow
                    iadd r3.y, r3.y, l(1)
                  endloop 
                  mad r2.x, -r3.x, l(0.062500), l(1.000000)  // r2.x <- <CalcShadowFactor return value>
                
                #line 209
                  movc r2.x, r3.w, r2.x, l(1.000000)  // r2.x <- shadowFactor
                
                #line 169
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.x, r3.x, l(0.000000)  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r3.x, r3.x, cb0[20].x
                  mul r4.x, r2.x, r3.x  // r4.x <- diffuse
                  dp3 r2.x, cb0[20].yzwy, v2.xyzx
                  add r2.x, r2.x, r2.x
                  mad r3.xzw, v2.xxyz, -r2.xxxx, cb0[20].yyzw
                  dp3 r2.x, r3.xzwx, r3.xzwx
                  rsq r2.x, r2.x
                  mul r3.xzw, r2.xxxx, r3.xxzw  // r3.x <- lightReflection.x; r3.z <- lightReflection.y; r3.w <- lightReflection.z
                  dp3 r2.x, r1.xyzx, r3.xzwx
                  max r2.x, r2.x, l(0.000000)  // r2.x <- specularFactor
                  lt r3.x, l(0.000000), r2.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.x, r2.x
                  mul r2.x, r2.x, r3.z
                  exp r2.x, r2.x  // r2.x <- specularFactor
                  mul r2.x, r2.x, cb1[1].x  // r2.x <- specular
                  and r4.y, r2.x, r3.x  // r4.y <- specular
                  and r3.xy, r3.yyyy, r4.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[19].xyzx
                  add r2.x, r3.x, cb0[19].w
                  add r2.x, r3.y, r2.x
                
                #line 324
                  mad r2.yzw, r4.xxyz, r2.xxxx, r2.yyzw
                
                #line 335
                endif 
                
                #line 341
                eq r2.x, cb0[24].z, l(1.000000)
                if_nz r2.x
                
                #line 236
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                
                #line 169
                  dp3 r3.w, v2.xyzx, -r3.xyzx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- diffuseFactor
                  lt r4.x, l(0.000000), r3.w
                  mul r5.x, r3.w, cb0[23].x  // r5.x <- diffuse
                  dp3 r3.w, r3.xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r3.xyz, v2.xyzx, -r3.wwww, r3.xyzx
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  rsq r3.w, r3.w
                  mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.xxxx, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r3.w, r2.x, cb0[24].x  // r3.w <- f
                  mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                  lt r4.x, l(0.000000), r3.w
                  div r2.x, r2.x, r3.w  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[23].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.x
                
                #line 343
                  mad r2.yzw, r3.xxyz, r2.xxxx, r2.yyzw
                
                #line 351
                endif 
                
                #line 341
                eq r2.x, cb0[27].z, l(1.000000)
                if_nz r2.x
                
                #line 236
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                
                #line 169
                  dp3 r3.w, v2.xyzx, -r3.xyzx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- diffuseFactor
                  lt r4.x, l(0.000000), r3.w
                  mul r5.x, r3.w, cb0[26].x  // r5.x <- diffuse
                  dp3 r3.w, r3.xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r3.xyz, v2.xyzx, -r3.wwww, r3.xyzx
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  rsq r3.w, r3.w
                  mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.xxxx, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r3.w, r2.x, cb0[27].x  // r3.w <- f
                  mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                  lt r4.x, l(0.000000), r3.w
                  div r2.x, r2.x, r3.w  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[26].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.x
                
                #line 343
                  mad r2.yzw, r3.xxyz, r2.xxxx, r2.yyzw
                
                #line 351
                endif 
                
                #line 341
                eq r2.x, cb0[30].z, l(1.000000)
                if_nz r2.x
                
                #line 236
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                
                #line 169
                  dp3 r3.w, v2.xyzx, -r3.xyzx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- diffuseFactor
                  lt r4.x, l(0.000000), r3.w
                  mul r5.x, r3.w, cb0[29].x  // r5.x <- diffuse
                  dp3 r3.w, r3.xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r3.xyz, v2.xyzx, -r3.wwww, r3.xyzx
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  rsq r3.w, r3.w
                  mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.xxxx, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r3.w, r2.x, cb0[30].x  // r3.w <- f
                  mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                  lt r4.x, l(0.000000), r3.w
                  div r2.x, r2.x, r3.w  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[29].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.x
                
                #line 343
                  mad r2.yzw, r3.xxyz, r2.xxxx, r2.yyzw
                
                #line 351
                endif 
                
                #line 341
                eq r2.x, cb0[33].z, l(1.000000)
                if_nz r2.x
                
                #line 236
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                
                #line 169
                  dp3 r3.w, v2.xyzx, -r3.xyzx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- diffuseFactor
                  lt r4.x, l(0.000000), r3.w
                  mul r5.x, r3.w, cb0[32].x  // r5.x <- diffuse
                  dp3 r3.w, r3.xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r3.xyz, v2.xyzx, -r3.wwww, r3.xyzx
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  rsq r3.w, r3.w
                  mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.xxxx, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r3.w, r2.x, cb0[33].x  // r3.w <- f
                  mad r3.w, -r3.w, r3.w, l(1.000000)  // r3.w <- denom
                  lt r4.x, l(0.000000), r3.w
                  div r2.x, r2.x, r3.w  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[32].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.x
                
                #line 343
                  mad r2.yzw, r3.xxyz, r2.xxxx, r2.yyzw
                
                #line 351
                endif 
                
                #line 357
                eq r2.x, cb0[37].z, l(1.000000)
                if_nz r2.x
                
                #line 269
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                  dp3 r3.w, r3.xyzx, cb0[36].xyzx  // r3.w <- spotFactor
                  add r4.x, -|r3.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r3.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r3.w|, l(-0.212114)
                  mad r4.y, r4.y, |r3.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r3.w, r3.w, -r3.w
                  and r3.w, r3.w, r4.z
                  mad r3.w, r4.y, r4.x, r3.w
                  mul r4.x, r3.w, l(57.295780)  // r4.x <- lightToSurfaceAngle
                  ge r4.x, cb0[36].w, r4.x
                
                #line 169
                  dp3 r4.y, v2.xyzx, -r3.xyzx
                  max r4.y, r4.y, l(0.000000)  // r4.y <- diffuseFactor
                  lt r4.z, l(0.000000), r4.y
                  mul r5.x, r4.y, cb0[35].x  // r5.x <- diffuse
                  dp3 r4.y, r3.xyzx, v2.xyzx
                  add r4.y, r4.y, r4.y
                  mad r3.xyz, v2.xyzx, -r4.yyyy, r3.xyzx
                  dp3 r4.y, r3.xyzx, r3.xyzx
                  rsq r4.y, r4.y
                  mul r3.xyz, r3.xyzx, r4.yyyy  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.zzzz, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.yzw, r0.xxyz, cb0[34].xxyz
                  add r3.x, r3.x, cb0[34].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.yzwy  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r4.y, r2.x, cb0[37].x  // r4.y <- f
                  mad r4.y, -r4.y, r4.y, l(1.000000)  // r4.y <- denom
                  lt r4.z, l(0.000000), r4.y
                  div r2.x, r2.x, r4.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[35].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.z
                
                #line 293
                  mad r3.w, -r3.w, l(57.295780), l(1.000000)
                  add r4.y, -cb0[36].w, l(1.000000)
                  div r3.w, r3.w, r4.y
                  add r3.w, -r3.w, l(1.000000)  // r3.w <- attenuationS
                  mul r2.x, r2.x, r3.w
                  mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  and r3.xyz, r3.xyzx, r4.xxxx
                
                #line 359
                  add r2.yzw, r2.yyzw, r3.xxyz
                
                #line 367
                endif 
                
                #line 357
                eq r2.x, cb0[41].z, l(1.000000)
                if_nz r2.x
                
                #line 269
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                  dp3 r3.w, r3.xyzx, cb0[40].xyzx  // r3.w <- spotFactor
                  add r4.x, -|r3.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r3.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r3.w|, l(-0.212114)
                  mad r4.y, r4.y, |r3.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r3.w, r3.w, -r3.w
                  and r3.w, r3.w, r4.z
                  mad r3.w, r4.y, r4.x, r3.w
                  mul r4.x, r3.w, l(57.295780)  // r4.x <- lightToSurfaceAngle
                  ge r4.x, cb0[40].w, r4.x
                
                #line 169
                  dp3 r4.y, v2.xyzx, -r3.xyzx
                  max r4.y, r4.y, l(0.000000)  // r4.y <- diffuseFactor
                  lt r4.z, l(0.000000), r4.y
                  mul r5.x, r4.y, cb0[39].x  // r5.x <- diffuse
                  dp3 r4.y, r3.xyzx, v2.xyzx
                  add r4.y, r4.y, r4.y
                  mad r3.xyz, v2.xyzx, -r4.yyyy, r3.xyzx
                  dp3 r4.y, r3.xyzx, r3.xyzx
                  rsq r4.y, r4.y
                  mul r3.xyz, r3.xyzx, r4.yyyy  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.zzzz, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.yzw, r0.xxyz, cb0[38].xxyz
                  add r3.x, r3.x, cb0[38].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.yzwy  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r4.y, r2.x, cb0[41].x  // r4.y <- f
                  mad r4.y, -r4.y, r4.y, l(1.000000)  // r4.y <- denom
                  lt r4.z, l(0.000000), r4.y
                  div r2.x, r2.x, r4.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[39].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.z
                
                #line 293
                  mad r3.w, -r3.w, l(57.295780), l(1.000000)
                  add r4.y, -cb0[40].w, l(1.000000)
                  div r3.w, r3.w, r4.y
                  add r3.w, -r3.w, l(1.000000)  // r3.w <- attenuationS
                  mul r2.x, r2.x, r3.w
                  mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  and r3.xyz, r3.xyzx, r4.xxxx
                
                #line 359
                  add r2.yzw, r2.yyzw, r3.xxyz
                
                #line 367
                endif 
                
                #line 357
                eq r2.x, cb0[45].z, l(1.000000)
                if_nz r2.x
                
                #line 269
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                  dp3 r3.w, r3.xyzx, cb0[44].xyzx  // r3.w <- spotFactor
                  add r4.x, -|r3.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r3.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r3.w|, l(-0.212114)
                  mad r4.y, r4.y, |r3.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r3.w, r3.w, -r3.w
                  and r3.w, r3.w, r4.z
                  mad r3.w, r4.y, r4.x, r3.w
                  mul r4.x, r3.w, l(57.295780)  // r4.x <- lightToSurfaceAngle
                  ge r4.x, cb0[44].w, r4.x
                
                #line 169
                  dp3 r4.y, v2.xyzx, -r3.xyzx
                  max r4.y, r4.y, l(0.000000)  // r4.y <- diffuseFactor
                  lt r4.z, l(0.000000), r4.y
                  mul r5.x, r4.y, cb0[43].x  // r5.x <- diffuse
                  dp3 r4.y, r3.xyzx, v2.xyzx
                  add r4.y, r4.y, r4.y
                  mad r3.xyz, v2.xyzx, -r4.yyyy, r3.xyzx
                  dp3 r4.y, r3.xyzx, r3.xyzx
                  rsq r4.y, r4.y
                  mul r3.xyz, r3.xyzx, r4.yyyy  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 181
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.zzzz, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.yzw, r0.xxyz, cb0[42].xxyz
                  add r3.x, r3.x, cb0[42].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.yzwy  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 109
                  div r4.y, r2.x, cb0[45].x  // r4.y <- f
                  mad r4.y, -r4.y, r4.y, l(1.000000)  // r4.y <- denom
                  lt r4.z, l(0.000000), r4.y
                  div r2.x, r2.x, r4.y  // r2.x <- d
                  add r2.x, r2.x, l(1.000000)  // r2.x <- dn
                  mul r2.x, r2.x, r2.x
                  div r2.x, cb0[43].x, r2.x  // r2.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r2.x, r2.x, r4.z
                
                #line 293
                  mad r3.w, -r3.w, l(57.295780), l(1.000000)
                  add r4.y, -cb0[44].w, l(1.000000)
                  div r3.w, r3.w, r4.y
                  add r3.w, -r3.w, l(1.000000)  // r3.w <- attenuationS
                  mul r2.x, r2.x, r3.w
                  mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  and r3.xyz, r3.xyzx, r4.xxxx
                
                #line 359
                  add r2.yzw, r2.yyzw, r3.xxyz
                
                #line 367
                endif 
                
                #line 357
                eq r2.x, cb0[49].z, l(1.000000)
                if_nz r2.x
                
                #line 269
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  sqrt r2.x, r2.x  // r2.x <- distance
                  div r3.xyz, r3.xyzx, r2.xxxx
                  dp3 r3.w, r3.xyzx, cb0[48].xyzx  // r3.w <- spotFactor
                  add r4.x, -|r3.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r3.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r3.w|, l(-0.212114)
                  mad r4.y, r4.y, |r3.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r3.w, r3.w, -r3.w
                  and r3.w, r3.w, r4.z
                  mad r3.w, r4.y, r4.x, r3.w
                  mul r4.x, r3.w, l(57.295780)  // r4.x <- lightToSurfaceAngle
                  ge r4.x, cb0[48].w, r4.x
                
                #line 169
                  dp3 r4.y, v2.xyzx, -r3.xyzx
                  max r4.y, r4.y, l(0.000000)  // r4.y <- diffuseFactor
                  lt r4.z, l(0.000000), r4.y
                  mul r5.x, r4.y, cb0[47].x  // r5.x <- diffuse
                  dp3 r4.y, r3.xyzx, v2.xyzx
                  add r4.y, r4.y, r4.y
                  mad r3.xyz, v2.xyzx, -r4.yyyy, r3.xyzx
                  dp3 r4.y, r3.xyzx, r3.xyzx
                  rsq r4.y, r4.y
                  mul r3.xyz, r3.xyzx, r4.yyyy  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r1.x, r1.xyzx, r3.xyzx
                  max r1.x, r1.x, l(0.000000)  // r1.x <- specularFactor
                  lt r1.y, l(0.000000), r1.x
                
                #line 181
                  max r1.z, cb1[1].y, l(1.000000)
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x  // r1.x <- specularFactor
                  mul r1.x, r1.x, cb1[1].x  // r1.x <- specular
                  and r5.y, r1.x, r1.y  // r5.y <- specular
                  and r1.xy, r4.zzzz, r5.xyxx  // r1.x <- diffuse; r1.y <- specular
                  mul r0.xyz, r0.xyzx, cb0[46].xyzx
                  add r1.x, r1.x, cb0[46].w
                  add r1.x, r1.y, r1.x
                  mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 109
                  div r1.x, r2.x, cb0[49].x  // r1.x <- f
                  mad r1.x, -r1.x, r1.x, l(1.000000)  // r1.x <- denom
                  lt r1.y, l(0.000000), r1.x
                  div r1.x, r2.x, r1.x  // r1.x <- d
                  add r1.x, r1.x, l(1.000000)  // r1.x <- dn
                  mul r1.x, r1.x, r1.x
                  div r1.x, cb0[47].x, r1.x  // r1.x <- <CalcSphericAttenuation return value>
                
                #line 121
                  and r1.x, r1.x, r1.y
                
                #line 293
                  mad r1.y, -r3.w, l(57.295780), l(1.000000)
                  add r1.z, -cb0[48].w, l(1.000000)
                  div r1.y, r1.y, r1.z
                  add r1.y, -r1.y, l(1.000000)  // r1.y <- attenuationS
                  mul r1.x, r1.y, r1.x
                  mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  and r0.xyz, r0.xyzx, r4.xxxx
                
                #line 359
                  add r2.yzw, r0.xxyz, r2.yyzw
                
                #line 367
                endif 
                
                #line 172 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                sqrt r0.x, r1.w  // r0.x <- distToEye
                lt r0.y, l(0.000000), cb0[50].y
                
                #line 147 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.z, r0.x, -cb0[50].x
                div_sat r0.z, r0.z, cb0[50].y  // r0.z <- fogLerp
                add r1.xyz, -r2.yzwy, cb0[51].xyzx
                mad r1.xyz, r0.zzzz, r1.xyzx, r2.yzwy  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z
                
                #line 177 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                movc o0.xyz, r0.yyyy, r1.xyzx, r2.yzwy
                div r0.x, r0.x, cb0[52].y
                mad r0.x, -r0.x, l(0.500000), l(1.000000)
                mul o0.w, r0.x, r0.w
                ret 
                // Approximately 609 instruction slots used
                            
            };
        }

    }

    technique11 DeferredBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 57 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mad o0.y, v1.y, l(0.450000), v0.y
                
                #line 60
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 4 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float4x4 gLightViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //       float Pad1;                    // Offset:  248
                //       float Pad2;                    // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   144 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //       float Pad1;                    // Offset:  396
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   192 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //       float Pad1;                    // Offset:  604
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   256 [unused]
                //   float gFogStart;                   // Offset:  800 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  804 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float gStartRadius;                // Offset:  832 Size:     4 [unused]
                //   float gEndRadius;                  // Offset:  836 Size:     4
                //   float3 gWindDirection;             // Offset:  848 Size:    12
                //   float gWindStrength;               // Offset:  860 Size:     4
                //   float gTotalTime;                  // Offset:  864 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureRandom                    texture  float4          1d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // SV_PrimitiveID           0   x           4   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[55], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture1d (float,float,float,float) t0
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output_sgv o4.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y; 
                //   x0 <- v[1].x
                //
                #line 66 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[12].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[52].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[52].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 71
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 79
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mov x0[1].xyz, r1.xyzx
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mov x0[3].xyz, r0.xyzx
                  lt r0.w, l(0.000000), cb0[53].w
                  if_nz r0.w
                
                #line 45
                    add r0.w, r1.y, r1.x
                    add r0.w, r1.z, r0.w
                    mad r0.w, r0.w, l(0.100000), cb0[54].x
                    sincos r0.w, null, r0.w
                    mad r4.xyz, cb0[53].xyzx, cb0[53].wwww, r0.wwww  // r4.x <- vWind.x; r4.y <- vWind.y; r4.z <- vWind.z
                    utof r0.w, vPrim
                    sample_l_indexable(texture1d)(float,float,float,float) r0.w, r0.w, t0.yzwx, s0, l(0.000000)  // r0.w <- sRandom
                    min r0.w, r0.w, l(1.000000)
                    mad r1.xyz, r4.xyzx, r0.wwww, r1.xyzx  // r1.x <- <CalcWindTranslation return value>.x; r1.y <- <CalcWindTranslation return value>.y; r1.z <- <CalcWindTranslation return value>.z
                
                #line 86
                    mov x0[1].xyz, r1.xyzx
                
                #line 45
                    add r1.x, r0.y, r0.x
                    add r1.x, r0.z, r1.x
                    mad r1.x, r1.x, l(0.100000), cb0[54].x
                    sincos r1.x, null, r1.x
                    mad r1.xyz, cb0[53].xyzx, cb0[53].wwww, r1.xxxx  // r1.x <- vWind.x; r1.y <- vWind.y; r1.z <- vWind.z
                
                #line 49
                    mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx  // r0.x <- <CalcWindTranslation return value>.x; r0.y <- <CalcWindTranslation return value>.y; r0.z <- <CalcWindTranslation return value>.z
                
                #line 87
                    mov x0[3].xyz, r0.xyzx
                  endif 
                
                #line 95
                  mov r2.w, l(1.000000)
                  dp4 r0.x, r2.xyzw, cb0[4].xyzw  // r0.x <- gout.positionHomogeneous.x
                  dp4 r0.y, r2.xyzw, cb0[5].xyzw  // r0.y <- gout.positionHomogeneous.y
                  dp4 r0.z, r2.xyzw, cb0[6].xyzw  // r0.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r2.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                  dp4 r1.x, r2.xyzw, cb0[0].xyzw  // r1.x <- gout.positionWorld.x
                  dp4 r1.y, r2.xyzw, cb0[1].xyzw  // r1.y <- gout.positionWorld.y
                  dp4 r1.z, r2.xyzw, cb0[2].xyzw  // r1.z <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r0.x
                  mov o0.y, r0.y
                  mov o0.z, r0.z
                  mov o0.w, r0.w
                  mov o1.x, r1.x
                  mov o1.y, r1.y
                  mov o1.z, r1.z
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[0].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                
                #line 95
                  mov r0.xyz, x0[1].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- gout.positionHomogeneous.w
                  dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- gout.positionWorld.x
                  dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- gout.positionWorld.y
                  dp4 r0.x, r0.xyzw, cb0[2].xyzw  // r0.x <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.x, r2.x
                  mov o1.y, r2.y
                  mov o1.z, r0.x
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[1].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                
                #line 95
                  mov r3.w, l(1.000000)
                  dp4 r0.x, r3.xyzw, cb0[4].xyzw  // r0.x <- gout.positionHomogeneous.x
                  dp4 r0.y, r3.xyzw, cb0[5].xyzw  // r0.y <- gout.positionHomogeneous.y
                  dp4 r0.z, r3.xyzw, cb0[6].xyzw  // r0.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r3.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionWorld.x
                  dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- gout.positionWorld.y
                  dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r0.x
                  mov o0.y, r0.y
                  mov o0.z, r0.z
                  mov o0.w, r0.w
                  mov o1.x, r1.x
                  mov o1.y, r1.y
                  mov o1.z, r1.z
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[2].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                
                #line 95
                  mov r0.xyz, x0[3].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- gout.positionHomogeneous.w
                  dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- gout.positionWorld.x
                  dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- gout.positionWorld.y
                  dp4 r0.x, r0.xyzw, cb0[2].xyzw  // r0.x <- gout.positionWorld.z
                
                #line 101
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.x, r2.x
                  mov o1.y, r2.y
                  mov o1.z, r0.x
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[3].xyxx
                  mov o4.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 122 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //   uint gTextureCount;                // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // SV_PrimitiveID           0   x           4   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps_sgv v4.x, primitive_id
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.primitiveID; 
                //   o2.x <- <PSDeferredBillboard return value>.depth.x; o2.y <- <PSDeferredBillboard return value>.depth.y; o2.z <- <PSDeferredBillboard return value>.depth.z; o2.w <- <PSDeferredBillboard return value>.depth.w; 
                //   o1.x <- <PSDeferredBillboard return value>.normal.x; o1.y <- <PSDeferredBillboard return value>.normal.y; o1.z <- <PSDeferredBillboard return value>.normal.z; o1.w <- <PSDeferredBillboard return value>.normal.w; 
                //   o0.x <- <PSDeferredBillboard return value>.color.x; o0.y <- <PSDeferredBillboard return value>.color.y; o0.z <- <PSDeferredBillboard return value>.color.z; o0.w <- <PSDeferredBillboard return value>.color.w
                //
                #line 185 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v4.x, cb1[1].z
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.x, r0.w, l(-0.050000)
                
                #line 193
                mov o0.xyzw, r0.xyzw
                
                #line 187
                lt r0.x, r1.x, l(0.000000)
                discard_nz r0.x
                
                #line 193
                mov o1.xyz, v2.xyzx
                mov o1.w, cb1[1].y
                mov o2.xyz, v1.xyzx
                mov o2.w, cb1[1].x
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMapBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 57 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mad o0.y, v1.y, l(0.450000), v0.y
                
                #line 60
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 4 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:   64 Size:    64
                //   float4x4 gLightViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //       float Pad1;                    // Offset:  248
                //       float Pad2;                    // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   144 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //       float Pad1;                    // Offset:  396
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   192 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //       float Pad1;                    // Offset:  604
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   256 [unused]
                //   float gFogStart;                   // Offset:  800 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  804 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float gStartRadius;                // Offset:  832 Size:     4 [unused]
                //   float gEndRadius;                  // Offset:  836 Size:     4
                //   float3 gWindDirection;             // Offset:  848 Size:    12
                //   float gWindStrength;               // Offset:  860 Size:     4
                //   float gTotalTime;                  // Offset:  864 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureRandom                    texture  float4          1d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // SV_PrimitiveID           0   x           3   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[55], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture1d (float,float,float,float) t0
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_output_sgv o3.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y; 
                //   x0 <- v[1].x
                //
                #line 108 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[12].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[52].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[52].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 113
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 121
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // r2.x <- gout.depth.x; r2.y <- gout.depth.y; r2.z <- gout.depth.z
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mov x0[1].xyz, r1.xyzx
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r3.x <- gout.depth.x; r3.y <- gout.depth.y; r3.z <- gout.depth.z
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mov x0[3].xyz, r0.xyzx
                  lt r0.w, l(0.000000), cb0[53].w
                  if_nz r0.w
                
                #line 45
                    add r0.w, r1.y, r1.x
                    add r0.w, r1.z, r0.w
                    mad r0.w, r0.w, l(0.100000), cb0[54].x
                    sincos r0.w, null, r0.w
                    mad r4.xyz, cb0[53].xyzx, cb0[53].wwww, r0.wwww  // r4.x <- vWind.x; r4.y <- vWind.y; r4.z <- vWind.z
                    utof r0.w, vPrim
                    sample_l_indexable(texture1d)(float,float,float,float) r0.w, r0.w, t0.yzwx, s0, l(0.000000)  // r0.w <- sRandom
                    min r0.w, r0.w, l(1.000000)
                    mad r1.xyz, r4.xyzx, r0.wwww, r1.xyzx  // r1.x <- <CalcWindTranslation return value>.x; r1.y <- <CalcWindTranslation return value>.y; r1.z <- <CalcWindTranslation return value>.z
                
                #line 128
                    mov x0[1].xyz, r1.xyzx
                
                #line 45
                    add r1.x, r0.y, r0.x
                    add r1.x, r0.z, r1.x
                    mad r1.x, r1.x, l(0.100000), cb0[54].x
                    sincos r1.x, null, r1.x
                    mad r1.xyz, cb0[53].xyzx, cb0[53].wwww, r1.xxxx  // r1.x <- vWind.x; r1.y <- vWind.y; r1.z <- vWind.z
                
                #line 49
                    mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx  // r0.x <- <CalcWindTranslation return value>.x; r0.y <- <CalcWindTranslation return value>.y; r0.z <- <CalcWindTranslation return value>.z
                
                #line 129
                    mov x0[3].xyz, r0.xyzx
                  endif 
                
                #line 137
                  mov r2.w, l(1.000000)
                  dp4 r0.x, r2.xyzw, cb0[4].xyzw  // r0.x <- gout.positionHomogeneous.x
                  dp4 r0.y, r2.xyzw, cb0[5].xyzw  // r0.y <- gout.positionHomogeneous.y
                  dp4 r0.z, r2.xyzw, cb0[6].xyzw  // r0.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r2.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                
                #line 142
                  mov o0.x, r0.x
                  mov o0.y, r0.y
                  mov o0.z, r0.z
                  mov o0.w, r0.w
                  mov o1.xyz, r2.xyzx
                  mov o1.w, l(1.000000)
                  mov o2.xy, cb2[0].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 137
                  mov r0.xyz, x0[1].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r0.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                
                #line 142
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.w
                  mov o1.xyz, r0.xyzx
                  mov o1.w, l(1.000000)
                  mov o2.xy, cb2[1].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 137
                  mov r3.w, l(1.000000)
                  dp4 r0.x, r3.xyzw, cb0[4].xyzw  // r0.x <- gout.positionHomogeneous.x
                  dp4 r0.y, r3.xyzw, cb0[5].xyzw  // r0.y <- gout.positionHomogeneous.y
                  dp4 r0.z, r3.xyzw, cb0[6].xyzw  // r0.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r3.xyzw, cb0[7].xyzw
                
                #line 142
                  mov o0.x, r0.x
                  mov o0.y, r0.y
                  mov o0.z, r0.z
                  mov o0.w, r0.w
                  mov o1.xyz, r3.xyzx
                  mov o1.w, l(1.000000)
                  mov o2.xy, cb2[2].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                
                #line 137
                  mov r0.xyz, x0[3].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r0.w, r0.xyzw, cb0[7].xyzw  // r0.w <- gout.positionHomogeneous.w
                
                #line 142
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.w
                  mov o1.xyz, r0.xyzx
                  mov o1.w, l(1.000000)
                  mov o2.xy, cb2[3].xyxx
                  mov o3.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 102 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24 [unused]
                //   uint gTextureCount;                // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyzw        1     NONE   float     zw
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // SV_PrimitiveID           0   x           3   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.zw
                dcl_input_ps linear v2.xy
                dcl_input_ps_sgv v3.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.depth.x; v1.y <- input.depth.y; v1.z <- input.depth.z; v1.w <- input.depth.w; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.primitiveID; 
                //   o0.x <- <PSSMBillboard return value>.x; o0.y <- <PSSMBillboard return value>.y; o0.z <- <PSSMBillboard return value>.z; o0.w <- <PSSMBillboard return value>.w
                //
                #line 197 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v3.x, cb1[1].z
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v2.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.x, r0.xyzx, t0.wxyz, s0  // r0.x <- textureColor.w
                lt r0.x, l(0.050000), r0.x
                if_nz r0.x
                  div o0.xyz, v1.zzzz, v1.wwww
                  mov o0.w, l(1.000000)
                  ret 
                else 
                
                #line 208
                  discard_nz l(-1)
                  mov o0.xyzw, l(0,0,0,0)  // o0.x <- <PSSMBillboard return value>.x; o0.y <- <PSSMBillboard return value>.y; o0.z <- <PSSMBillboard return value>.z; o0.w <- <PSSMBillboard return value>.w
                  ret 
                endif 
                ret 
                // Approximately 15 instruction slots used
                            
            };
        }

    }

}

