//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorldViewProjection;      // Offset:    0, size:   64
    float4x4 gShadowTransform;          // Offset:   64, size:   64
    DirectionalLight gDirLights[3];     // Offset:  128, size:  132
    PointLight gPointLights[4];         // Offset:  272, size:  184
    SpotLight gSpotLights[4];           // Offset:  464, size:  256
    float3  gEyePositionWorld;          // Offset:  720, size:   12
    float   gFogStart;                  // Offset:  732, size:    4
    float   gFogRange;                  // Offset:  736, size:    4
    float4  gFogColor;                  // Offset:  752, size:   16
    float   gEnableShadows;             // Offset:  768, size:    4
    float   gRadius;                    // Offset:  772, size:    4
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   24
    uint    gTextureCount;              // Offset:   24, size:    4
}

cbuffer cbFixed : register(b2)
{
    float2  gQuadTexC[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 18 local object(s)
//
RasterizerState RasterizerDefault
{
};
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDefault
{
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendDefault
{
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerState SamplerPoint
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2DArray gTextureArray;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 ForwardBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 45 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add o0.xyz, v0.xyzx, l(0.000000, -0.050000, 0.000000, 0.000000)
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  128
                //       float Ambient;                 // Offset:  140
                //       float Diffuse;                 // Offset:  144
                //       float3 Direction;              // Offset:  148
                //       float Enabled;                 // Offset:  160
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  272
                //       float Ambient;                 // Offset:  284
                //       float Diffuse;                 // Offset:  288
                //       float3 Position;               // Offset:  292
                //       float Radius;                  // Offset:  304
                //       float Enabled;                 // Offset:  308
                //
                //   } gPointLights[4];                 // Offset:  272 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  464
                //       float Ambient;                 // Offset:  476
                //       float Diffuse;                 // Offset:  480
                //       float3 Position;               // Offset:  484
                //       float3 Direction;              // Offset:  496
                //       float Spot;                    // Offset:  508
                //       float AttenuationConstant;     // Offset:  512
                //       float AttenuationLinear;       // Offset:  516
                //       float AttenuationExp;          // Offset:  520
                //       float Enabled;                 // Offset:  524
                //
                //   } gSpotLights[4];                  // Offset:  464 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  720 Size:    12
                //   float gFogStart;                   // Offset:  732 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  736 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  752 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  768 Size:     4 [unused]
                //   float gRadius;                     // Offset:  772 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[49], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 6
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_output_sgv o5.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y
                //
                #line 51 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[45].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[48].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[48].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 56
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 64
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // r2.x <- gout.positionWorld.x; r2.y <- gout.positionWorld.y; r2.z <- gout.positionWorld.z
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // r1.x <- gout.positionWorld.x; r1.y <- gout.positionWorld.y; r1.z <- gout.positionWorld.z
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r3.x <- gout.positionWorld.x; r3.y <- gout.positionWorld.y; r3.z <- gout.positionWorld.z
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r0.x <- gout.positionWorld.x; r0.y <- gout.positionWorld.y; r0.z <- gout.positionWorld.z
                
                #line 74
                  mov r2.w, l(1.000000)
                  dp4 r4.x, r2.xyzw, cb0[0].xyzw  // r4.x <- gout.positionHomogeneous.x
                  dp4 r4.y, r2.xyzw, cb0[1].xyzw  // r4.y <- gout.positionHomogeneous.y
                  dp4 r4.z, r2.xyzw, cb0[2].xyzw  // r4.z <- gout.positionHomogeneous.z
                  dp4 r4.w, r2.xyzw, cb0[3].xyzw  // r4.w <- gout.positionHomogeneous.w
                  dp4 r5.x, r2.xyzw, cb0[4].xyzw  // r5.x <- gout.shadowHomogeneous.x
                  dp4 r5.y, r2.xyzw, cb0[5].xyzw  // r5.y <- gout.shadowHomogeneous.y
                  dp4 r5.z, r2.xyzw, cb0[6].xyzw  // r5.z <- gout.shadowHomogeneous.z
                  dp4 r2.w, r2.xyzw, cb0[7].xyzw  // r2.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r4.x
                  mov o0.y, r4.y
                  mov o0.z, r4.z
                  mov o0.w, r4.w
                  mov o1.xyz, r2.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[0].xyxx
                  mov o4.x, r5.x
                  mov o4.y, r5.y
                  mov o4.z, r5.z
                  mov o4.w, r2.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 74
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- gout.positionHomogeneous.x
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- gout.positionHomogeneous.y
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw  // r2.z <- gout.positionHomogeneous.z
                  dp4 r2.w, r1.xyzw, cb0[3].xyzw  // r2.w <- gout.positionHomogeneous.w
                  dp4 r4.x, r1.xyzw, cb0[4].xyzw  // r4.x <- gout.shadowHomogeneous.x
                  dp4 r4.y, r1.xyzw, cb0[5].xyzw  // r4.y <- gout.shadowHomogeneous.y
                  dp4 r4.z, r1.xyzw, cb0[6].xyzw  // r4.z <- gout.shadowHomogeneous.z
                  dp4 r1.w, r1.xyzw, cb0[7].xyzw  // r1.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r2.x
                  mov o0.y, r2.y
                  mov o0.z, r2.z
                  mov o0.w, r2.w
                  mov o1.xyz, r1.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[1].xyxx
                  mov o4.x, r4.x
                  mov o4.y, r4.y
                  mov o4.z, r4.z
                  mov o4.w, r1.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 74
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r3.xyzw, cb0[3].xyzw  // r1.w <- gout.positionHomogeneous.w
                  dp4 r2.x, r3.xyzw, cb0[4].xyzw  // r2.x <- gout.shadowHomogeneous.x
                  dp4 r2.y, r3.xyzw, cb0[5].xyzw  // r2.y <- gout.shadowHomogeneous.y
                  dp4 r2.z, r3.xyzw, cb0[6].xyzw  // r2.z <- gout.shadowHomogeneous.z
                  dp4 r2.w, r3.xyzw, cb0[7].xyzw  // r2.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyz, r3.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[2].xyxx
                  mov o4.x, r2.x
                  mov o4.y, r2.y
                  mov o4.z, r2.z
                  mov o4.w, r2.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 74
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw
                  dp4 r1.w, r0.xyzw, cb0[3].xyzw
                  dp4 r2.x, r0.xyzw, cb0[4].xyzw
                  dp4 r2.y, r0.xyzw, cb0[5].xyzw
                  dp4 r2.z, r0.xyzw, cb0[6].xyzw
                  dp4 r0.w, r0.xyzw, cb0[7].xyzw  // r0.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyz, r0.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[3].xyxx
                  mov o4.x, r2.x
                  mov o4.y, r2.y
                  mov o4.z, r2.z
                  mov o4.w, r0.w
                  mov o5.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 110 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  128
                //       float Ambient;                 // Offset:  140
                //       float Diffuse;                 // Offset:  144
                //       float3 Direction;              // Offset:  148
                //       float Enabled;                 // Offset:  160
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  272
                //       float Ambient;                 // Offset:  284
                //       float Diffuse;                 // Offset:  288
                //       float3 Position;               // Offset:  292
                //       float Radius;                  // Offset:  304
                //       float Enabled;                 // Offset:  308
                //
                //   } gPointLights[4];                 // Offset:  272 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  464
                //       float Ambient;                 // Offset:  476
                //       float Diffuse;                 // Offset:  480
                //       float3 Position;               // Offset:  484
                //       float3 Direction;              // Offset:  496
                //       float Spot;                    // Offset:  508
                //       float AttenuationConstant;     // Offset:  512
                //       float AttenuationLinear;       // Offset:  516
                //       float AttenuationExp;          // Offset:  520
                //       float Enabled;                 // Offset:  524
                //
                //   } gSpotLights[4];                  // Offset:  464 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  720 Size:    12
                //   float gFogStart;                   // Offset:  732 Size:     4
                //   float gFogRange;                   // Offset:  736 Size:     4
                //   float4 gFogColor;                  // Offset:  752 Size:    16
                //   float gEnableShadows;              // Offset:  768 Size:     4 [unused]
                //   float gRadius;                     // Offset:  772 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //   uint gTextureCount;                // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float       
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[48], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps_sgv v5.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v5.x <- input.primitiveID; 
                //   o0.x <- <PSForwardBillboard return value>.x; o0.y <- <PSForwardBillboard return value>.y; o0.z <- <PSForwardBillboard return value>.z; o0.w <- <PSForwardBillboard return value>.w
                //
                #line 120 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v5.x, cb1[1].z
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.x, r0.xyzx, t0.wxyz, s0  // r0.x <- textureColor.w
                add r0.y, r0.x, l(-0.050000)
                lt r0.y, r0.y, l(0.000000)
                discard_nz r0.y
                add r0.yzw, -v1.xxyz, cb0[45].xxyz
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.y, r1.x
                mul r0.yzw, r0.yyzw, r1.yyyy  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.y, cb0[10].x, l(1.000000)
                
                #line 154
                dp3 r1.z, v2.xyzx, -cb0[9].yzwy  // r1.z <- diffuseFactor
                lt r1.w, l(0.000000), r1.z
                mul r2.xyz, cb0[8].xyzx, cb0[9].xxxx
                mul r2.xyz, r1.zzzz, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.z, cb0[9].yzwy, v2.xyzx
                add r1.z, r1.z, r1.z
                mad r3.xyz, v2.xyzx, -r1.zzzz, cb0[9].yzwy
                dp3 r1.z, r3.xyzx, r3.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.z, r0.yzwy, r3.xyzx  // r1.z <- specFactor
                lt r2.w, l(0.000000), r1.z
                
                #line 165
                max r3.x, cb1[1].y, l(1.000000)
                log r1.z, |r1.z|
                mul r1.z, r1.z, r3.x
                exp r1.z, r1.z  // r1.z <- specFactor
                mul r3.yzw, cb0[8].xxyz, cb1[1].xxxx
                mul r3.yzw, r1.zzzz, r3.yyzw  // r3.y <- specularColor.x; r3.z <- specularColor.y; r3.w <- specularColor.z
                and r3.yzw, r2.wwww, r3.yyzw
                and r2.xyz, r1.wwww, r2.xyzx
                and r3.yzw, r1.wwww, r3.yyzw
                mad r2.xyz, cb0[8].xyzx, cb0[8].wwww, r2.xyzx
                add r2.xyz, r3.yzwy, r2.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 346
                and r1.yzw, r1.yyyy, r2.xxyz  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[13].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[12].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[11].xxyz, cb0[12].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[12].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[12].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[11].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[11].xxyz, cb0[11].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[16].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[15].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[14].xxyz, cb0[15].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[15].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[15].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[14].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[14].xxyz, cb0[14].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 352
                eq r2.x, cb0[19].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[18].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[17].xyzx, cb0[18].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[17].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[17].xxyz, cb0[17].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[19].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[18].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[22].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[21].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[20].xyzx, cb0[21].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[20].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[20].xxyz, cb0[20].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[22].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[21].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[25].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[24].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[23].xyzx, cb0[24].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[23].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[23].xxyz, cb0[23].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[25].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[24].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[28].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[27].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[26].xyzx, cb0[27].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[26].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[26].xxyz, cb0[26].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[28].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[27].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 367
                eq r2.x, cb0[32].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[30].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[31].xyzx  // r2.w <- spot
                  lt r2.w, cb0[31].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[32].y, r2.y, cb0[32].x
                  mad r2.x, r2.x, cb0[32].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[31].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[29].xxyz, cb0[30].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[31].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[31].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[29].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[29].xxyz, cb0[29].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[36].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[34].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[35].xyzx  // r2.w <- spot
                  lt r2.w, cb0[35].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[36].y, r2.y, cb0[36].x
                  mad r2.x, r2.x, cb0[36].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[35].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[33].xxyz, cb0[34].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[35].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[35].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[33].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[33].xxyz, cb0[33].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[40].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[37].xxyz, cb0[38].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[37].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[37].xxyz, cb0[37].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[44].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[41].xxyz, cb0[42].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.y, r0.yzwy, r4.xyzx  // r0.y <- specFactor
                  lt r0.z, l(0.000000), r0.y
                
                #line 165
                  log r0.y, |r0.y|
                  mul r0.y, r0.y, r3.x
                  exp r0.y, r0.y  // r0.y <- specFactor
                  mul r4.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.yzw, r0.zzzz, r4.xxyz  // r0.y <- specularColor.x; r0.z <- specularColor.y; r0.w <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.yzwy  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  and r0.yzw, r0.yyzw, r2.zzzz
                  mad r3.xyz, cb0[41].xyzx, cb0[41].wwww, r3.xyzx
                  add r0.yzw, r0.yyzw, r3.xxyz  // r0.y <- <ComputeLight return value>.x; r0.z <- <ComputeLight return value>.y; r0.w <- <ComputeLight return value>.z
                
                #line 272
                  div r0.yzw, r0.yyzw, r2.xxxx  // r0.y <- <ComputeSpotLight return value>.x; r0.z <- <ComputeSpotLight return value>.y; r0.w <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.yzw, r0.yyzw, r2.wwww
                
                #line 369
                  add r1.yzw, r0.yyzw, r1.yyzw
                
                #line 376
                endif 
                
                #line 140 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                lt r0.y, l(0.000000), cb0[46].x
                
                #line 143
                sqrt r0.z, r1.x  // r0.z <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.z, r0.z, -cb0[45].w
                div_sat r0.z, r0.z, cb0[46].x  // r0.z <- fogLerp
                add r2.xyz, -r1.yzwy, cb0[47].xyzx
                mad r2.xyz, r0.zzzz, r2.xyzx, r1.yzwy  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z
                
                #line 146 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                movc o0.xyz, r0.yyyy, r2.xyzx, r1.yzwy
                mul o0.w, r0.x, cb1[0].w
                ret 
                // Approximately 391 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 DeferredBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 45 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add o0.xyz, v0.xyzx, l(0.000000, -0.050000, 0.000000, 0.000000)
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  128
                //       float Ambient;                 // Offset:  140
                //       float Diffuse;                 // Offset:  144
                //       float3 Direction;              // Offset:  148
                //       float Enabled;                 // Offset:  160
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  272
                //       float Ambient;                 // Offset:  284
                //       float Diffuse;                 // Offset:  288
                //       float3 Position;               // Offset:  292
                //       float Radius;                  // Offset:  304
                //       float Enabled;                 // Offset:  308
                //
                //   } gPointLights[4];                 // Offset:  272 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  464
                //       float Ambient;                 // Offset:  476
                //       float Diffuse;                 // Offset:  480
                //       float3 Position;               // Offset:  484
                //       float3 Direction;              // Offset:  496
                //       float Spot;                    // Offset:  508
                //       float AttenuationConstant;     // Offset:  512
                //       float AttenuationLinear;       // Offset:  516
                //       float AttenuationExp;          // Offset:  520
                //       float Enabled;                 // Offset:  524
                //
                //   } gSpotLights[4];                  // Offset:  464 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  720 Size:    12
                //   float gFogStart;                   // Offset:  732 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  736 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  752 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  768 Size:     4 [unused]
                //   float gRadius;                     // Offset:  772 Size:     4
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[49], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 6
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_output_sgv o5.x, primitive_id
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y
                //
                #line 51 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[45].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[48].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[48].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 56
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 64
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // r2.x <- gout.positionWorld.x; r2.y <- gout.positionWorld.y; r2.z <- gout.positionWorld.z
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // r1.x <- gout.positionWorld.x; r1.y <- gout.positionWorld.y; r1.z <- gout.positionWorld.z
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r3.x <- gout.positionWorld.x; r3.y <- gout.positionWorld.y; r3.z <- gout.positionWorld.z
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // r0.x <- gout.positionWorld.x; r0.y <- gout.positionWorld.y; r0.z <- gout.positionWorld.z
                
                #line 74
                  mov r2.w, l(1.000000)
                  dp4 r4.x, r2.xyzw, cb0[0].xyzw  // r4.x <- gout.positionHomogeneous.x
                  dp4 r4.y, r2.xyzw, cb0[1].xyzw  // r4.y <- gout.positionHomogeneous.y
                  dp4 r4.z, r2.xyzw, cb0[2].xyzw  // r4.z <- gout.positionHomogeneous.z
                  dp4 r4.w, r2.xyzw, cb0[3].xyzw  // r4.w <- gout.positionHomogeneous.w
                  dp4 r5.x, r2.xyzw, cb0[4].xyzw  // r5.x <- gout.shadowHomogeneous.x
                  dp4 r5.y, r2.xyzw, cb0[5].xyzw  // r5.y <- gout.shadowHomogeneous.y
                  dp4 r5.z, r2.xyzw, cb0[6].xyzw  // r5.z <- gout.shadowHomogeneous.z
                  dp4 r2.w, r2.xyzw, cb0[7].xyzw  // r2.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r4.x
                  mov o0.y, r4.y
                  mov o0.z, r4.z
                  mov o0.w, r4.w
                  mov o1.xyz, r2.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[0].xyxx
                  mov o4.x, r5.x
                  mov o4.y, r5.y
                  mov o4.z, r5.z
                  mov o4.w, r2.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 74
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- gout.positionHomogeneous.x
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- gout.positionHomogeneous.y
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw  // r2.z <- gout.positionHomogeneous.z
                  dp4 r2.w, r1.xyzw, cb0[3].xyzw  // r2.w <- gout.positionHomogeneous.w
                  dp4 r4.x, r1.xyzw, cb0[4].xyzw  // r4.x <- gout.shadowHomogeneous.x
                  dp4 r4.y, r1.xyzw, cb0[5].xyzw  // r4.y <- gout.shadowHomogeneous.y
                  dp4 r4.z, r1.xyzw, cb0[6].xyzw  // r4.z <- gout.shadowHomogeneous.z
                  dp4 r1.w, r1.xyzw, cb0[7].xyzw  // r1.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r2.x
                  mov o0.y, r2.y
                  mov o0.z, r2.z
                  mov o0.w, r2.w
                  mov o1.xyz, r1.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[1].xyxx
                  mov o4.x, r4.x
                  mov o4.y, r4.y
                  mov o4.z, r4.z
                  mov o4.w, r1.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 74
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r3.xyzw, cb0[3].xyzw  // r1.w <- gout.positionHomogeneous.w
                  dp4 r2.x, r3.xyzw, cb0[4].xyzw  // r2.x <- gout.shadowHomogeneous.x
                  dp4 r2.y, r3.xyzw, cb0[5].xyzw  // r2.y <- gout.shadowHomogeneous.y
                  dp4 r2.z, r3.xyzw, cb0[6].xyzw  // r2.z <- gout.shadowHomogeneous.z
                  dp4 r2.w, r3.xyzw, cb0[7].xyzw  // r2.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyz, r3.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[2].xyxx
                  mov o4.x, r2.x
                  mov o4.y, r2.y
                  mov o4.z, r2.z
                  mov o4.w, r2.w
                  mov o5.x, vPrim
                  emit_stream m0
                
                #line 74
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw
                  dp4 r1.w, r0.xyzw, cb0[3].xyzw
                  dp4 r2.x, r0.xyzw, cb0[4].xyzw
                  dp4 r2.y, r0.xyzw, cb0[5].xyzw
                  dp4 r2.z, r0.xyzw, cb0[6].xyzw
                  dp4 r0.w, r0.xyzw, cb0[7].xyzw  // r0.w <- gout.shadowHomogeneous.w
                
                #line 81
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  mov o1.xyz, r0.xyzx
                  mov o2.xyz, l(0,1.000000,0,0)
                  mov o3.xy, cb2[3].xyxx
                  mov o4.x, r2.x
                  mov o4.y, r2.y
                  mov o4.z, r2.z
                  mov o4.w, r0.w
                  mov o5.x, vPrim
                  emit_stream m0
                endif 
                ret 
                // Approximately 110 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //   uint gTextureCount;                // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     zw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float       
                // SV_PrimitiveID           0   x           5   PRIMID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.zw, position
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps_sgv v5.x, primitive_id
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v5.x <- input.primitiveID; 
                //   o2.x <- <PSDeferredBillboard return value>.depth.x; o2.y <- <PSDeferredBillboard return value>.depth.y; o2.z <- <PSDeferredBillboard return value>.depth.z; o2.w <- <PSDeferredBillboard return value>.depth.w; 
                //   o1.x <- <PSDeferredBillboard return value>.normal.x; o1.y <- <PSDeferredBillboard return value>.normal.y; o1.z <- <PSDeferredBillboard return value>.normal.z; o1.w <- <PSDeferredBillboard return value>.normal.w; 
                //   o0.x <- <PSDeferredBillboard return value>.color.x; o0.y <- <PSDeferredBillboard return value>.color.y; o0.z <- <PSDeferredBillboard return value>.color.z; o0.w <- <PSDeferredBillboard return value>.color.w
                //
                #line 156 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v5.x, cb1[1].z
                utof r0.z, r0.x  // r0.z <- uvw.z
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.x, r0.w, l(-0.050000)
                
                #line 166
                mov o0.xyzw, r0.xyzw
                
                #line 158
                lt r0.x, r1.x, l(0.000000)
                discard_nz r0.x
                
                #line 166
                mov o1.xyz, v2.xyzx
                mov o1.w, cb1[1].y
                div o2.w, v0.z, v0.w
                mov o2.xyz, v1.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 ShadowMapBillboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- input.positionWorld.x; v0.y <- input.positionWorld.y; v0.z <- input.positionWorld.z; 
                //   v1.x <- input.sizeWorld.x; v1.y <- input.sizeWorld.y; 
                //   o1.x <- <VSBillboard return value>.sizeWorld.x; o1.y <- <VSBillboard return value>.sizeWorld.y; 
                //   o0.x <- <VSBillboard return value>.centerWorld.x; o0.y <- <VSBillboard return value>.centerWorld.y; o0.z <- <VSBillboard return value>.centerWorld.z
                //
                #line 45 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add o0.xyz, v0.xyzx, l(0.000000, -0.050000, 0.000000, 0.000000)
                mov o1.xy, v1.xyxx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   float4x4 gShadowTransform;         // Offset:   64 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  128
                //       float Ambient;                 // Offset:  140
                //       float Diffuse;                 // Offset:  144
                //       float3 Direction;              // Offset:  148
                //       float Enabled;                 // Offset:  160
                //
                //   } gDirLights[3];                   // Offset:  128 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  272
                //       float Ambient;                 // Offset:  284
                //       float Diffuse;                 // Offset:  288
                //       float3 Position;               // Offset:  292
                //       float Radius;                  // Offset:  304
                //       float Enabled;                 // Offset:  308
                //
                //   } gPointLights[4];                 // Offset:  272 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  464
                //       float Ambient;                 // Offset:  476
                //       float Diffuse;                 // Offset:  480
                //       float3 Position;               // Offset:  484
                //       float3 Direction;              // Offset:  496
                //       float Spot;                    // Offset:  508
                //       float AttenuationConstant;     // Offset:  512
                //       float AttenuationLinear;       // Offset:  516
                //       float AttenuationExp;          // Offset:  520
                //       float Enabled;                 // Offset:  524
                //
                //   } gSpotLights[4];                  // Offset:  464 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  720 Size:    12
                //   float gFogStart;                   // Offset:  732 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  736 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  752 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  768 Size:     4 [unused]
                //   float gRadius;                     // Offset:  772 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID    uint     NO
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[49], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 5
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_maxout 4
                //
                // Initial variable locations:
                //   vPrim <- primID; 
                //   m0 <- outputStream; 
                //   v[0][0].x <- input[0].centerWorld.x; v[0][0].y <- input[0].centerWorld.y; v[0][0].z <- input[0].centerWorld.z; 
                //   v[0][1].x <- input[0].sizeWorld.x; v[0][1].y <- input[0].sizeWorld.y
                //
                #line 88 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, cb0[45].xyzx, -v[0][0].xyzx  // r0.x <- look.x; r0.y <- look.y; r0.z <- look.z
                eq r0.w, cb0[48].y, l(0.000000)
                dp3 r0.y, r0.xyzx, r0.xyzx
                sqrt r0.y, r0.y
                lt r0.y, r0.y, cb0[48].y
                or r0.y, r0.y, r0.w
                if_nz r0.y
                
                #line 93
                  dp2 r0.y, r0.xzxx, r0.xzxx
                  rsq r1.x, r0.y
                  mul r1.yz, r0.zzxz, r1.xxxx  // r1.y <- look.z; r1.z <- look.x
                  mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mov r0.z, l(0)
                  mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // r0.x <- right.x; r0.y <- right.y; r0.z <- right.z
                
                #line 101
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                  mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx
                  mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                  mad r3.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                  mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx
                
                #line 111
                  mov r2.w, l(1.000000)
                  dp4 r4.x, r2.xyzw, cb0[0].xyzw  // r4.x <- gout.positionHomogeneous.x
                  dp4 r4.y, r2.xyzw, cb0[1].xyzw  // r4.y <- gout.positionHomogeneous.y
                  dp4 r4.z, r2.xyzw, cb0[2].xyzw  // r4.z <- gout.positionHomogeneous.z
                  dp4 r2.x, r2.xyzw, cb0[3].xyzw  // r2.x <- gout.positionHomogeneous.w
                  mov o0.x, r4.x
                  mov o0.y, r4.y
                  mov o0.z, r4.z
                  mov o0.w, r2.x
                  emit_stream m0
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- gout.positionHomogeneous.x
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- gout.positionHomogeneous.y
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw  // r2.z <- gout.positionHomogeneous.z
                  dp4 r1.x, r1.xyzw, cb0[3].xyzw  // r1.x <- gout.positionHomogeneous.w
                  mov o0.x, r2.x
                  mov o0.y, r2.y
                  mov o0.z, r2.z
                  mov o0.w, r1.x
                  emit_stream m0
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- gout.positionHomogeneous.x
                  dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- gout.positionHomogeneous.y
                  dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- gout.positionHomogeneous.z
                  dp4 r1.w, r3.xyzw, cb0[3].xyzw  // r1.w <- gout.positionHomogeneous.w
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r1.w
                  emit_stream m0
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw
                  dp4 r0.x, r0.xyzw, cb0[3].xyzw  // r0.x <- gout.positionHomogeneous.w
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r1.z
                  mov o0.w, r0.x
                  emit_stream m0
                endif 
                ret 
                // Approximately 62 instruction slots used
                            
            };
            PixelShader = NULL;
            RasterizerState = RasterizerDepth;
        }

    }

}

