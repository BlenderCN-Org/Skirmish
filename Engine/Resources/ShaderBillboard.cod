//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorldViewProjection;      // Offset:    0, size:   64
    DirectionalLight gDirLights[3];     // Offset:   64, size:  192
    PointLight gPointLight;             // Offset:  256, size:   80
    SpotLight gSpotLight;               // Offset:  336, size:   96
    float3  gEyePositionWorld;          // Offset:  432, size:   12
    float   gFogStart;                  // Offset:  444, size:    4
    float   gFogRange;                  // Offset:  448, size:    4
    float4  gFogColor;                  // Offset:  464, size:   16
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   68
    uint    gTextureCount;              // Offset:   68, size:    4
}

cbuffer cbFixed : register(b2)
{
    float2  gQuadTexC[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 9 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilNoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
Texture2DArray gTextureArray;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Billboard
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                
                #line 42 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                mov o0.xyz, v0.xyzx  // VSBillboard<0,1,2>
                mov o1.xy, v1.xyxx  // VSBillboard<3,4>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Direction;              // Offset:  112
                //       float Padding;                 // Offset:  124
                //
                //   } gDirLights[3];                   // Offset:   64 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Position;               // Offset:  304
                //       float Range;                   // Offset:  316
                //       float3 Attenuation;            // Offset:  320
                //       float Padding;                 // Offset:  332
                //
                //   } gPointLight;                     // Offset:  256 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  336
                //       float4 Diffuse;                // Offset:  352
                //       float4 Specular;               // Offset:  368
                //       float3 Position;               // Offset:  384
                //       float Range;                   // Offset:  396
                //       float3 Direction;              // Offset:  400
                //       float Spot;                    // Offset:  412
                //       float3 Attenuation;            // Offset:  416
                //       float Padding;                 // Offset:  428
                //
                //   } gSpotLight;                      // Offset:  336 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  432 Size:    12
                //   float gFogStart;                   // Offset:  444 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  448 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  464 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                // SV_PrimitiveID           0    N/A   primID   PRIMID   uint    YES
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_POSITION           0   xyzw        0      POS  float   xyzw
                // m0:POSITION              0   xyz         1     NONE  float   xyz 
                // m0:NORMAL                0   xyz         2     NONE  float   xyz 
                // m0:TEXCOORD              0   xy          3     NONE  float   xy  
                // m0:SV_PrimitiveID        0   x           4   PRIMID   uint   x   
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[28], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input vPrim
                dcl_temps 3
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output_sgv o4.x, primitive_id
                dcl_maxout 4
                
                #line 50 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xy, cb0[27].zxzz, -v[0][0].zxzz  // look<2:Inf,0:Inf>
                dp2 r0.z, r0.xyxx, r0.xyxx
                rsq r1.x, r0.z
                mul r1.yz, r0.xxyx, r1.xxxx  // look<2:NaN:Inf,0:NaN:Inf>
                mul r0.xy, r1.yzyy, l(1.000000, 0.000000, 0.000000, 0.000000)
                mov r0.z, l(0)
                mad r0.xyz, -r1.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000), r0.xyzx  // right<0:NaN:Inf,1: 0f,2:NaN:Inf>
                
                #line 59
                mul r0.w, l(0.500000), v[0][1].x  // halfWidth<0:[-1.70141e+038f,1.70141e+038f]>
                mad r1.xyz, r0.wwww, r0.xyzx, v[0][0].xyzx
                mad r0.xyz, -r0.wwww, r0.xyzx, v[0][0].xyzx
                mad r2.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mad r1.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r1.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                
                #line 69
                mov r2.w, l(1.000000)
                dp4 r0.w, r2.xyzw, cb0[0].xyzw  // gout<0:NaN:Inf>
                
                #line 75
                mov o0.x, r0.w  // outputStream<0>
                
                #line 69
                dp4 r0.w, r2.xyzw, cb0[1].xyzw  // gout<1:NaN:Inf>
                
                #line 75
                mov o0.y, r0.w  // outputStream<0>
                
                #line 69
                dp4 r0.w, r2.xyzw, cb0[2].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r2.xyzw, cb0[3].xyzw  // gout<3:NaN:Inf>
                
                #line 75
                mov o0.z, r0.w  // outputStream<0>
                mov o0.w, r2.w  // outputStream<0>
                mov o1.xyz, r2.xyzx  // outputStream<0,0,0>
                mov o2.xyz, l(0,1.000000,0,0)  // outputStream<0,0,0>
                mov o3.xy, cb2[0].xyxx  // outputStream<0,0>
                mov o4.x, vPrim  // outputStream<0>
                emit_stream m0
                
                #line 69
                mov r1.w, l(1.000000)
                dp4 r0.w, r1.xyzw, cb0[0].xyzw  // gout<0:NaN:Inf>
                
                #line 75
                mov o0.x, r0.w  // outputStream<0>
                
                #line 69
                dp4 r0.w, r1.xyzw, cb0[1].xyzw  // gout<1:NaN:Inf>
                
                #line 75
                mov o0.y, r0.w  // outputStream<0>
                
                #line 69
                dp4 r0.w, r1.xyzw, cb0[2].xyzw  // gout<2:NaN:Inf>
                dp4 r1.w, r1.xyzw, cb0[3].xyzw  // gout<3:NaN:Inf>
                
                #line 75
                mov o0.z, r0.w  // outputStream<0>
                mov o0.w, r1.w  // outputStream<0>
                mov o1.xyz, r1.xyzx  // outputStream<0,0,0>
                mov o2.xyz, l(0,1.000000,0,0)  // outputStream<0,0,0>
                mov o3.xy, cb2[1].xyxx  // outputStream<0,0>
                mov o4.x, vPrim  // outputStream<0>
                emit_stream m0
                
                #line 61
                mad r1.xyz, -v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mad r0.xyz, v[0][1].yyyy, l(0.000000, 0.500000, 0.000000, 0.000000), r0.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                
                #line 69
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[0].xyzw  // gout<0:NaN:Inf>
                
                #line 75
                mov o0.x, r2.x  // outputStream<0>
                
                #line 69
                dp4 r2.x, r1.xyzw, cb0[1].xyzw  // gout<1:NaN:Inf>
                
                #line 75
                mov o0.y, r2.x  // outputStream<0>
                
                #line 69
                dp4 r2.x, r1.xyzw, cb0[2].xyzw  // gout<2:NaN:Inf>
                dp4 r1.w, r1.xyzw, cb0[3].xyzw  // gout<3:NaN:Inf>
                
                #line 75
                mov o0.z, r2.x  // outputStream<0>
                mov o0.w, r1.w  // outputStream<0>
                mov o1.xyz, r1.xyzx  // outputStream<0,0,0>
                mov o2.xyz, l(0,1.000000,0,0)  // outputStream<0,0,0>
                mov o3.xy, cb2[2].xyxx  // outputStream<0,0>
                mov o4.x, vPrim  // outputStream<0>
                emit_stream m0
                
                #line 69
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // gout<0:NaN:Inf>
                
                #line 75
                mov o0.x, r1.x  // outputStream<0>
                
                #line 69
                dp4 r1.x, r0.xyzw, cb0[1].xyzw  // gout<1:NaN:Inf>
                
                #line 75
                mov o0.y, r1.x  // outputStream<0>
                
                #line 69
                dp4 r1.x, r0.xyzw, cb0[2].xyzw  // gout<2:NaN:Inf>
                dp4 r0.w, r0.xyzw, cb0[3].xyzw  // gout<3:NaN:Inf>
                
                #line 75
                mov o0.z, r1.x  // outputStream<0>
                mov o0.w, r0.w  // outputStream<0>
                mov o1.xyz, r0.xyzx  // outputStream<0,0,0>
                mov o2.xyz, l(0,1.000000,0,0)  // outputStream<0,0,0>
                mov o3.xy, cb2[3].xyxx  // outputStream<0,0>
                mov o4.x, vPrim  // outputStream<0>
                emit_stream m0
                
                #line 46
                ret 
                // Approximately 71 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorldViewProjection;     // Offset:    0 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Direction;              // Offset:  112
                //       float Padding;                 // Offset:  124
                //
                //   } gDirLights[3];                   // Offset:   64 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Position;               // Offset:  304
                //       float Range;                   // Offset:  316
                //       float3 Attenuation;            // Offset:  320
                //       float Padding;                 // Offset:  332
                //
                //   } gPointLight;                     // Offset:  256 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  336
                //       float4 Diffuse;                // Offset:  352
                //       float4 Specular;               // Offset:  368
                //       float3 Position;               // Offset:  384
                //       float Range;                   // Offset:  396
                //       float3 Direction;              // Offset:  400
                //       float Spot;                    // Offset:  412
                //       float3 Attenuation;            // Offset:  416
                //       float Padding;                 // Offset:  428
                //
                //   } gSpotLight;                      // Offset:  336 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  432 Size:    12
                //   float gFogStart;                   // Offset:  444 Size:     4
                //   float gFogRange;                   // Offset:  448 Size:     4
                //   float4 gFogColor;                  // Offset:  464 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68
                //   uint gTextureCount;                // Offset:   68 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // SV_PrimitiveID           0   x           4   PRIMID   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[30], immediateIndexed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps_sgv v4.x, primitive_id
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 81 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                add r0.xyz, -v1.xyzx, cb0[27].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[7].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[4].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[7].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[7].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[7].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[2].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[1].xyzx
                  mul r3.xyz, r3.xyzx, cb0[5].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[2].xxyz
                  mul r2.yzw, r2.yyzw, cb0[6].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[11].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[11].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[11].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[11].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[9].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[10].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[8].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[15].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[15].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[15].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[14].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[12].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[20].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[19].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[19].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[16].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[2].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[1].xxyz
                  mul r4.yzw, r4.yyzw, cb0[17].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[20].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[26].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[24].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[24].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[21].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[2].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[1].xyzx
                  mul r7.xyz, r7.xyzx, cb0[22].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[2].xyzx
                  mul r0.xyz, r0.xyzx, cb0[23].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[25].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[25].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[26].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 96 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                udiv null, r0.x, v4.x, cb1[4].y
                utof r0.z, r0.x  // uvw<2:[0f,4.29497e+009f]>
                mov r0.xy, v3.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r0.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.x, r4.w, l(-0.050000)
                lt r0.x, r0.x, l(0.000000)
                discard r0.x
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[28].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[27].w
                div_sat r0.w, r0.w, cb0[28].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[29].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBillboard.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSBillboard<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                mul o0.w, r4.w, cb1[1].w  // PSBillboard<3:NaN:Inf>
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

}

