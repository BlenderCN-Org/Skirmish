//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInverse;             // Offset:   64, size:   64
    float4x4 gWorldViewProjection;      // Offset:  128, size:   64
    DirectionalLight gDirLights[3];     // Offset:  192, size:  192
    PointLight gPointLight;             // Offset:  384, size:   80
    SpotLight gSpotLight;               // Offset:  464, size:   96
    float3  gEyePositionWorld;          // Offset:  560, size:   12
    float   gFogStart;                  // Offset:  572, size:    4
    float   gFogRange;                  // Offset:  576, size:    4
    float4  gFogColor;                  // Offset:  592, size:   16
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   68
}

cbuffer cbSkinned : register(b2)
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 9 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilNoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
Texture2DArray gTextureArray;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 5 technique(s)
    //
    technique11 PositionColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // localTransform           0   xyzw        2     NONE  float   xyzw
                // localTransform           1   xyzw        3     NONE  float   xyzw
                // localTransform           2   xyzw        4     NONE  float   xyzw
                // localTransform           3   xyzw        5     NONE  float   xyzw
                // textureIndex             0   x           6     NONE  float       
                // SV_InstanceID            0   x           7   INSTID   uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                
                #line 34 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // instancePosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionColor<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionColor<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionColor<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionColor<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionColor<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionColor<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionColor<6:NaN:Inf>
                
                #line 40
                mov o2.xyzw, v1.xyzw  // VSPositionColor<7,8,9,10>
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 49 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 337 "IncLights.fx"
                add r0.x, r0.x, -cb0[35].w
                div_sat r0.x, r0.x, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.xyzw, -v2.xyzw, cb0[37].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 47 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                lt r1.x, l(0.000000), cb0[36].x
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw  // PSPositionColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 55
                ret 
                // Approximately 10 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // localTransform           0   xyzw        3     NONE  float   xyzw
                // localTransform           1   xyzw        4     NONE  float   xyzw
                // localTransform           2   xyzw        5     NONE  float   xyzw
                // localTransform           3   xyzw        6     NONE  float   xyzw
                // textureIndex             0   x           7     NONE  float       
                // SV_InstanceID            0   x           8   INSTID   uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_temps 1
                
                #line 62 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // instancePosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalColor<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalColor<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalColor<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalColor<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalColor<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalColor<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalColor<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx
                dp3 r0.y, v1.xyzx, cb0[5].xyzx
                dp3 r0.z, v1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalColor<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 71
                mov o3.xyzw, v2.xyzw  // VSPositionNormalColor<10,11,12,13>
                ret 
                // Approximately 19 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 76 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[2].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[1].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[2].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[2].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[1].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[2].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[1].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[2].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 91 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                add r0.xyz, r1.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 100
                mov o0.w, cb1[1].w  // PSPositionNormalColor<3>
                ret 
                // Approximately 160 instruction slots used
                            
            };
        }

    }

    technique11 PositionTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // localTransform           0   xyzw        2     NONE  float   xyzw
                // localTransform           1   xyzw        3     NONE  float   xyzw
                // localTransform           2   xyzw        4     NONE  float   xyzw
                // localTransform           3   xyzw        5     NONE  float   xyzw
                // textureIndex             0   x           6     NONE  float   x   
                // SV_InstanceID            0   x           7   INSTID   uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 107 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // instancePosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 114
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, v6.x  // VSPositionTexture<9>
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 123 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 337 "IncLights.fx"
                add r0.x, r0.x, -cb0[35].w
                div_sat r0.x, r0.x, cb0[36].x  // fogLerp<0:[0f,1f]>
                
                #line 119 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.yzw, v2.xyzx, t0.wxyz, s0  // litColor<3:Inf,0:Inf,1:Inf,2:Inf>
                
                #line 339 "IncLights.fx"
                add r1.xyz, -r0.yzwy, cb0[37].xyzx
                mad r1.xyz, r0.xxxx, r1.xyzx, r0.yzwy  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                lt r0.x, l(0.000000), cb0[36].x
                movc o0.xyz, r0.xxxx, r1.xyzx, r0.yzwy  // PSPositionTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                mov o0.w, cb1[1].w  // PSPositionTexture<3>
                ret 
                // Approximately 12 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // localTransform           0   xyzw        3     NONE  float   xyzw
                // localTransform           1   xyzw        4     NONE  float   xyzw
                // localTransform           2   xyzw        5     NONE  float   xyzw
                // localTransform           3   xyzw        6     NONE  float   xyzw
                // textureIndex             0   x           7     NONE  float   x   
                // SV_InstanceID            0   x           8   INSTID   uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 1
                
                #line 138 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // instancePosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalTexture<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx
                dp3 r0.y, v1.xyzx, cb0[5].xyzx
                dp3 r0.z, v1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTexture<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 146
                mov o3.xy, v2.xyxx  // VSPositionNormalTexture<10,11>
                mov o3.z, v7.x  // VSPositionNormalTexture<12>
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 151 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[2].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[1].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[2].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[2].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[1].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[2].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[1].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[2].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 166 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, v3.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 170 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                mul o0.w, r4.w, cb1[1].w  // PSPositionNormalTexture<3:NaN:Inf>
                ret 
                // Approximately 161 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // WEIGHTS                  0   xyz         3     NONE  float   xyz 
                // BONEINDICES              0   xyzw        4     NONE   uint   xyzw
                // localTransform           0   xyzw        5     NONE  float   xyzw
                // localTransform           1   xyzw        6     NONE  float   xyzw
                // localTransform           2   xyzw        7     NONE  float   xyzw
                // localTransform           3   xyzw        8     NONE  float   xyzw
                // textureIndex             0   x           9     NONE  float   x   
                // SV_InstanceID            0   x          10   INSTID   uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_input v9.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 185 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                mov x0[0].x, v3.x  // weights<0>
                mov x0[1].x, v3.y  // weights<1>
                mov x0[2].x, v3.z  // weights<2>
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 195
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.x, l(0)  // i<0>
                loop 
                  ige r1.w, r3.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r3.x + 0].x  // weights<0:Inf>
                  ineg r2.w, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r2.w, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r2.xyz, r1.wwww, r4.xyzx, r2.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r4.xyzx, r1.xyzx  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 193
                endloop 
                
                #line 199
                mul r0.xyzw, r2.yyyy, v6.xyzw
                mad r0.xyzw, r2.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r2.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // instancePosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalTextureSkinned<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalTextureSkinned<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalTextureSkinned<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalTextureSkinned<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalTextureSkinned<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalTextureSkinned<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalTextureSkinned<6:NaN:Inf>
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 207
                mov o3.xy, v2.xyxx  // VSPositionNormalTextureSkinned<10,11>
                mov o3.z, v9.x  // VSPositionNormalTextureSkinned<12>
                ret 
                // Approximately 56 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //       float Padding;                 // Offset:   64
                //
                //   } gMaterial;                       // Offset:    0 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 212 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[2].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[1].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[2].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[2].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[1].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[0].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[2].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[1].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[0].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[2].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[1].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[2].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 227 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, v3.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderInstancing.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalTextureSkinned<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                mul o0.w, r4.w, cb1[1].w  // PSPositionNormalTextureSkinned<3:NaN:Inf>
                ret 
                // Approximately 161 instruction slots used
                            
            };
        }

    }

}

