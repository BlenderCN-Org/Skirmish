//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInverse;             // Offset:   64, size:   64
    float4x4 gWorldViewProjection;      // Offset:  128, size:   64
    float4x4 gShadowTransform;          // Offset:  192, size:   64
    DirectionalLight gDirLights[3];     // Offset:  256, size:  192
    PointLight gPointLight;             // Offset:  448, size:   80
    SpotLight gSpotLight;               // Offset:  528, size:   96
    float3  gEyePositionWorld;          // Offset:  624, size:   12
    float   gFogStart;                  // Offset:  636, size:    4
    float   gFogRange;                  // Offset:  640, size:    4
    float4  gFogColor;                  // Offset:  656, size:   16
    float   gEnableShadows;             // Offset:  672, size:    4
}

cbuffer cbPerObject : register(b1)
{
    float   gTextureIndex;              // Offset:    0, size:    4
    Material gMaterial;                 // Offset:   16, size:   68
}

cbuffer cbSkinned : register(b2)
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 12 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilNoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2DArray gTextureArray;
Texture2D gNormalMap;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 13 technique(s)
    //
    technique11 PositionColor
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                
                #line 39 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionColor<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionColor<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionColor<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionColor<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionColor<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionColor<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionColor<6:NaN:Inf>
                
                #line 43
                mov o2.xyzw, v1.xyzw  // VSPositionColor<7,8,9,10>
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[42], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 72 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 386 "IncLights.fx"
                add r0.x, r0.x, -cb0[39].w
                div_sat r0.x, r0.x, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r1.xyzw, -v2.xyzw, cb0[41].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 70 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[40].x
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw  // PSPositionColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 78
                ret 
                // Approximately 10 instruction slots used
                            
            };
        }

    }

    technique11 PositionColorSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // WEIGHTS                  0   xyz         2     NONE  float   xyz 
                // BONEINDICES              0   xyzw        3     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                
                #line 321 "IncVertexFormats.fx"
                mov x0[0].x, v2.x  // weights<0>
                mov x0[1].x, v2.y  // weights<1>
                mov x0[2].x, v2.z  // weights<2>
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 330
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.x, l(0)  // i<0>
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x  // weights<0:Inf>
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                endloop 
                
                #line 59 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionColorSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionColorSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionColorSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionColorSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionColorSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionColorSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionColorSkinned<6:NaN:Inf>
                
                #line 63
                mov o2.xyzw, v1.xyzw  // VSPositionColorSkinned<7,8,9,10>
                ret 
                // Approximately 41 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[42], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 72 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 386 "IncLights.fx"
                add r0.x, r0.x, -cb0[39].w
                div_sat r0.x, r0.x, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r1.xyzw, -v2.xyzw, cb0[41].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 70 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[40].x
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw  // PSPositionColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 78
                ret 
                // Approximately 10 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColor
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 2
                
                #line 85 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalColor<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalColor<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalColor<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalColor<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalColor<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalColor<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalColor<6:NaN:Inf>
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx  // VSPositionNormalColor<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 93
                mov o3.xyzw, v2.xyzw  // VSPositionNormalColor<10,11,12,13>
                
                #line 89
                dp4 o4.x, r0.xyzw, cb0[12].xyzw  // VSPositionNormalColor<14:NaN:Inf>
                dp4 o4.y, r0.xyzw, cb0[13].xyzw  // VSPositionNormalColor<15:NaN:Inf>
                dp4 o4.z, r0.xyzw, cb0[14].xyzw  // VSPositionNormalColor<16:NaN:Inf>
                dp4 o4.w, r0.xyzw, cb0[15].xyzw  // VSPositionNormalColor<17:NaN:Inf>
                
                #line 93
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerShadow                   sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[43], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 125 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315 "IncLights.fx"
                eq r1.x, cb0[42].x, l(1.000000)
                if_nz r1.x
                
                #line 289
                  div r1.xyz, v4.xyzx, v4.wwww  // shadowPosH<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                  add r2.xyzw, r1.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t0.xxxx, s0, r1.z  // percentLit<0:[0f,1f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,2f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,3f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,4f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r1.xyxx, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,5f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,6f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,7f]>
                  add r2.xyzw, r1.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t0.xxxx, s0, r1.z
                  add r1.x, r1.x, r1.w  // percentLit<0:[0f,8f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.x, r1.y, r1.x  // percentLit<0:[0f,9f]>
                
                #line 303
                  mul r1.x, r1.x, l(0.111111)  // percentLit<0:[0f,1f]>
                
                #line 315
                else 
                  mov r1.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 326
                eq r1.y, cb0[19].w, l(1.000000)
                if_nz r1.y
                
                #line 156
                  mul r1.yzw, cb0[16].xxyz, cb1[1].xxyz  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 159
                  dp3 r2.x, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.y, l(0.000000), r2.x
                  dp3 r2.z, cb0[19].xyzx, v2.xyzx
                  add r2.z, r2.z, r2.z
                  mad r3.xyz, v2.xyzx, -r2.zzzz, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.z, r3.xyzx, r0.xyzx
                  max r2.z, r2.z, l(0.000000)
                  log r2.z, r2.z
                  mul r2.z, r2.z, cb1[3].w
                  exp r2.z, r2.z  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r2.xxxx, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xzw, r2.zzzz, cb1[3].xxyz
                  mul r2.xzw, r2.xxzw, cb0[18].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r3.xyz, r2.yyyy, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.xzwx, r2.yyyy  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 338
                  mul r3.xyz, r1.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xyz, r1.xxxx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                else 
                  mov r1.yzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.x, cb0[23].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[20].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                eq r1.x, cb0[27].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[27].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[27].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[27].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[24].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                
                #line 343
                eq r1.x, cb0[32].w, l(1.000000)
                if_nz r1.x
                
                #line 188
                  add r4.xyz, -v1.xyzx, cb0[31].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 198
                  ge r1.x, cb0[31].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 201
                  mul r6.xyz, cb0[28].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 204
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 208
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[29].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 218
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[32].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 198
                  and r6.xyz, r1.xxxx, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.xxxx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 355
                  add r1.yzw, r1.yyzw, r6.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 343
                endif 
                
                #line 360
                eq r1.x, cb0[38].w, l(1.000000)
                if_nz r1.x
                
                #line 238
                  add r4.xyz, -v1.xyzx, cb0[36].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 248
                  ge r1.x, cb0[36].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 251
                  mul r6.xyz, cb0[33].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 254
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 258
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[34].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[35].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 268
                  dp3 r2.w, -r4.xyzx, cb0[37].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[37].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 271
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[38].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 248
                  and r4.xyz, r1.xxxx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372
                  add r1.yzw, r1.yyzw, r4.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 360
                endif 
                
                #line 142 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, r1.yzwy, r3.xyzx
                mad r0.xyz, v3.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[40].x
                
                #line 386 "IncLights.fx"
                add r0.w, r0.w, -cb0[39].w
                div_sat r0.w, r0.w, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[41].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 144 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                mul o0.w, v3.w, cb1[2].w  // PSPositionNormalColor<3:Inf>
                ret 
                // Approximately 190 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColorSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // WEIGHTS                  0   xyz         3     NONE  float   xyz 
                // BONEINDICES              0   xyzw        4     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 344 "IncVertexFormats.fx"
                mov x0[0].x, v3.x  // weights<0>
                mov x0[1].x, v3.y  // weights<1>
                mov x0[2].x, v3.z  // weights<2>
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 354
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // normalLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.x, l(0)  // i<0>
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x  // weights<0:Inf>
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx  // normalLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 352
                endloop 
                
                #line 112 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionNormalColorSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionNormalColorSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionNormalColorSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionNormalColorSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionNormalColorSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionNormalColorSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionNormalColorSkinned<6:NaN:Inf>
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalColorSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                dp4 o4.x, r1.xyzw, cb0[12].xyzw  // VSPositionNormalColorSkinned<14:NaN:Inf>
                dp4 o4.y, r1.xyzw, cb0[13].xyzw  // VSPositionNormalColorSkinned<15:NaN:Inf>
                dp4 o4.z, r1.xyzw, cb0[14].xyzw  // VSPositionNormalColorSkinned<16:NaN:Inf>
                dp4 o4.w, r1.xyzw, cb0[15].xyzw  // VSPositionNormalColorSkinned<17:NaN:Inf>
                
                #line 120
                mov o3.xyzw, v2.xyzw  // VSPositionNormalColorSkinned<10,11,12,13>
                ret 
                // Approximately 56 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerShadow                   sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[43], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 125 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315 "IncLights.fx"
                eq r1.x, cb0[42].x, l(1.000000)
                if_nz r1.x
                
                #line 289
                  div r1.xyz, v4.xyzx, v4.wwww  // shadowPosH<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                  add r2.xyzw, r1.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t0.xxxx, s0, r1.z  // percentLit<0:[0f,1f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,2f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,3f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,4f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r1.xyxx, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,5f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,6f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,7f]>
                  add r2.xyzw, r1.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t0.xxxx, s0, r1.z
                  add r1.x, r1.x, r1.w  // percentLit<0:[0f,8f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t0.xxxx, s0, r1.z
                  add r1.x, r1.y, r1.x  // percentLit<0:[0f,9f]>
                
                #line 303
                  mul r1.x, r1.x, l(0.111111)  // percentLit<0:[0f,1f]>
                
                #line 315
                else 
                  mov r1.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 326
                eq r1.y, cb0[19].w, l(1.000000)
                if_nz r1.y
                
                #line 156
                  mul r1.yzw, cb0[16].xxyz, cb1[1].xxyz  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 159
                  dp3 r2.x, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.y, l(0.000000), r2.x
                  dp3 r2.z, cb0[19].xyzx, v2.xyzx
                  add r2.z, r2.z, r2.z
                  mad r3.xyz, v2.xyzx, -r2.zzzz, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.z, r3.xyzx, r0.xyzx
                  max r2.z, r2.z, l(0.000000)
                  log r2.z, r2.z
                  mul r2.z, r2.z, cb1[3].w
                  exp r2.z, r2.z  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r2.xxxx, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xzw, r2.zzzz, cb1[3].xxyz
                  mul r2.xzw, r2.xxzw, cb0[18].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r3.xyz, r2.yyyy, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.xzwx, r2.yyyy  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 338
                  mul r3.xyz, r1.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xyz, r1.xxxx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                else 
                  mov r1.yzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.x, cb0[23].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[20].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                eq r1.x, cb0[27].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[27].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[27].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[27].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[24].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                
                #line 343
                eq r1.x, cb0[32].w, l(1.000000)
                if_nz r1.x
                
                #line 188
                  add r4.xyz, -v1.xyzx, cb0[31].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 198
                  ge r1.x, cb0[31].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 201
                  mul r6.xyz, cb0[28].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 204
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 208
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[29].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 218
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[32].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 198
                  and r6.xyz, r1.xxxx, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.xxxx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 355
                  add r1.yzw, r1.yyzw, r6.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 343
                endif 
                
                #line 360
                eq r1.x, cb0[38].w, l(1.000000)
                if_nz r1.x
                
                #line 238
                  add r4.xyz, -v1.xyzx, cb0[36].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 248
                  ge r1.x, cb0[36].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 251
                  mul r6.xyz, cb0[33].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 254
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 258
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[34].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[35].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 268
                  dp3 r2.w, -r4.xyzx, cb0[37].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[37].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 271
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[38].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 248
                  and r4.xyz, r1.xxxx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372
                  add r1.yzw, r1.yyzw, r4.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 360
                endif 
                
                #line 142 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, r1.yzwy, r3.xyzx
                mad r0.xyz, v3.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[40].x
                
                #line 386 "IncLights.fx"
                add r0.w, r0.w, -cb0[39].w
                div_sat r0.w, r0.w, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[41].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 144 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                mul o0.w, v3.w, cb1[2].w  // PSPositionNormalColor<3:Inf>
                ret 
                // Approximately 190 instruction slots used
                            
            };
        }

    }

    technique11 PositionTexture
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[42], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 193 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 386 "IncLights.fx"
                add r0.x, r0.x, -cb0[39].w
                div_sat r0.x, r0.x, cb0[40].x  // fogLerp<0:[0f,1f]>
                
                #line 189 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // litColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 388 "IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[41].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 191 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[40].x
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 199
                mul o0.w, r0.w, cb1[2].w  // PSPositionTexture<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSPositionTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureRED
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 206 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.xyzw, s0  // litColor<0:Inf>
                
                #line 209
                mov o0.xyz, r0.xxxx  // PSPositionTextureRED<0:Inf,1:Inf,2:Inf>
                mov o0.w, l(1.000000)  // PSPositionTextureRED<3: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureGREEN
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 214 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.yxzw, s0  // litColor<1:Inf>
                
                #line 217
                mov o0.xyz, r0.xxxx  // PSPositionTextureGREEN<0:Inf,1:Inf,2:Inf>
                mov o0.w, l(1.000000)  // PSPositionTextureGREEN<3: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureBLUE
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 222 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.zxyw, s0  // litColor<2:Inf>
                
                #line 225
                mov o0.xyz, r0.xxxx  // PSPositionTextureBLUE<0:Inf,1:Inf,2:Inf>
                mov o0.w, l(1.000000)  // PSPositionTextureBLUE<3: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // WEIGHTS                  0   xyz         2     NONE  float   xyz 
                // BONEINDICES              0   xyzw        3     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                
                #line 321 "IncVertexFormats.fx"
                mov x0[0].x, v2.x  // weights<0>
                mov x0[1].x, v2.y  // weights<1>
                mov x0[2].x, v2.z  // weights<2>
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 330
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.x, l(0)  // i<0>
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x  // weights<0:Inf>
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                endloop 
                
                #line 179 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionTextureSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionTextureSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionTextureSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionTextureSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionTextureSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionTextureSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionTextureSkinned<6:NaN:Inf>
                
                #line 184
                mov o2.xy, v1.xyxx  // VSPositionTextureSkinned<7,8>
                mov o2.z, cb1[0].x  // VSPositionTextureSkinned<9>
                ret 
                // Approximately 42 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[42], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 193 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 386 "IncLights.fx"
                add r0.x, r0.x, -cb0[39].w
                div_sat r0.x, r0.x, cb0[40].x  // fogLerp<0:[0f,1f]>
                
                #line 189 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // litColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 388 "IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[41].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 191 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[40].x
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 199
                mul o0.w, r0.w, cb1[2].w  // PSPositionTexture<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSPositionTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTexture
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 2
                
                #line 232 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalTexture<6:NaN:Inf>
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx  // VSPositionNormalTexture<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 239
                mov o3.xy, v2.xyxx  // VSPositionNormalTexture<10,11>
                mov o3.z, cb1[0].x  // VSPositionNormalTexture<16>
                dp4 o4.x, r0.xyzw, cb0[12].xyzw  // VSPositionNormalTexture<12:NaN:Inf>
                dp4 o4.y, r0.xyzw, cb0[13].xyzw  // VSPositionNormalTexture<13:NaN:Inf>
                dp4 o4.z, r0.xyzw, cb0[14].xyzw  // VSPositionNormalTexture<14:NaN:Inf>
                dp4 o4.w, r0.xyzw, cb0[15].xyzw  // VSPositionNormalTexture<15:NaN:Inf>
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // SamplerShadow                   sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[43], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 270 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315 "IncLights.fx"
                eq r1.x, cb0[42].x, l(1.000000)
                if_nz r1.x
                
                #line 289
                  div r1.xyz, v4.xyzx, v4.wwww  // shadowPosH<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                  add r2.xyzw, r1.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.xxxx, s1, r1.z  // percentLit<0:[0f,1f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,2f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,3f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,4f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r1.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,5f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,6f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,7f]>
                  add r2.xyzw, r1.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.x, r1.x, r1.w  // percentLit<0:[0f,8f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.x, r1.y, r1.x  // percentLit<0:[0f,9f]>
                
                #line 303
                  mul r1.x, r1.x, l(0.111111)  // percentLit<0:[0f,1f]>
                
                #line 315
                else 
                  mov r1.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 326
                eq r1.y, cb0[19].w, l(1.000000)
                if_nz r1.y
                
                #line 156
                  mul r1.yzw, cb0[16].xxyz, cb1[1].xxyz  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 159
                  dp3 r2.x, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.y, l(0.000000), r2.x
                  dp3 r2.z, cb0[19].xyzx, v2.xyzx
                  add r2.z, r2.z, r2.z
                  mad r3.xyz, v2.xyzx, -r2.zzzz, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.z, r3.xyzx, r0.xyzx
                  max r2.z, r2.z, l(0.000000)
                  log r2.z, r2.z
                  mul r2.z, r2.z, cb1[3].w
                  exp r2.z, r2.z  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r2.xxxx, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xzw, r2.zzzz, cb1[3].xxyz
                  mul r2.xzw, r2.xxzw, cb0[18].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r3.xyz, r2.yyyy, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.xzwx, r2.yyyy  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 338
                  mul r3.xyz, r1.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xyz, r1.xxxx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                else 
                  mov r1.yzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.x, cb0[23].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[20].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                eq r1.x, cb0[27].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[27].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[27].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[27].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[24].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                
                #line 343
                eq r1.x, cb0[32].w, l(1.000000)
                if_nz r1.x
                
                #line 188
                  add r4.xyz, -v1.xyzx, cb0[31].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 198
                  ge r1.x, cb0[31].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 201
                  mul r6.xyz, cb0[28].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 204
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 208
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[29].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 218
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[32].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 198
                  and r6.xyz, r1.xxxx, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.xxxx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 355
                  add r1.yzw, r1.yyzw, r6.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 343
                endif 
                
                #line 360
                eq r1.x, cb0[38].w, l(1.000000)
                if_nz r1.x
                
                #line 238
                  add r4.xyz, -v1.xyzx, cb0[36].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 248
                  ge r1.x, cb0[36].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 251
                  mul r6.xyz, cb0[33].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 254
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 258
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[34].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[35].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 268
                  dp3 r2.w, -r4.xyzx, cb0[37].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[37].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 271
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[38].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 248
                  and r4.xyz, r1.xxxx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372
                  add r1.yzw, r1.yyzw, r4.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 360
                endif 
                
                #line 287 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, v3.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r1.yzwy, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[40].x
                
                #line 386 "IncLights.fx"
                add r0.w, r0.w, -cb0[39].w
                div_sat r0.w, r0.w, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[41].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 296
                mul o0.w, r4.w, cb1[2].w  // PSPositionNormalTexture<3:NaN:Inf>
                ret 
                // Approximately 191 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // WEIGHTS                  0   xyz         3     NONE  float   xyz 
                // BONEINDICES              0   xyzw        4     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 344 "IncVertexFormats.fx"
                mov x0[0].x, v3.x  // weights<0>
                mov x0[1].x, v3.y  // weights<1>
                mov x0[2].x, v3.z  // weights<2>
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 354
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // normalLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.x, l(0)  // i<0>
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x  // weights<0:Inf>
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx  // normalLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 352
                endloop 
                
                #line 258 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionNormalTextureSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionNormalTextureSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionNormalTextureSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionNormalTextureSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionNormalTextureSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionNormalTextureSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionNormalTextureSkinned<6:NaN:Inf>
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 263
                dp4 o4.x, r1.xyzw, cb0[12].xyzw  // VSPositionNormalTextureSkinned<12:NaN:Inf>
                dp4 o4.y, r1.xyzw, cb0[13].xyzw  // VSPositionNormalTextureSkinned<13:NaN:Inf>
                dp4 o4.z, r1.xyzw, cb0[14].xyzw  // VSPositionNormalTextureSkinned<14:NaN:Inf>
                dp4 o4.w, r1.xyzw, cb0[15].xyzw  // VSPositionNormalTextureSkinned<15:NaN:Inf>
                mov o3.xy, v2.xyxx  // VSPositionNormalTextureSkinned<10,11>
                mov o3.z, cb1[0].x  // VSPositionNormalTextureSkinned<16>
                ret 
                // Approximately 57 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // SamplerShadow                   sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                // TEXCOORD                 1   xyzw        4     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[43], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 270 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315 "IncLights.fx"
                eq r1.x, cb0[42].x, l(1.000000)
                if_nz r1.x
                
                #line 289
                  div r1.xyz, v4.xyzx, v4.wwww  // shadowPosH<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                  add r2.xyzw, r1.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.xxxx, s1, r1.z  // percentLit<0:[0f,1f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,2f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,3f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,4f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r1.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,5f]>
                  add r2.xyzw, r1.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,6f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,7f]>
                  add r2.xyzw, r1.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t1.xxxx, s1, r1.z
                  add r1.x, r1.x, r1.w  // percentLit<0:[0f,8f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t1.xxxx, s1, r1.z
                  add r1.x, r1.y, r1.x  // percentLit<0:[0f,9f]>
                
                #line 303
                  mul r1.x, r1.x, l(0.111111)  // percentLit<0:[0f,1f]>
                
                #line 315
                else 
                  mov r1.x, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 326
                eq r1.y, cb0[19].w, l(1.000000)
                if_nz r1.y
                
                #line 156
                  mul r1.yzw, cb0[16].xxyz, cb1[1].xxyz  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 159
                  dp3 r2.x, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.y, l(0.000000), r2.x
                  dp3 r2.z, cb0[19].xyzx, v2.xyzx
                  add r2.z, r2.z, r2.z
                  mad r3.xyz, v2.xyzx, -r2.zzzz, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.z, r3.xyzx, r0.xyzx
                  max r2.z, r2.z, l(0.000000)
                  log r2.z, r2.z
                  mul r2.z, r2.z, cb1[3].w
                  exp r2.z, r2.z  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r2.xxxx, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xzw, r2.zzzz, cb1[3].xxyz
                  mul r2.xzw, r2.xxzw, cb0[18].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r3.xyz, r2.yyyy, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.xzwx, r2.yyyy  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 338
                  mul r3.xyz, r1.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xyz, r1.xxxx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                else 
                  mov r1.yzw, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.x, cb0[23].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[20].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                eq r1.x, cb0[27].w, l(1.000000)
                if_nz r1.x
                
                #line 159
                  dp3 r1.x, -cb0[27].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.x
                  dp3 r3.w, cb0[27].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[27].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.xxxx, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r1.yzw, cb1[1].xxyz, cb0[24].xxyz, r1.yyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                
                #line 343
                eq r1.x, cb0[32].w, l(1.000000)
                if_nz r1.x
                
                #line 188
                  add r4.xyz, -v1.xyzx, cb0[31].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 198
                  ge r1.x, cb0[31].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 201
                  mul r6.xyz, cb0[28].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 204
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 208
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[29].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 218
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[32].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 198
                  and r6.xyz, r1.xxxx, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.xxxx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 355
                  add r1.yzw, r1.yyzw, r6.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 343
                endif 
                
                #line 360
                eq r1.x, cb0[38].w, l(1.000000)
                if_nz r1.x
                
                #line 238
                  add r4.xyz, -v1.xyzx, cb0[36].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 248
                  ge r1.x, cb0[36].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 251
                  mul r6.xyz, cb0[33].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 254
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 258
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[34].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[35].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 268
                  dp3 r2.w, -r4.xyzx, cb0[37].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[37].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 271
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[38].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 248
                  and r4.xyz, r1.xxxx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.xxxx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372
                  add r1.yzw, r1.yyzw, r4.xxyz  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 360
                endif 
                
                #line 287 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, v3.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r1.yzwy, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[40].x
                
                #line 386 "IncLights.fx"
                add r0.w, r0.w, -cb0[39].w
                div_sat r0.w, r0.w, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[41].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 296
                mul o0.w, r4.w, cb1[2].w  // PSPositionNormalTexture<3:NaN:Inf>
                ret 
                // Approximately 191 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangent
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 2
                
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalTextureTangent<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalTextureTangent<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalTextureTangent<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalTextureTangent<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalTextureTangent<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalTextureTangent<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalTextureTangent<6:NaN:Inf>
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx  // VSPositionNormalTextureTangent<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                dp3 o3.x, v2.xyzx, cb0[0].xyzx  // VSPositionNormalTextureTangent<10:NaN:Inf>
                dp3 o3.y, v2.xyzx, cb0[1].xyzx  // VSPositionNormalTextureTangent<11:NaN:Inf>
                dp3 o3.z, v2.xyzx, cb0[2].xyzx  // VSPositionNormalTextureTangent<12:NaN:Inf>
                
                #line 313
                mov o4.xy, v3.xyxx  // VSPositionNormalTextureTangent<13,14>
                mov o4.z, cb1[0].x  // VSPositionNormalTextureTangent<19>
                
                #line 310
                dp4 o5.x, r0.xyzw, cb0[12].xyzw  // VSPositionNormalTextureTangent<15:NaN:Inf>
                dp4 o5.y, r0.xyzw, cb0[13].xyzw  // VSPositionNormalTextureTangent<16:NaN:Inf>
                dp4 o5.z, r0.xyzw, cb0[14].xyzw  // VSPositionNormalTextureTangent<17:NaN:Inf>
                dp4 o5.w, r0.xyzw, cb0[15].xyzw  // VSPositionNormalTextureTangent<18:NaN:Inf>
                
                #line 313
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // SamplerShadow                   sampler_c      NA          NA    2        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[43], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 348 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t1.xyzw, s0  // normalMapSample<0:Inf,1:Inf,2:Inf>
                
                #line 125 "IncLights.fx"
                mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 129
                dp3 r1.w, v3.xyzx, v2.xyzx
                mad r2.xyz, -r1.wwww, v2.xyzx, v3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r2.yzxy, v2.zxyz
                mad r3.xyz, v2.yzxy, r2.zxyz, -r3.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 134
                mul r3.xyz, r1.yyyy, r3.xyzx
                mad r1.xyw, r1.xxxx, r2.xyxz, r3.xyxz
                mad r1.xyz, r1.zzzz, v2.xyzx, r1.xywx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315
                eq r1.w, cb0[42].x, l(1.000000)
                if_nz r1.w
                
                #line 289
                  div r2.xyz, v5.xyzx, v5.wwww  // shadowPosH<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                  add r3.xyzw, r2.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t2.xxxx, s2, r2.z  // percentLit<0:[0f,1f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,2f]>
                  add r3.xyzw, r2.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,3f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,4f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r2.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,5f]>
                  add r3.xyzw, r2.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,6f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,7f]>
                  add r3.xyzw, r2.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r3.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,8f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,9f]>
                
                #line 303
                  mul r1.w, r1.w, l(0.111111)  // percentLit<0:[0f,1f]>
                
                #line 315
                else 
                  mov r1.w, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 326
                eq r2.x, cb0[19].w, l(1.000000)
                if_nz r2.x
                
                #line 156
                  mul r2.xyz, cb0[16].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 159
                  dp3 r2.w, -cb0[19].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r3.x, l(0.000000), r2.w
                  dp3 r3.y, cb0[19].xyzx, r1.xyzx
                  add r3.y, r3.y, r3.y
                  mad r3.yzw, r1.xxyz, -r3.yyyy, cb0[19].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.y, r3.yzwy, r0.xyzx
                  max r3.y, r3.y, l(0.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, cb1[3].w
                  exp r3.y, r3.y  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r3.yzw, r3.yyyy, cb1[3].xxyz
                  mul r3.yzw, r3.yyzw, cb0[18].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r3.xxxx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r3.xyz, r3.yzwy, r3.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 338
                  mul r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r3.xyz, r1.wwww, r3.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                else 
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r4.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 159
                  dp3 r1.w, -cb0[23].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r2.xyz, cb1[1].xyzx, cb0[20].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                eq r1.w, cb0[27].w, l(1.000000)
                if_nz r1.w
                
                #line 159
                  dp3 r1.w, -cb0[27].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[27].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[27].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r2.xyz, cb1[1].xyzx, cb0[24].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                
                #line 343
                eq r1.w, cb0[32].w, l(1.000000)
                if_nz r1.w
                
                #line 188
                  add r5.xyz, -v1.xyzx, cb0[31].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 198
                  ge r1.w, cb0[31].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 201
                  mul r7.xyz, cb0[28].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 204
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 208
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r5.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r5.xyzx, r0.xyzx
                  max r4.w, r4.w, l(0.000000)
                  log r4.w, r4.w
                  mul r4.w, r4.w, cb1[3].w
                  exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[29].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r4.wwww, cb1[3].xyzx
                  mul r8.xyz, r8.xyzx, cb0[30].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                  and r5.xyz, r3.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r8.xyz, r3.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 218
                  mov r6.x, l(1.000000)
                  dp3 r2.w, cb0[32].xyzx, r6.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r2.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 198
                  and r7.xyz, r1.wwww, r7.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r1.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 355
                  add r2.xyz, r2.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 343
                endif 
                
                #line 360
                eq r1.w, cb0[38].w, l(1.000000)
                if_nz r1.w
                
                #line 238
                  add r5.xyz, -v1.xyzx, cb0[36].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 248
                  ge r1.w, cb0[36].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 251
                  mul r7.xyz, cb0[33].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 254
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 258
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r1.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r1.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r1.xyz, r2.wwww, cb1[2].xyzx
                  mul r1.xyz, r1.xyzx, cb0[34].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[35].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                  and r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 268
                  dp3 r2.w, -r5.xyzx, cb0[37].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[37].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 271
                  mov r6.x, l(1.000000)
                  dp3 r3.w, cb0[38].xyzx, r6.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 248
                  and r5.xyz, r1.wwww, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r1.xyz, r1.xyzx, r1.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372
                  add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r1.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r0.xyzx, r3.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 360
                endif 
                
                #line 368 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r2.xyzx, r4.xyzx
                mad r0.xyz, r1.xyzx, r0.xyzx, r3.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[40].x
                
                #line 386 "IncLights.fx"
                add r0.w, r0.w, -cb0[39].w
                div_sat r0.w, r0.w, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r2.xyz, -r0.xyzx, cb0[41].xyzx
                mad r2.xyz, r0.wwww, r2.xyzx, r0.xyzx  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r2.xyzx, r0.xyzx  // PSPositionNormalTextureTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 377
                mul o0.w, r1.w, cb1[2].w  // PSPositionNormalTextureTangent<3:NaN:Inf>
                ret 
                // Approximately 203 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangentSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  636 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  640 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  656 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  672 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 8
                dcl_indexableTemp x0[4], 4
                
                #line 371 "IncVertexFormats.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 382
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                
                #line 385
                mov r1.xyz, v2.xyzx
                mov r1.w, l(1.000000)
                
                #line 380
                mov r2.xyz, l(0,0,0,0)  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, l(0,0,0,0)  // normalLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, l(0,0,0,0)  // tangentLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.x, l(0)  // i<0>
                loop 
                  ige r3.w, r5.x, l(4)
                  breakc_nz r3.w
                  mov r3.w, x0[r5.x + 0].x  // weights<0:Inf>
                  ineg r4.w, r5.x
                  ult r6.xyz, r5.xxxx, l(1, 2, 3, 0)
                  and r7.y, r4.w, r6.y
                  iadd r5.xy, r5.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r7.z, r6.y, l(0), r5.y
                  ieq r7.w, r6.z, l(0)
                  mov r7.x, r6.x
                  and r6.xyzw, r7.xyzw, v5.xyzw
                  or r5.yz, r6.yywy, r6.xxzx
                  or r4.w, r5.z, r5.y
                  ishl r4.w, r4.w, l(2)
                  dp4 r6.x, r0.xyzw, cb2[r4.w + 0].xyzw
                  dp4 r6.y, r0.xyzw, cb2[r4.w + 1].xyzw
                  dp4 r6.z, r0.xyzw, cb2[r4.w + 2].xyzw
                  mad r2.xyz, r3.wwww, r6.xyzx, r2.xyzx  // positionLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.x, v1.xyzx, cb2[r4.w + 0].xyzx
                  dp3 r6.y, v1.xyzx, cb2[r4.w + 1].xyzx
                  dp3 r6.z, v1.xyzx, cb2[r4.w + 2].xyzx
                  mad r3.xyz, r3.wwww, r6.xyzx, r3.xyzx  // normalLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp4 r6.x, r1.xyzw, cb2[r4.w + 0].xyzw
                  dp4 r6.y, r1.xyzw, cb2[r4.w + 1].xyzw
                  dp4 r6.z, r1.xyzw, cb2[r4.w + 2].xyzw
                  mad r4.xyz, r3.wwww, r6.xyzx, r4.xyzx  // tangentLocal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 380
                endloop 
                
                #line 335 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r2.w, l(1.000000)
                dp4 o0.x, r2.xyzw, cb0[8].xyzw  // VSPositionNormalTextureTangentSkinned<0:NaN:Inf>
                dp4 o0.y, r2.xyzw, cb0[9].xyzw  // VSPositionNormalTextureTangentSkinned<1:NaN:Inf>
                dp4 o0.z, r2.xyzw, cb0[10].xyzw  // VSPositionNormalTextureTangentSkinned<2:NaN:Inf>
                dp4 o0.w, r2.xyzw, cb0[11].xyzw  // VSPositionNormalTextureTangentSkinned<3:NaN:Inf>
                dp4 o1.x, r2.xyzw, cb0[0].xyzw  // VSPositionNormalTextureTangentSkinned<4:NaN:Inf>
                dp4 o1.y, r2.xyzw, cb0[1].xyzw  // VSPositionNormalTextureTangentSkinned<5:NaN:Inf>
                dp4 o1.z, r2.xyzw, cb0[2].xyzw  // VSPositionNormalTextureTangentSkinned<6:NaN:Inf>
                dp3 r0.x, r3.xyzx, cb0[4].xyzx
                dp3 r0.y, r3.xyzx, cb0[5].xyzx
                dp3 r0.z, r3.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureTangentSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                dp3 o3.x, r4.xyzx, cb0[0].xyzx  // VSPositionNormalTextureTangentSkinned<10:NaN:Inf>
                dp3 o3.y, r4.xyzx, cb0[1].xyzx  // VSPositionNormalTextureTangentSkinned<11:NaN:Inf>
                dp3 o3.z, r4.xyzx, cb0[2].xyzx  // VSPositionNormalTextureTangentSkinned<12:NaN:Inf>
                dp4 o5.x, r2.xyzw, cb0[12].xyzw  // VSPositionNormalTextureTangentSkinned<15:NaN:Inf>
                dp4 o5.y, r2.xyzw, cb0[13].xyzw  // VSPositionNormalTextureTangentSkinned<16:NaN:Inf>
                dp4 o5.z, r2.xyzw, cb0[14].xyzw  // VSPositionNormalTextureTangentSkinned<17:NaN:Inf>
                dp4 o5.w, r2.xyzw, cb0[15].xyzw  // VSPositionNormalTextureTangentSkinned<18:NaN:Inf>
                
                #line 343
                mov o4.xy, v3.xyxx  // VSPositionNormalTextureTangentSkinned<13,14>
                mov o4.z, cb1[0].x  // VSPositionNormalTextureTangentSkinned<19>
                ret 
                // Approximately 67 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Direction;              // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  448
                //       float4 Diffuse;                // Offset:  464
                //       float4 Specular;               // Offset:  480
                //       float3 Position;               // Offset:  496
                //       float Range;                   // Offset:  508
                //       float3 Attenuation;            // Offset:  512
                //       float Padding;                 // Offset:  524
                //
                //   } gPointLight;                     // Offset:  448 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  528
                //       float4 Diffuse;                // Offset:  544
                //       float4 Specular;               // Offset:  560
                //       float3 Position;               // Offset:  576
                //       float Range;                   // Offset:  588
                //       float3 Direction;              // Offset:  592
                //       float Spot;                    // Offset:  604
                //       float3 Attenuation;            // Offset:  608
                //       float Padding;                 // Offset:  620
                //
                //   } gSpotLight;                      // Offset:  528 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  624 Size:    12
                //   float gFogStart;                   // Offset:  636 Size:     4
                //   float gFogRange;                   // Offset:  640 Size:     4
                //   float4 gFogColor;                  // Offset:  656 Size:    16
                //   float gEnableShadows;              // Offset:  672 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // SamplerShadow                   sampler_c      NA          NA    2        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[43], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 348 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[39].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t1.xyzw, s0  // normalMapSample<0:Inf,1:Inf,2:Inf>
                
                #line 125 "IncLights.fx"
                mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 129
                dp3 r1.w, v3.xyzx, v2.xyzx
                mad r2.xyz, -r1.wwww, v2.xyzx, v3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r2.yzxy, v2.zxyz
                mad r3.xyz, v2.yzxy, r2.zxyz, -r3.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 134
                mul r3.xyz, r1.yyyy, r3.xyzx
                mad r1.xyw, r1.xxxx, r2.xyxz, r3.xyxz
                mad r1.xyz, r1.zzzz, v2.xyzx, r1.xywx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315
                eq r1.w, cb0[42].x, l(1.000000)
                if_nz r1.w
                
                #line 289
                  div r2.xyz, v5.xyzx, v5.wwww  // shadowPosH<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                  add r3.xyzw, r2.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t2.xxxx, s2, r2.z  // percentLit<0:[0f,1f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,2f]>
                  add r3.xyzw, r2.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,3f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,4f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r2.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,5f]>
                  add r3.xyzw, r2.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,6f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.w  // percentLit<0:[0f,7f]>
                  add r3.xyzw, r2.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r3.xyxx, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,8f]>
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r3.zwzz, t2.xxxx, s2, r2.z
                  add r1.w, r1.w, r2.x  // percentLit<0:[0f,9f]>
                
                #line 303
                  mul r1.w, r1.w, l(0.111111)  // percentLit<0:[0f,1f]>
                
                #line 315
                else 
                  mov r1.w, l(1.000000)  // shadow<0: 1f>
                endif 
                
                #line 326
                eq r2.x, cb0[19].w, l(1.000000)
                if_nz r2.x
                
                #line 156
                  mul r2.xyz, cb0[16].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 159
                  dp3 r2.w, -cb0[19].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r3.x, l(0.000000), r2.w
                  dp3 r3.y, cb0[19].xyzx, r1.xyzx
                  add r3.y, r3.y, r3.y
                  mad r3.yzw, r1.xxyz, -r3.yyyy, cb0[19].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.y, r3.yzwy, r0.xyzx
                  max r3.y, r3.y, l(0.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, cb1[3].w
                  exp r3.y, r3.y  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r3.yzw, r3.yyyy, cb1[3].xxyz
                  mul r3.yzw, r3.yyzw, cb0[18].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r4.xyz, r3.xxxx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r3.xyz, r3.yzwy, r3.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 338
                  mul r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r3.xyz, r1.wwww, r3.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                else 
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r4.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 159
                  dp3 r1.w, -cb0[23].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r2.xyz, cb1[1].xyzx, cb0[20].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                eq r1.w, cb0[27].w, l(1.000000)
                if_nz r1.w
                
                #line 159
                  dp3 r1.w, -cb0[27].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 163
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[27].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[27].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 337
                  mad r2.xyz, cb1[1].xyzx, cb0[24].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 326
                endif 
                
                #line 343
                eq r1.w, cb0[32].w, l(1.000000)
                if_nz r1.w
                
                #line 188
                  add r5.xyz, -v1.xyzx, cb0[31].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 198
                  ge r1.w, cb0[31].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 201
                  mul r7.xyz, cb0[28].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 204
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 208
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r5.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r5.xyzx, r0.xyzx
                  max r4.w, r4.w, l(0.000000)
                  log r4.w, r4.w
                  mul r4.w, r4.w, cb1[3].w
                  exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[29].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r4.wwww, cb1[3].xyzx
                  mul r8.xyz, r8.xyzx, cb0[30].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                  and r5.xyz, r3.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r8.xyz, r3.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 218
                  mov r6.x, l(1.000000)
                  dp3 r2.w, cb0[32].xyzx, r6.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r2.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 198
                  and r7.xyz, r1.wwww, r7.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r1.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 355
                  add r2.xyz, r2.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 343
                endif 
                
                #line 360
                eq r1.w, cb0[38].w, l(1.000000)
                if_nz r1.w
                
                #line 238
                  add r5.xyz, -v1.xyzx, cb0[36].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 248
                  ge r1.w, cb0[36].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 251
                  mul r7.xyz, cb0[33].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 254
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 258
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r1.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r1.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r1.xyz, r2.wwww, cb1[2].xyzx
                  mul r1.xyz, r1.xyzx, cb0[34].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[35].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                  and r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 268
                  dp3 r2.w, -r5.xyzx, cb0[37].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[37].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 271
                  mov r6.x, l(1.000000)
                  dp3 r3.w, cb0[38].xyzx, r6.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 248
                  and r5.xyz, r1.wwww, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r1.xyz, r1.xyzx, r1.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372
                  add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r1.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r0.xyzx, r3.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 360
                endif 
                
                #line 368 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r2.xyzx, r4.xyzx
                mad r0.xyz, r1.xyzx, r0.xyzx, r3.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[40].x
                
                #line 386 "IncLights.fx"
                add r0.w, r0.w, -cb0[39].w
                div_sat r0.w, r0.w, cb0[40].x  // fogLerp<0:[0f,1f]>
                add r2.xyz, -r0.xyzx, cb0[41].xyzx
                mad r2.xyz, r0.wwww, r2.xyzx, r0.xyzx  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 372 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r2.xyzx, r0.xyzx  // PSPositionNormalTextureTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 377
                mul o0.w, r1.w, cb1[2].w  // PSPositionNormalTextureTangent<3:NaN:Inf>
                ret 
                // Approximately 203 instruction slots used
                            
            };
        }

    }

}

