//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInverse;             // Offset:   64, size:   64
    float4x4 gWorldViewProjection;      // Offset:  128, size:   64
    DirectionalLight gDirLights[3];     // Offset:  192, size:  192
    PointLight gPointLight;             // Offset:  384, size:   80
    SpotLight gSpotLight;               // Offset:  464, size:   96
    float3  gEyePositionWorld;          // Offset:  560, size:   12
    float   gFogStart;                  // Offset:  572, size:    4
    float   gFogRange;                  // Offset:  576, size:    4
    float4  gFogColor;                  // Offset:  592, size:   16
}

cbuffer cbPerObject : register(b1)
{
    float   gTextureIndex;              // Offset:    0, size:    4
    Material gMaterial;                 // Offset:   16, size:   68
}

cbuffer cbSkinned : register(b2)
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 10 local object(s)
//
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilNoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
Texture2DArray gTextureArray;
Texture2D gNormalMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 13 technique(s)
    //
    technique11 PositionColor
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                
                #line 36 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionColor<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionColor<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionColor<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionColor<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionColor<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionColor<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionColor<6:NaN:Inf>
                
                #line 40
                mov o2.xyzw, v1.xyzw  // VSPositionColor<7,8,9,10>
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 73 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 337 "IncLights.fx"
                add r0.x, r0.x, -cb0[35].w
                div_sat r0.x, r0.x, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.xyzw, -v2.xyzw, cb0[37].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 71 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[36].x
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw  // PSPositionColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 79
                ret 
                // Approximately 10 instruction slots used
                            
            };
        }

    }

    technique11 PositionColorSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // WEIGHTS                  0   xyz         2     NONE  float   xyz 
                // BONEINDICES              0   xyzw        3     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                
                #line 48 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov x0[0].x, v2.x  // weights<0>
                mov x0[1].x, v2.y  // weights<1>
                mov x0[2].x, v2.z  // weights<2>
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 57
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.x, l(0)  // i<0>
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x  // weights<0:Inf>
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                endloop 
                
                #line 60
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionColorSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionColorSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionColorSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionColorSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionColorSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionColorSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionColorSkinned<6:NaN:Inf>
                
                #line 64
                mov o2.xyzw, v1.xyzw  // VSPositionColorSkinned<7,8,9,10>
                ret 
                // Approximately 41 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 73 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 337 "IncLights.fx"
                add r0.x, r0.x, -cb0[35].w
                div_sat r0.x, r0.x, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.xyzw, -v2.xyzw, cb0[37].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 71 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[36].x
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw  // PSPositionColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 79
                ret 
                // Approximately 10 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColor
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_temps 1
                
                #line 86 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalColor<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalColor<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalColor<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalColor<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalColor<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalColor<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalColor<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx
                dp3 r0.y, v1.xyzx, cb0[5].xyzx
                dp3 r0.z, v1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalColor<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 93
                mov o3.xyzw, v2.xyzw  // VSPositionNormalColor<10,11,12,13>
                ret 
                // Approximately 17 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 127 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[3].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[3].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 142 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, v3.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 144 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                mul o0.w, v3.w, cb1[2].w  // PSPositionNormalColor<3:Inf>
                ret 
                // Approximately 160 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColorSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // WEIGHTS                  0   xyz         3     NONE  float   xyz 
                // BONEINDICES              0   xyzw        4     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 101 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov x0[0].x, v3.x  // weights<0>
                mov x0[1].x, v3.y  // weights<1>
                mov x0[2].x, v3.z  // weights<2>
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 111
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.x, l(0)  // i<0>
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x  // weights<0:Inf>
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 109
                endloop 
                
                #line 115
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionNormalColorSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionNormalColorSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionNormalColorSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionNormalColorSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionNormalColorSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionNormalColorSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionNormalColorSkinned<6:NaN:Inf>
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalColorSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 122
                mov o3.xyzw, v2.xyzw  // VSPositionNormalColorSkinned<10,11,12,13>
                ret 
                // Approximately 52 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 127 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[3].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[3].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 142 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, v3.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 144 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                mul o0.w, v3.w, cb1[2].w  // PSPositionNormalColor<3:Inf>
                ret 
                // Approximately 160 instruction slots used
                            
            };
        }

    }

    technique11 PositionTexture
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 197 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 337 "IncLights.fx"
                add r0.x, r0.x, -cb0[35].w
                div_sat r0.x, r0.x, cb0[36].x  // fogLerp<0:[0f,1f]>
                
                #line 193 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // litColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 339 "IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[37].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 195 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[36].x
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 203
                mul o0.w, r0.w, cb1[2].w  // PSPositionTexture<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSPositionTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureRED
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 210 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.xyzw, s0  // litColor<0:Inf>
                
                #line 213
                mov o0.xyz, r0.xxxx  // PSPositionTextureRED<0:Inf,1:Inf,2:Inf>
                mov o0.w, l(1.000000)  // PSPositionTextureRED<3: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureGREEN
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.yxzw, s0  // litColor<1:Inf>
                
                #line 221
                mov o0.xyz, r0.xxxx  // PSPositionTextureGREEN<0:Inf,1:Inf,2:Inf>
                mov o0.w, l(1.000000)  // PSPositionTextureGREEN<3: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureBLUE
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                
                #line 158 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionTexture<6:NaN:Inf>
                
                #line 163
                mov o2.xy, v1.xyxx  // VSPositionTexture<7,8>
                mov o2.z, cb1[0].x  // VSPositionTexture<9>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 226 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.zxyw, s0  // litColor<2:Inf>
                
                #line 229
                mov o0.xyz, r0.xxxx  // PSPositionTextureBLUE<0:Inf,1:Inf,2:Inf>
                mov o0.w, l(1.000000)  // PSPositionTextureBLUE<3: 1f>
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // WEIGHTS                  0   xyz         2     NONE  float   xyz 
                // BONEINDICES              0   xyzw        3     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                
                #line 171 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov x0[0].x, v2.x  // weights<0>
                mov x0[1].x, v2.y  // weights<1>
                mov x0[2].x, v2.z  // weights<2>
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 180
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.x, l(0)  // i<0>
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x  // weights<0:Inf>
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                endloop 
                
                #line 183
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionTextureSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionTextureSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionTextureSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionTextureSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionTextureSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionTextureSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionTextureSkinned<6:NaN:Inf>
                
                #line 188
                mov o2.xy, v1.xyxx  // VSPositionTextureSkinned<7,8>
                mov o2.z, cb1[0].x  // VSPositionTextureSkinned<9>
                ret 
                // Approximately 42 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // textureIndex             0     z         2     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 197 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 337 "IncLights.fx"
                add r0.x, r0.x, -cb0[35].w
                div_sat r0.x, r0.x, cb0[36].x  // fogLerp<0:[0f,1f]>
                
                #line 193 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // litColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 339 "IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[37].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 195 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[36].x
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 203
                mul o0.w, r0.w, cb1[2].w  // PSPositionTexture<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSPositionTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTexture
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 1
                
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalTexture<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalTexture<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalTexture<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalTexture<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalTexture<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalTexture<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalTexture<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx
                dp3 r0.y, v1.xyzx, cb0[5].xyzx
                dp3 r0.z, v1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTexture<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 242
                mov o3.xy, v2.xyxx  // VSPositionNormalTexture<10,11>
                mov o3.z, cb1[0].x  // VSPositionNormalTexture<12>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 275 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[3].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[3].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 290 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, v3.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                mul o0.w, r4.w, cb1[2].w  // PSPositionNormalTexture<3:NaN:Inf>
                ret 
                // Approximately 161 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // WEIGHTS                  0   xyz         3     NONE  float   xyz 
                // BONEINDICES              0   xyzw        4     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 250 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov x0[0].x, v3.x  // weights<0>
                mov x0[1].x, v3.y  // weights<1>
                mov x0[2].x, v3.z  // weights<2>
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 260
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.x, l(0)  // i<0>
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x  // weights<0:Inf>
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 258
                endloop 
                
                #line 264
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionNormalTextureSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionNormalTextureSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionNormalTextureSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionNormalTextureSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionNormalTextureSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionNormalTextureSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionNormalTextureSkinned<6:NaN:Inf>
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 270
                mov o3.xy, v2.xyxx  // VSPositionNormalTextureSkinned<10,11>
                mov o3.z, cb1[0].x  // VSPositionNormalTextureSkinned<12>
                ret 
                // Approximately 53 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // textureIndex             0     z         3     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 275 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277 "IncLights.fx"
                eq r1.x, cb0[15].w, l(1.000000)
                if_nz r1.x
                
                #line 143
                  mul r1.xyz, cb0[12].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.x, l(0.000000), r1.w
                  dp3 r2.y, cb0[15].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r2.yzw, v2.xxyz, -r2.yyyy, cb0[15].xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.y, r2.yzwy, r0.xyzx
                  max r2.y, r2.y, l(0.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, cb1[3].w
                  exp r2.y, r2.y  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r1.wwww, cb1[2].xyzx
                  mul r3.xyz, r3.xyzx, cb0[13].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.yzw, r2.yyyy, cb1[3].xxyz
                  mul r2.yzw, r2.yyzw, cb0[14].xxyz  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.xxxx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r2.xyz, r2.yzwy, r2.xxxx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r1.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[16].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, v2.xyzx
                  add r3.w, r3.w, r3.w
                  mad r4.xyz, v2.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r4.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r4.xyz, r1.wwww, cb1[2].xyzx
                  mul r4.xyz, r4.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, cb1[3].xyzx
                  mul r5.xyz, r5.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r2.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r1.xyz, cb1[1].xyzx, cb0[20].xyzx, r1.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r4.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r6.xyz, cb0[24].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r0.xyzx
                  max r4.x, r4.x, l(0.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, cb1[3].w
                  exp r4.x, r4.x  // specFactor<0:NaN:Inf>
                  mul r4.yzw, r2.wwww, cb1[2].xxyz
                  mul r4.yzw, r4.yyzw, cb0[25].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r4.xxxx, cb1[3].xyzx
                  mul r7.xyz, r7.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r4.xyz, r3.wwww, r4.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r7.xyz, r3.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r5.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r5.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r6.xyz, r1.wwww, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r4.xyz, r1.wwww, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r1.xyz, r1.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r4.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r5.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r4.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r5.z, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r5.y
                  div r4.xyz, r4.xyzx, r5.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r6.xyz, cb0[29].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r4.xyzx, v2.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r4.xyzx, v2.xyzx
                  add r4.w, r4.w, r4.w
                  mad r7.xyz, v2.xyzx, -r4.wwww, -r4.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r7.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r7.xyz, r2.wwww, cb1[2].xyzx
                  mul r7.xyz, r7.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r7.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r4.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r5.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r5.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r4.xyz, r2.wwww, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r5.xyz, r3.wwww, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r4.xyz, r1.wwww, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r1.xyz, r1.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r0.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 290 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, v3.xyzx, t0.xyzw, s0  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r1.xyzx, r3.xyzx
                mad r0.xyz, r4.xyzx, r0.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r1.yzw, -r0.xxyz, cb0[37].xxyz
                mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx  // PSPositionNormalTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 299
                mul o0.w, r4.w, cb1[2].w  // PSPositionNormalTexture<3:NaN:Inf>
                ret 
                // Approximately 161 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangent
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_temps 1
                
                #line 308 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw  // VSPositionNormalTextureTangent<0:NaN:Inf>
                dp4 o0.y, r0.xyzw, cb0[9].xyzw  // VSPositionNormalTextureTangent<1:NaN:Inf>
                dp4 o0.z, r0.xyzw, cb0[10].xyzw  // VSPositionNormalTextureTangent<2:NaN:Inf>
                dp4 o0.w, r0.xyzw, cb0[11].xyzw  // VSPositionNormalTextureTangent<3:NaN:Inf>
                dp4 o1.x, r0.xyzw, cb0[0].xyzw  // VSPositionNormalTextureTangent<4:NaN:Inf>
                dp4 o1.y, r0.xyzw, cb0[1].xyzw  // VSPositionNormalTextureTangent<5:NaN:Inf>
                dp4 o1.z, r0.xyzw, cb0[2].xyzw  // VSPositionNormalTextureTangent<6:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb0[4].xyzx
                dp3 r0.y, v1.xyzx, cb0[5].xyzx
                dp3 r0.z, v1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureTangent<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                dp3 r0.x, v2.xyzx, cb0[0].xyzx
                dp3 r0.y, v2.xyzx, cb0[1].xyzx
                dp3 r0.z, v2.xyzx, cb0[2].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o3.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureTangent<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                
                #line 316
                mov o4.xy, v3.xyxx  // VSPositionNormalTextureTangent<13,14>
                mov o4.z, cb1[0].x  // VSPositionNormalTextureTangent<15>
                ret 
                // Approximately 24 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 354 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t1.xyzw, s0  // normalMapSample<0:Inf,1:Inf,2:Inf>
                
                #line 112 "IncLights.fx"
                mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 116
                dp3 r1.w, v3.xyzx, v2.xyzx
                mad r2.xyz, -r1.wwww, v2.xyzx, v3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r2.yzxy, v2.zxyz
                mad r3.xyz, v2.yzxy, r2.zxyz, -r3.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mul r3.xyz, r1.yyyy, r3.xyzx
                mad r1.xyw, r1.xxxx, r2.xyxz, r3.xyxz
                mad r1.xyz, r1.zzzz, v2.xyzx, r1.xywx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                eq r1.w, cb0[15].w, l(1.000000)
                if_nz r1.w
                
                #line 143
                  mul r2.xyz, cb0[12].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.x, cb0[15].xyzx, r1.xyzx
                  add r3.x, r3.x, r3.x
                  mad r3.xyz, r1.xyzx, -r3.xxxx, cb0[15].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.x, r3.xyzx, r0.xyzx
                  max r3.x, r3.x, l(0.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, cb1[3].w
                  exp r3.x, r3.x  // specFactor<0:NaN:Inf>
                  mul r3.yzw, r1.wwww, cb1[2].xxyz
                  mul r3.yzw, r3.yyzw, cb0[13].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r3.xxxx, cb1[3].xyzx
                  mul r4.xyz, r4.xyzx, cb0[14].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.wwww, r3.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r4.xyz, r2.wwww, r4.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r4.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r2.xyz, cb1[1].xyzx, cb0[16].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r2.xyz, cb1[1].xyzx, cb0[20].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r5.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r7.xyz, cb0[24].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r5.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r5.xyzx, r0.xyzx
                  max r4.w, r4.w, l(0.000000)
                  log r4.w, r4.w
                  mul r4.w, r4.w, cb1[3].w
                  exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r4.wwww, cb1[3].xyzx
                  mul r8.xyz, r8.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r5.xyz, r3.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r8.xyz, r3.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r6.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r6.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r2.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r7.xyz, r1.wwww, r7.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r1.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r2.xyz, r2.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r5.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r7.xyz, cb0[29].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r1.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r1.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r1.xyz, r2.wwww, cb1[2].xyzx
                  mul r1.xyz, r1.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r5.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r6.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r6.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r5.xyz, r1.wwww, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r1.xyz, r1.xyzx, r1.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r1.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r0.xyzx, r4.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 372 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r2.xyzx, r3.xyzx
                mad r0.xyz, r1.xyzx, r0.xyzx, r4.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r2.xyz, -r0.xyzx, cb0[37].xyzx
                mad r2.xyz, r0.wwww, r2.xyzx, r0.xyzx  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 376 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r2.xyzx, r0.xyzx  // PSPositionNormalTextureTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 381
                mul o0.w, r1.w, cb1[2].w  // PSPositionNormalTextureTangent<3:NaN:Inf>
                ret 
                // Approximately 173 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangentSkinned
    {
        pass P0
        {
            RasterizerState = RasterizerSolid;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96 [unused]
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  572 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  576 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  592 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                
                #line 324 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                mov x0[3].x, r0.x  // weights<3>
                
                #line 335
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.x, l(0)  // i<0>
                loop 
                  ige r2.w, r4.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r4.x + 0].x  // weights<0:Inf>
                  ineg r3.w, r4.x
                  ult r5.xyz, r4.xxxx, l(1, 2, 3, 0)
                  and r6.y, r3.w, r5.y
                  iadd r4.xy, r4.xxxx, l(1, -3, 0, 0)  // i<0>
                  movc r6.z, r5.y, l(0), r4.y
                  ieq r6.w, r5.z, l(0)
                  mov r6.x, r5.x
                  and r5.xyzw, r6.xyzw, v5.xyzw
                  or r4.yz, r5.yywy, r5.xxzx
                  or r3.w, r4.z, r4.y
                  ishl r3.w, r3.w, l(2)
                  dp4 r5.x, r0.xyzw, cb2[r3.w + 0].xyzw
                  dp4 r5.y, r0.xyzw, cb2[r3.w + 1].xyzw
                  dp4 r5.z, r0.xyzw, cb2[r3.w + 2].xyzw
                  mad r1.xyz, r2.wwww, r5.xyzx, r1.xyzx  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.x, v1.xyzx, cb2[r3.w + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb2[r3.w + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb2[r3.w + 2].xyzx
                  mad r2.xyz, r2.wwww, r5.xyzx, r2.xyzx  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp4 r5.x, v2.xyzw, cb2[r3.w + 0].xyzw
                  dp4 r5.y, v2.xyzw, cb2[r3.w + 1].xyzw
                  dp4 r5.z, v2.xyzw, cb2[r3.w + 2].xyzw
                  mad r3.xyz, r2.wwww, r5.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 333
                endloop 
                
                #line 341
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw  // VSPositionNormalTextureTangentSkinned<0:NaN:Inf>
                dp4 o0.y, r1.xyzw, cb0[9].xyzw  // VSPositionNormalTextureTangentSkinned<1:NaN:Inf>
                dp4 o0.z, r1.xyzw, cb0[10].xyzw  // VSPositionNormalTextureTangentSkinned<2:NaN:Inf>
                dp4 o0.w, r1.xyzw, cb0[11].xyzw  // VSPositionNormalTextureTangentSkinned<3:NaN:Inf>
                dp4 o1.x, r1.xyzw, cb0[0].xyzw  // VSPositionNormalTextureTangentSkinned<4:NaN:Inf>
                dp4 o1.y, r1.xyzw, cb0[1].xyzw  // VSPositionNormalTextureTangentSkinned<5:NaN:Inf>
                dp4 o1.z, r1.xyzw, cb0[2].xyzw  // VSPositionNormalTextureTangentSkinned<6:NaN:Inf>
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureTangentSkinned<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                dp3 r0.x, r3.xyzx, cb0[0].xyzx
                dp3 r0.y, r3.xyzx, cb0[1].xyzx
                dp3 r0.z, r3.xyzx, cb0[2].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o3.xyz, r0.wwww, r0.xyzx  // VSPositionNormalTextureTangentSkinned<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                
                #line 349
                mov o4.xy, v3.xyxx  // VSPositionNormalTextureTangentSkinned<13,14>
                mov o4.z, cb1[0].x  // VSPositionNormalTextureTangentSkinned<15>
                ret 
                // Approximately 64 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float3 Direction;              // Offset:  240
                //       float Padding;                 // Offset:  252
                //
                //   } gDirLights[3];                   // Offset:  192 Size:   192
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float3 Position;               // Offset:  432
                //       float Range;                   // Offset:  444
                //       float3 Attenuation;            // Offset:  448
                //       float Padding;                 // Offset:  460
                //
                //   } gPointLight;                     // Offset:  384 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  464
                //       float4 Diffuse;                // Offset:  480
                //       float4 Specular;               // Offset:  496
                //       float3 Position;               // Offset:  512
                //       float Range;                   // Offset:  524
                //       float3 Direction;              // Offset:  528
                //       float Spot;                    // Offset:  540
                //       float3 Attenuation;            // Offset:  544
                //       float Padding;                 // Offset:  556
                //
                //   } gSpotLight;                      // Offset:  464 Size:    96
                //   float3 gEyePositionWorld;          // Offset:  560 Size:    12
                //   float gFogStart;                   // Offset:  572 Size:     4
                //   float gFogRange;                   // Offset:  576 Size:     4
                //   float4 gFogColor;                  // Offset:  592 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float4 Reflect;                // Offset:   64
                //       float Padding;                 // Offset:   80
                //
                //   } gMaterial;                       // Offset:   16 Size:    68
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // textureIndex             0     z         4     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 354 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[35].xyzx  // toEyeWorld<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r0.xyzx, r0.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                div r0.xyz, r0.xyzx, r0.wwww  // toEyeWorld<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t1.xyzw, s0  // normalMapSample<0:Inf,1:Inf,2:Inf>
                
                #line 112 "IncLights.fx"
                mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 116
                dp3 r1.w, v3.xyzx, v2.xyzx
                mad r2.xyz, -r1.wwww, v2.xyzx, v3.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r2.yzxy, v2.zxyz
                mad r3.xyz, v2.yzxy, r2.zxyz, -r3.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mul r3.xyz, r1.yyyy, r3.xyzx
                mad r1.xyw, r1.xxxx, r2.xyxz, r3.xyxz
                mad r1.xyz, r1.zzzz, v2.xyzx, r1.xywx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                eq r1.w, cb0[15].w, l(1.000000)
                if_nz r1.w
                
                #line 143
                  mul r2.xyz, cb0[12].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 146
                  dp3 r1.w, -cb0[15].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.x, cb0[15].xyzx, r1.xyzx
                  add r3.x, r3.x, r3.x
                  mad r3.xyz, r1.xyzx, -r3.xxxx, cb0[15].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.x, r3.xyzx, r0.xyzx
                  max r3.x, r3.x, l(0.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, cb1[3].w
                  exp r3.x, r3.x  // specFactor<0:NaN:Inf>
                  mul r3.yzw, r1.wwww, cb1[2].xxyz
                  mul r3.yzw, r3.yyzw, cb0[13].xxyz  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r3.xxxx, cb1[3].xyzx
                  mul r4.xyz, r4.xyzx, cb0[14].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r3.xyz, r2.wwww, r3.yzwy  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r4.xyz, r2.wwww, r4.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                else 
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r4.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                eq r1.w, cb0[19].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[19].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[19].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[19].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[17].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[18].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r2.xyz, cb1[1].xyzx, cb0[16].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                eq r1.w, cb0[23].w, l(1.000000)
                if_nz r1.w
                
                #line 146
                  dp3 r1.w, -cb0[23].xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 150
                  lt r2.w, l(0.000000), r1.w
                  dp3 r3.w, cb0[23].xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mad r5.xyz, r1.xyzx, -r3.wwww, cb0[23].xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r5.xyzx, r0.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, cb1[3].w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r1.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[21].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r3.wwww, cb1[3].xyzx
                  mul r6.xyz, r6.xyzx, cb0[22].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 150
                  and r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r2.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288
                  mad r2.xyz, cb1[1].xyzx, cb0[20].xyzx, r2.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 277
                endif 
                
                #line 294
                eq r1.w, cb0[28].w, l(1.000000)
                if_nz r1.w
                
                #line 175
                  add r5.xyz, -v1.xyzx, cb0[27].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 178
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 185
                  ge r1.w, cb0[27].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 188
                  mul r7.xyz, cb0[24].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 191
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 195
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r5.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r5.xyzx, r0.xyzx
                  max r4.w, r4.w, l(0.000000)
                  log r4.w, r4.w
                  mul r4.w, r4.w, cb1[3].w
                  exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, cb1[2].xyzx
                  mul r5.xyz, r5.xyzx, cb0[25].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r4.wwww, cb1[3].xyzx
                  mul r8.xyz, r8.xyzx, cb0[26].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 195
                  and r5.xyz, r3.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r8.xyz, r3.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 205
                  mov r6.x, l(1.000000)
                  dp3 r2.w, cb0[28].xyzx, r6.xyzx
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r2.wwww, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                  and r7.xyz, r1.wwww, r7.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                  and r5.xyz, r1.wwww, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r6.xyz, r1.wwww, r6.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 306
                  add r2.xyz, r2.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r6.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 294
                endif 
                
                #line 311
                eq r1.w, cb0[34].w, l(1.000000)
                if_nz r1.w
                
                #line 225
                  add r5.xyz, -v1.xyzx, cb0[32].xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 228
                  dp3 r6.z, r5.xyzx, r5.xyzx
                  sqrt r6.y, r6.z  // d<0:NaN:Inf>
                
                #line 235
                  ge r1.w, cb0[32].w, r6.y
                  div r5.xyz, r5.xyzx, r6.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 238
                  mul r7.xyz, cb0[29].xyzx, cb1[1].xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 241
                  dp3 r2.w, r5.xyzx, r1.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 245
                  lt r3.w, l(0.000000), r2.w
                  dp3 r4.w, -r5.xyzx, r1.xyzx
                  add r4.w, r4.w, r4.w
                  mad r1.xyz, r1.xyzx, -r4.wwww, -r5.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r1.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, cb1[3].w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r1.xyz, r2.wwww, cb1[2].xyzx
                  mul r1.xyz, r1.xyzx, cb0[30].xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xxxx, cb1[3].xyzx
                  mul r0.xyz, r0.xyzx, cb0[31].xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 245
                  and r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                  dp3 r2.w, -r5.xyzx, cb0[33].xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, cb0[33].w
                  exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 258
                  mov r6.x, l(1.000000)
                  dp3 r3.w, cb0[34].xyzx, r6.xyzx
                  div r3.w, r2.w, r3.w  // attenuation<0:NaN:Inf>
                  mul r5.xyz, r2.wwww, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r1.xyz, r1.xyzx, r3.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r3.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                  and r5.xyz, r1.wwww, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r1.xyz, r1.xyzx, r1.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  and r0.xyz, r0.xyzx, r1.wwww  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 323
                  add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r1.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r0.xyzx, r4.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                endif 
                
                #line 372 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // textureColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r2.xyzx, r3.xyzx
                mad r0.xyz, r1.xyzx, r0.xyzx, r4.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                lt r1.x, l(0.000000), cb0[36].x
                
                #line 337 "IncLights.fx"
                add r0.w, r0.w, -cb0[35].w
                div_sat r0.w, r0.w, cb0[36].x  // fogLerp<0:[0f,1f]>
                add r2.xyz, -r0.xyzx, cb0[37].xyzx
                mad r2.xyz, r0.wwww, r2.xyzx, r0.xyzx  // ComputeFog<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 376 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r1.xxxx, r2.xyzx, r0.xyzx  // PSPositionNormalTextureTangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 381
                mul o0.w, r1.w, cb1[2].w  // PSPositionNormalTextureTangent<3:NaN:Inf>
                ret 
                // Approximately 173 instruction slots used
                            
            };
        }

    }

}

