//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInverse;             // Offset:   64, size:   64
    float4x4 gWorldViewProjection;      // Offset:  128, size:   64
    float3  gEyePositionWorld;          // Offset:  192, size:   12
    DirectionalLight gDirLights[3];     // Offset:  208, size:  136
    PointLight gPointLights[4];         // Offset:  352, size:  188
    SpotLight gSpotLights[4];           // Offset:  544, size:  252
    float   gFogStart;                  // Offset:  796, size:    4
    float   gFogRange;                  // Offset:  800, size:    4
    float4  gFogColor;                  // Offset:  816, size:   16
    float4x4 gShadowTransform;          // Offset:  832, size:   64
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   24
}

cbuffer cbSkinned : register(b2)
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

cbuffer cbPerInstance : register(b3)
{
    float   gTextureIndex;              // Offset:    0, size:    4
}

//
// 7 local object(s)
//
SamplerState SamplerPoint
{
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState SamplerComparisonShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2DArray gTextureArray;
Texture2D gNormalMap;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 25 technique(s)
    //
    technique11 PositionColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   o2.x <- <VSPositionColor return value>.color.x; o2.y <- <VSPositionColor return value>.color.y; o2.z <- <VSPositionColor return value>.color.z; o2.w <- <VSPositionColor return value>.color.w; 
                //   o1.x <- <VSPositionColor return value>.positionWorld.x; o1.y <- <VSPositionColor return value>.positionWorld.y; o1.z <- <VSPositionColor return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColor return value>.positionHomogeneous.x; o0.y <- <VSPositionColor return value>.positionHomogeneous.y; o0.z <- <VSPositionColor return value>.positionHomogeneous.z; o0.w <- <VSPositionColor return value>.positionHomogeneous.w
                //
                #line 45 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 49
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 110 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                mad r1.xyzw, -v2.xyzw, cb1[0].xyzw, cb0[51].xyzw
                
                #line 106 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r2.xyzw, v2.xyzw, cb1[0].xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 108 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[50].x
                
                #line 114
                movc o0.xyzw, r1.xxxx, r0.xyzw, r2.xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 PositionColorI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // localTransform           0   xyzw        2     NONE   float   xyzw
                // localTransform           1   xyzw        3     NONE   float   xyzw
                // localTransform           2   xyzw        4     NONE   float   xyzw
                // localTransform           3   xyzw        5     NONE   float   xyzw
                // textureIndex             0   x           6     NONE   float       
                // SV_InstanceID            0   x           7   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.localTransform._m00; v2.y <- input.localTransform._m01; v2.z <- input.localTransform._m02; v2.w <- input.localTransform._m03; 
                //   v3.x <- input.localTransform._m10; v3.y <- input.localTransform._m11; v3.z <- input.localTransform._m12; v3.w <- input.localTransform._m13; 
                //   v4.x <- input.localTransform._m20; v4.y <- input.localTransform._m21; v4.z <- input.localTransform._m22; v4.w <- input.localTransform._m23; 
                //   v5.x <- input.localTransform._m30; v5.y <- input.localTransform._m31; v5.z <- input.localTransform._m32; v5.w <- input.localTransform._m33; 
                //   v6.x <- input.textureIndex; 
                //   v7.x <- input.instanceId; 
                //   o2.x <- <VSPositionColorI return value>.color.x; o2.y <- <VSPositionColorI return value>.color.y; o2.z <- <VSPositionColorI return value>.color.z; o2.w <- <VSPositionColorI return value>.color.w; 
                //   o1.x <- <VSPositionColorI return value>.positionWorld.x; o1.y <- <VSPositionColorI return value>.positionWorld.y; o1.z <- <VSPositionColorI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColorI return value>.positionHomogeneous.x; o0.y <- <VSPositionColorI return value>.positionHomogeneous.y; o0.z <- <VSPositionColorI return value>.positionHomogeneous.z; o0.w <- <VSPositionColorI return value>.positionHomogeneous.w
                //
                #line 55 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 61
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 110 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                mad r1.xyzw, -v2.xyzw, cb1[0].xyzw, cb0[51].xyzw
                
                #line 106 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r2.xyzw, v2.xyzw, cb1[0].xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 108 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[50].x
                
                #line 114
                movc o0.xyzw, r1.xxxx, r0.xyzw, r2.xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 PositionColorSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   o2.x <- <VSPositionColorSkinned return value>.color.x; o2.y <- <VSPositionColorSkinned return value>.color.y; o2.z <- <VSPositionColorSkinned return value>.color.z; o2.w <- <VSPositionColorSkinned return value>.color.w; 
                //   o1.x <- <VSPositionColorSkinned return value>.positionWorld.x; o1.y <- <VSPositionColorSkinned return value>.positionWorld.y; o1.z <- <VSPositionColorSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColorSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionColorSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionColorSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionColorSkinned return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 376
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 382
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 76 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                
                #line 80
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 41 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 110 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                mad r1.xyzw, -v2.xyzw, cb1[0].xyzw, cb0[51].xyzw
                
                #line 106 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r2.xyzw, v2.xyzw, cb1[0].xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 108 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[50].x
                
                #line 114
                movc o0.xyzw, r1.xxxx, r0.xyzw, r2.xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 PositionColorSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float       
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o2.x <- <VSPositionColorSkinnedI return value>.color.x; o2.y <- <VSPositionColorSkinnedI return value>.color.y; o2.z <- <VSPositionColorSkinnedI return value>.color.z; o2.w <- <VSPositionColorSkinnedI return value>.color.w; 
                //   o1.x <- <VSPositionColorSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionColorSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionColorSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColorSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionColorSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionColorSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionColorSkinnedI return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 376
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 382
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 95 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r1.yyyy, v5.xyzw
                mad r0.xyzw, r1.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 101
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 44 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 110 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                mad r1.xyzw, -v2.xyzw, cb1[0].xyzw, cb0[51].xyzw
                
                #line 106 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r2.xyzw, v2.xyzw, cb1[0].xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 108 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[50].x
                
                #line 114
                movc o0.xyzw, r1.xxxx, r0.xyzw, r2.xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o4.x <- <VSPositionNormalColor return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColor return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColor return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColor return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColor return value>.color.x; o3.y <- <VSPositionNormalColor return value>.color.y; o3.z <- <VSPositionNormalColor return value>.color.z; o3.w <- <VSPositionNormalColor return value>.color.w; 
                //   o2.x <- <VSPositionNormalColor return value>.normalWorld.x; o2.y <- <VSPositionNormalColor return value>.normalWorld.y; o2.z <- <VSPositionNormalColor return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColor return value>.positionWorld.x; o1.y <- <VSPositionNormalColor return value>.positionWorld.y; o1.z <- <VSPositionNormalColor return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColor return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColor return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColor return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColor return value>.positionHomogeneous.w
                //
                #line 126 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 132
                mov o3.xyzw, v2.xyzw
                
                #line 128
                dp4 o4.x, r0.xyzw, cb0[52].xyzw
                dp4 o4.y, r0.xyzw, cb0[53].xyzw
                dp4 o4.z, r0.xyzw, cb0[54].xyzw
                dp4 o4.w, r0.xyzw, cb0[55].xyzw
                
                #line 132
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerComparisonShadow         sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 201 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                mul r1.xyzw, v3.xyzw, cb1[0].xyzw  // r1.x <- matColor.x; r1.y <- matColor.y; r1.z <- matColor.z; r1.w <- matColor.w
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r0.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r1.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t0.xxxx, s0, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r1.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r0.x, r0.xyzx, r5.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r4.y, r0.x, r0.y  // r4.y <- specular
                  and r0.xy, r3.zzzz, r4.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r3.yzw, r1.xxyz, cb0[46].xxyz
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r3.yzwy  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r3.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r1.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColorI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // localTransform           0   xyzw        3     NONE   float   xyzw
                // localTransform           1   xyzw        4     NONE   float   xyzw
                // localTransform           2   xyzw        5     NONE   float   xyzw
                // localTransform           3   xyzw        6     NONE   float   xyzw
                // textureIndex             0   x           7     NONE   float       
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.localTransform._m00; v3.y <- input.localTransform._m01; v3.z <- input.localTransform._m02; v3.w <- input.localTransform._m03; 
                //   v4.x <- input.localTransform._m10; v4.y <- input.localTransform._m11; v4.z <- input.localTransform._m12; v4.w <- input.localTransform._m13; 
                //   v5.x <- input.localTransform._m20; v5.y <- input.localTransform._m21; v5.z <- input.localTransform._m22; v5.w <- input.localTransform._m23; 
                //   v6.x <- input.localTransform._m30; v6.y <- input.localTransform._m31; v6.z <- input.localTransform._m32; v6.w <- input.localTransform._m33; 
                //   v7.x <- input.textureIndex; 
                //   v8.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalColorI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColorI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColorI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColorI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColorI return value>.color.x; o3.y <- <VSPositionNormalColorI return value>.color.y; o3.z <- <VSPositionNormalColorI return value>.color.z; o3.w <- <VSPositionNormalColorI return value>.color.w; 
                //   o2.x <- <VSPositionNormalColorI return value>.normalWorld.x; o2.y <- <VSPositionNormalColorI return value>.normalWorld.y; o2.z <- <VSPositionNormalColorI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColorI return value>.positionWorld.x; o1.y <- <VSPositionNormalColorI return value>.positionWorld.y; o1.z <- <VSPositionNormalColorI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColorI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColorI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColorI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColorI return value>.positionHomogeneous.w
                //
                #line 138 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 146
                mov o3.xyzw, v2.xyzw
                
                #line 142
                dp4 o4.x, r0.xyzw, cb0[52].xyzw
                dp4 o4.y, r0.xyzw, cb0[53].xyzw
                dp4 o4.z, r0.xyzw, cb0[54].xyzw
                dp4 o4.w, r0.xyzw, cb0[55].xyzw
                
                #line 146
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerComparisonShadow         sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 201 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                mul r1.xyzw, v3.xyzw, cb1[0].xyzw  // r1.x <- matColor.x; r1.y <- matColor.y; r1.z <- matColor.z; r1.w <- matColor.w
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r0.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r1.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t0.xxxx, s0, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r1.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r0.x, r0.xyzx, r5.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r4.y, r0.x, r0.y  // r4.y <- specular
                  and r0.xy, r3.zzzz, r4.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r3.yzw, r1.xxyz, cb0[46].xxyz
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r3.yzwy  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r3.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r1.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColorSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   o4.x <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColorSkinned return value>.color.x; o3.y <- <VSPositionNormalColorSkinned return value>.color.y; o3.z <- <VSPositionNormalColorSkinned return value>.color.z; o3.w <- <VSPositionNormalColorSkinned return value>.color.w; 
                //   o2.x <- <VSPositionNormalColorSkinned return value>.normalWorld.x; o2.y <- <VSPositionNormalColorSkinned return value>.normalWorld.y; o2.z <- <VSPositionNormalColorSkinned return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColorSkinned return value>.positionWorld.x; o1.y <- <VSPositionNormalColorSkinned return value>.positionWorld.y; o1.z <- <VSPositionNormalColorSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 398
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 405
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- normalLocal.x; r2.y <- normalLocal.y; r2.z <- normalLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx
                endloop 
                
                #line 164 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                dp4 o4.x, r1.xyzw, cb0[52].xyzw
                dp4 o4.y, r1.xyzw, cb0[53].xyzw
                dp4 o4.z, r1.xyzw, cb0[54].xyzw
                dp4 o4.w, r1.xyzw, cb0[55].xyzw
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 170
                mov o3.xyzw, v2.xyzw
                ret 
                // Approximately 56 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerComparisonShadow         sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 201 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                mul r1.xyzw, v3.xyzw, cb1[0].xyzw  // r1.x <- matColor.x; r1.y <- matColor.y; r1.z <- matColor.z; r1.w <- matColor.w
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r0.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r1.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t0.xxxx, s0, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r1.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r0.x, r0.xyzx, r5.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r4.y, r0.x, r0.y  // r4.y <- specular
                  and r0.xy, r3.zzzz, r4.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r3.yzw, r1.xxyz, cb0[46].xxyz
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r3.yzwy  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r3.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r1.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalColorSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                // localTransform           0   xyzw        5     NONE   float   xyzw
                // localTransform           1   xyzw        6     NONE   float   xyzw
                // localTransform           2   xyzw        7     NONE   float   xyzw
                // localTransform           3   xyzw        8     NONE   float   xyzw
                // textureIndex             0   x           9     NONE   float       
                // SV_InstanceID            0   x          10   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   v5.x <- input.localTransform._m00; v5.y <- input.localTransform._m01; v5.z <- input.localTransform._m02; v5.w <- input.localTransform._m03; 
                //   v6.x <- input.localTransform._m10; v6.y <- input.localTransform._m11; v6.z <- input.localTransform._m12; v6.w <- input.localTransform._m13; 
                //   v7.x <- input.localTransform._m20; v7.y <- input.localTransform._m21; v7.z <- input.localTransform._m22; v7.w <- input.localTransform._m23; 
                //   v8.x <- input.localTransform._m30; v8.y <- input.localTransform._m31; v8.z <- input.localTransform._m32; v8.w <- input.localTransform._m33; 
                //   v9.x <- input.textureIndex; 
                //   v10.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColorSkinnedI return value>.color.x; o3.y <- <VSPositionNormalColorSkinnedI return value>.color.y; o3.z <- <VSPositionNormalColorSkinnedI return value>.color.z; o3.w <- <VSPositionNormalColorSkinnedI return value>.color.w; 
                //   o2.x <- <VSPositionNormalColorSkinnedI return value>.normalWorld.x; o2.y <- <VSPositionNormalColorSkinnedI return value>.normalWorld.y; o2.z <- <VSPositionNormalColorSkinnedI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColorSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionNormalColorSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionNormalColorSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 398
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 405
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalLocal.x; r1.y <- normalLocal.y; r1.z <- normalLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- positionLocal.x; r2.y <- positionLocal.y; r2.z <- positionLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r1.w, r3.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r3.x + 0].x
                  ineg r2.w, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r2.w, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r2.xyz, r1.wwww, r4.xyzx, r2.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r4.xyzx, r1.xyzx
                endloop 
                
                #line 188 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r2.yyyy, v6.xyzw
                mad r0.xyzw, r2.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r2.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp4 o4.x, r0.xyzw, cb0[52].xyzw
                dp4 o4.y, r0.xyzw, cb0[53].xyzw
                dp4 o4.z, r0.xyzw, cb0[54].xyzw
                dp4 o4.w, r0.xyzw, cb0[55].xyzw
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 196
                mov o3.xyzw, v2.xyzw
                ret 
                // Approximately 59 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerComparisonShadow         sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 201 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                mul r1.xyzw, v3.xyzw, cb1[0].xyzw  // r1.x <- matColor.x; r1.y <- matColor.y; r1.z <- matColor.z; r1.w <- matColor.w
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r0.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r1.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t0.xxxx, s0, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t0.xxxx, s0, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r1.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t0.xxxx, s0, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t0.xxxx, s0, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r1.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r0.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r0.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r1.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r0.x, r0.xyzx, r5.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r4.y, r0.x, r0.y  // r4.y <- specular
                  and r0.xy, r3.zzzz, r4.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r3.yzw, r1.xxyz, cb0[46].xxyz
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r3.yzwy  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r3.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r1.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 241
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                
                #line 301 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[51].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[50].x
                
                #line 309
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureRED
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 241
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureRED return value>.x; o0.y <- <PSPositionTextureRED return value>.y; o0.z <- <PSPositionTextureRED return value>.z; o0.w <- <PSPositionTextureRED return value>.w
                //
                #line 317 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.xyzw, s0  // r0.x <- litColor.x
                
                #line 320
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureGREEN
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 241
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureGREEN return value>.x; o0.y <- <PSPositionTextureGREEN return value>.y; o0.z <- <PSPositionTextureGREEN return value>.z; o0.w <- <PSPositionTextureGREEN return value>.w
                //
                #line 324 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.yxzw, s0  // r0.x <- litColor.y
                
                #line 327
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureBLUE
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 241
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureBLUE return value>.x; o0.y <- <PSPositionTextureBLUE return value>.y; o0.z <- <PSPositionTextureBLUE return value>.z; o0.w <- <PSPositionTextureBLUE return value>.w
                //
                #line 331 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.zxyw, s0  // r0.x <- litColor.z
                
                #line 334
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureALPHA
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 241
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureALPHA return value>.x; o0.y <- <PSPositionTextureALPHA return value>.y; o0.z <- <PSPositionTextureALPHA return value>.z; o0.w <- <PSPositionTextureALPHA return value>.w
                //
                #line 338 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.wxyz, s0  // r0.x <- litColor.w
                
                #line 341
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureNOALPHA
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 236 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 241
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureNOALPHA return value>.x; o0.y <- <PSPositionTextureNOALPHA return value>.y; o0.z <- <PSPositionTextureNOALPHA return value>.z; o0.w <- <PSPositionTextureNOALPHA return value>.w
                //
                #line 345 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.xyz, v2.xyzx, t0.xyzw, s0  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // localTransform           0   xyzw        2     NONE   float   xyzw
                // localTransform           1   xyzw        3     NONE   float   xyzw
                // localTransform           2   xyzw        4     NONE   float   xyzw
                // localTransform           3   xyzw        5     NONE   float   xyzw
                // textureIndex             0   x           6     NONE   float   x   
                // SV_InstanceID            0   x           7   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.localTransform._m00; v2.y <- input.localTransform._m01; v2.z <- input.localTransform._m02; v2.w <- input.localTransform._m03; 
                //   v3.x <- input.localTransform._m10; v3.y <- input.localTransform._m11; v3.z <- input.localTransform._m12; v3.w <- input.localTransform._m13; 
                //   v4.x <- input.localTransform._m20; v4.y <- input.localTransform._m21; v4.z <- input.localTransform._m22; v4.w <- input.localTransform._m23; 
                //   v5.x <- input.localTransform._m30; v5.y <- input.localTransform._m31; v5.z <- input.localTransform._m32; v5.w <- input.localTransform._m33; 
                //   v6.x <- input.textureIndex; 
                //   v7.x <- input.instanceId; 
                //   o2.x <- <VSPositionTextureI return value>.tex.x; o2.y <- <VSPositionTextureI return value>.tex.y; o2.z <- <VSPositionTextureI return value>.textureIndex; 
                //   o1.x <- <VSPositionTextureI return value>.positionWorld.x; o1.y <- <VSPositionTextureI return value>.positionWorld.y; o1.z <- <VSPositionTextureI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTextureI return value>.positionHomogeneous.x; o0.y <- <VSPositionTextureI return value>.positionHomogeneous.y; o0.z <- <VSPositionTextureI return value>.positionHomogeneous.z; o0.w <- <VSPositionTextureI return value>.positionHomogeneous.w
                //
                #line 247 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 254
                mov o2.xy, v1.xyxx
                mov o2.z, v6.x
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                
                #line 301 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[51].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[50].x
                
                #line 309
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   o2.x <- <VSPositionTextureSkinned return value>.tex.x; o2.y <- <VSPositionTextureSkinned return value>.tex.y; o2.z <- <VSPositionTextureSkinned return value>.textureIndex; 
                //   o1.x <- <VSPositionTextureSkinned return value>.positionWorld.x; o1.y <- <VSPositionTextureSkinned return value>.positionWorld.y; o1.z <- <VSPositionTextureSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTextureSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionTextureSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionTextureSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionTextureSkinned return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 376
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 382
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 269 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                
                #line 274
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 42 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                
                #line 301 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[51].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[50].x
                
                #line 309
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionTextureSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o2.x <- <VSPositionTextureSkinnedI return value>.tex.x; o2.y <- <VSPositionTextureSkinnedI return value>.tex.y; o2.z <- <VSPositionTextureSkinnedI return value>.textureIndex; 
                //   o1.x <- <VSPositionTextureSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionTextureSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionTextureSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 376
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 382
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 289 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r1.yyyy, v5.xyzw
                mad r0.xyzw, r1.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 296
                mov o2.xy, v1.xyxx
                mov o2.z, v8.x
                ret 
                // Approximately 45 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[12].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[49].w
                div_sat r0.x, r0.x, cb0[50].x  // r0.x <- fogLerp
                
                #line 301 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 135 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[51].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[50].x
                
                #line 309
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   o4.x <- <VSPositionNormalTexture return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTexture return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTexture return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTexture return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTexture return value>.tex.x; o3.y <- <VSPositionNormalTexture return value>.tex.y; o3.z <- <VSPositionNormalTexture return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTexture return value>.normalWorld.x; o2.y <- <VSPositionNormalTexture return value>.normalWorld.y; o2.z <- <VSPositionNormalTexture return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTexture return value>.positionWorld.x; o1.y <- <VSPositionNormalTexture return value>.positionWorld.y; o1.z <- <VSPositionNormalTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTexture return value>.positionHomogeneous.w
                //
                #line 357 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 364
                mov o3.xy, v2.xyxx
                mov o3.z, cb3[0].x
                
                #line 359
                dp4 o4.x, r0.xyzw, cb0[52].xyzw
                dp4 o4.y, r0.xyzw, cb0[53].xyzw
                dp4 o4.z, r0.xyzw, cb0[54].xyzw
                dp4 o4.w, r0.xyzw, cb0[55].xyzw
                
                #line 364
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // SamplerComparisonShadow         sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 436 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, v3.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r1.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r0.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t1.xxxx, s1, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r0.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r1.x, r1.xyzx, r5.xyzx
                  max r1.x, r1.x, l(0.000000)  // r1.x <- specularFactor
                  lt r1.y, l(0.000000), r1.x
                
                #line 166
                  max r1.z, cb1[1].y, l(1.000000)
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x  // r1.x <- specularFactor
                  mul r1.x, r1.x, cb1[1].x  // r1.x <- specular
                  and r4.y, r1.x, r1.y  // r4.y <- specular
                  and r1.xy, r3.zzzz, r4.xyxx  // r1.x <- diffuse; r1.y <- specular
                  mul r3.yzw, r0.xxyz, cb0[46].xxyz
                  add r1.x, r1.x, cb0[46].w
                  add r1.x, r1.y, r1.x
                  mul r1.xyz, r1.xxxx, r3.yzwy  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                  log r1.xyz, r1.xyzx
                  mul r1.xyz, r1.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r1.xyz, r1.xyzx
                  min r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 277
                  and r0.xyzw, r0.xyzw, r3.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r0.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 453 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 456
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 459 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // localTransform           0   xyzw        3     NONE   float   xyzw
                // localTransform           1   xyzw        4     NONE   float   xyzw
                // localTransform           2   xyzw        5     NONE   float   xyzw
                // localTransform           3   xyzw        6     NONE   float   xyzw
                // textureIndex             0   x           7     NONE   float   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.localTransform._m00; v3.y <- input.localTransform._m01; v3.z <- input.localTransform._m02; v3.w <- input.localTransform._m03; 
                //   v4.x <- input.localTransform._m10; v4.y <- input.localTransform._m11; v4.z <- input.localTransform._m12; v4.w <- input.localTransform._m13; 
                //   v5.x <- input.localTransform._m20; v5.y <- input.localTransform._m21; v5.z <- input.localTransform._m22; v5.w <- input.localTransform._m23; 
                //   v6.x <- input.localTransform._m30; v6.y <- input.localTransform._m31; v6.z <- input.localTransform._m32; v6.w <- input.localTransform._m33; 
                //   v7.x <- input.textureIndex; 
                //   v8.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalTextureI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTextureI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTextureI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTextureI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTextureI return value>.tex.x; o3.y <- <VSPositionNormalTextureI return value>.tex.y; o3.z <- <VSPositionNormalTextureI return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTextureI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureI return value>.positionHomogeneous.w
                //
                #line 370 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 379
                mov o3.xy, v2.xyxx
                mov o3.z, v7.x
                
                #line 374
                dp4 o4.x, r0.xyzw, cb0[52].xyzw
                dp4 o4.y, r0.xyzw, cb0[53].xyzw
                dp4 o4.z, r0.xyzw, cb0[54].xyzw
                dp4 o4.w, r0.xyzw, cb0[55].xyzw
                
                #line 379
                ret 
                // Approximately 24 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // SamplerComparisonShadow         sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 436 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, v3.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r1.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r0.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t1.xxxx, s1, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r0.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r1.x, r1.xyzx, r5.xyzx
                  max r1.x, r1.x, l(0.000000)  // r1.x <- specularFactor
                  lt r1.y, l(0.000000), r1.x
                
                #line 166
                  max r1.z, cb1[1].y, l(1.000000)
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x  // r1.x <- specularFactor
                  mul r1.x, r1.x, cb1[1].x  // r1.x <- specular
                  and r4.y, r1.x, r1.y  // r4.y <- specular
                  and r1.xy, r3.zzzz, r4.xyxx  // r1.x <- diffuse; r1.y <- specular
                  mul r3.yzw, r0.xxyz, cb0[46].xxyz
                  add r1.x, r1.x, cb0[46].w
                  add r1.x, r1.y, r1.x
                  mul r1.xyz, r1.xxxx, r3.yzwy  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                  log r1.xyz, r1.xyzx
                  mul r1.xyz, r1.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r1.xyz, r1.xyzx
                  min r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 277
                  and r0.xyzw, r0.xyzw, r3.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r0.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 453 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 456
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 459 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   o4.x <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTextureSkinned return value>.tex.x; o3.y <- <VSPositionNormalTextureSkinned return value>.tex.y; o3.z <- <VSPositionNormalTextureSkinned return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTextureSkinned return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureSkinned return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureSkinned return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureSkinned return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureSkinned return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 398
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 405
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- normalLocal.x; r2.y <- normalLocal.y; r2.z <- normalLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx
                endloop 
                
                #line 397 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                dp4 o4.x, r1.xyzw, cb0[52].xyzw
                dp4 o4.y, r1.xyzw, cb0[53].xyzw
                dp4 o4.z, r1.xyzw, cb0[54].xyzw
                dp4 o4.w, r1.xyzw, cb0[55].xyzw
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 404
                mov o3.xy, v2.xyxx
                mov o3.z, cb3[0].x
                ret 
                // Approximately 57 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // SamplerComparisonShadow         sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 436 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, v3.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r1.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r0.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t1.xxxx, s1, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r0.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r1.x, r1.xyzx, r5.xyzx
                  max r1.x, r1.x, l(0.000000)  // r1.x <- specularFactor
                  lt r1.y, l(0.000000), r1.x
                
                #line 166
                  max r1.z, cb1[1].y, l(1.000000)
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x  // r1.x <- specularFactor
                  mul r1.x, r1.x, cb1[1].x  // r1.x <- specular
                  and r4.y, r1.x, r1.y  // r4.y <- specular
                  and r1.xy, r3.zzzz, r4.xyxx  // r1.x <- diffuse; r1.y <- specular
                  mul r3.yzw, r0.xxyz, cb0[46].xxyz
                  add r1.x, r1.x, cb0[46].w
                  add r1.x, r1.y, r1.x
                  mul r1.xyz, r1.xxxx, r3.yzwy  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                  log r1.xyz, r1.xyzx
                  mul r1.xyz, r1.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r1.xyz, r1.xyzx
                  min r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 277
                  and r0.xyzw, r0.xyzw, r3.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r0.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 453 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 456
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 459 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                // localTransform           0   xyzw        5     NONE   float   xyzw
                // localTransform           1   xyzw        6     NONE   float   xyzw
                // localTransform           2   xyzw        7     NONE   float   xyzw
                // localTransform           3   xyzw        8     NONE   float   xyzw
                // textureIndex             0   x           9     NONE   float   x   
                // SV_InstanceID            0   x          10   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_input v9.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   v5.x <- input.localTransform._m00; v5.y <- input.localTransform._m01; v5.z <- input.localTransform._m02; v5.w <- input.localTransform._m03; 
                //   v6.x <- input.localTransform._m10; v6.y <- input.localTransform._m11; v6.z <- input.localTransform._m12; v6.w <- input.localTransform._m13; 
                //   v7.x <- input.localTransform._m20; v7.y <- input.localTransform._m21; v7.z <- input.localTransform._m22; v7.w <- input.localTransform._m23; 
                //   v8.x <- input.localTransform._m30; v8.y <- input.localTransform._m31; v8.z <- input.localTransform._m32; v8.w <- input.localTransform._m33; 
                //   v9.x <- input.textureIndex; 
                //   v10.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTextureSkinnedI return value>.tex.x; o3.y <- <VSPositionNormalTextureSkinnedI return value>.tex.y; o3.z <- <VSPositionNormalTextureSkinnedI return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTextureSkinnedI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureSkinnedI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureSkinnedI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 398
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 405
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalLocal.x; r1.y <- normalLocal.y; r1.z <- normalLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- positionLocal.x; r2.y <- positionLocal.y; r2.z <- positionLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r1.w, r3.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r3.x + 0].x
                  ineg r2.w, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r2.w, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r2.xyz, r1.wwww, r4.xyzx, r2.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r4.xyzx, r1.xyzx
                endloop 
                
                #line 422 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r2.yyyy, v6.xyzw
                mad r0.xyzw, r2.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r2.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp4 o4.x, r0.xyzw, cb0[52].xyzw
                dp4 o4.y, r0.xyzw, cb0[53].xyzw
                dp4 o4.z, r0.xyzw, cb0[54].xyzw
                dp4 o4.w, r0.xyzw, cb0[55].xyzw
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 431
                mov o3.xy, v2.xyxx
                mov o3.z, v9.x
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // SamplerComparisonShadow         sampler_c      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 436 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, v3.xyzx, t0.xyzw, s0  // r0.x <- textureColor.x; r0.y <- textureColor.y; r0.z <- textureColor.z; r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[15].y, l(1.000000)
                if_nz r2.x
                
                #line 154
                  dp3 r2.x, v2.xyzx, -cb0[14].yzwy
                  max r2.y, r2.x, l(0.000000)  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.x, r2.y, cb0[14].x  // r3.x <- diffuse
                  dp3 r2.y, cb0[14].yzwy, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[14].yzwy
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r2.y, r1.xyzx, r4.xyzx
                  max r2.y, r2.y, l(0.000000)  // r2.y <- specularFactor
                  lt r2.w, l(0.000000), r2.y
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r2.y, r2.y
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y  // r2.y <- specularFactor
                  mul r2.y, r2.y, cb1[1].x  // r2.y <- specular
                  and r3.y, r2.y, r2.w  // r3.y <- specular
                  and r2.yz, r2.zzzz, r3.xxyx  // r2.y <- diffuse; r2.z <- specular
                  mul r3.xyz, r0.xyzx, cb0[13].xyzx
                  add r2.y, r2.y, cb0[13].w
                  add r2.y, r2.z, r2.y
                  mul r2.yzw, r2.yyyy, r3.xxyz  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                  log r2.yzw, r2.yyzw
                  mul r2.yzw, r2.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r2.yzw, r2.yyzw
                  min r3.xyz, r2.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r2.y, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.xyz, v4.xyzx, v4.wwww  // r4.x <- shadowPosH.x; r4.y <- shadowPosH.y; r4.z <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t1.xxxx, s1, r4.z  // r2.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  add r5.xyzw, r4.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.zwzz, t1.xxxx, s1, r4.z
                  add r2.z, r2.w, r2.z
                
                #line 129
                  mul r2.x, r2.x, r2.z
                
                #line 205
                  mul r2.x, r2.x, l(0.111111)  // r2.x <- shadowFactor
                  mov r3.w, r0.w
                  mul r4.xyzw, r2.xxxx, r3.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                  movc r2.xyzw, r2.yyyy, r4.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r3.x, cb0[18].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[17].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[17].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[17].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[17].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[16].xyzx
                  add r3.y, r3.y, cb0[16].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r3.x, cb0[21].y, l(1.000000)
                if_nz r3.x
                
                #line 154
                  dp3 r3.x, v2.xyzx, -cb0[20].yzwy
                  max r3.y, r3.x, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[20].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[20].yzwy, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[20].yzwy
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[19].xyzx
                  add r3.y, r3.y, cb0[19].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r3.y, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.xyz, v4.xyzx, v4.wwww  // r5.x <- shadowPosH.x; r5.y <- shadowPosH.y; r5.z <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.xyxy, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r6.xyxx, t1.xxxx, s1, r5.z  // r3.z <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  add r6.xyzw, r5.xyxy, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.xyxx, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r6.zwzz, t1.xxxx, s1, r5.z
                  add r3.z, r3.w, r3.z
                
                #line 129
                  mul r3.x, r3.x, r3.z
                
                #line 205
                  mul r3.x, r3.x, l(0.111111)  // r3.x <- shadowFactor
                  mov r4.w, r0.w
                  mul r5.xyzw, r3.xxxx, r4.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r3.yyyy, r5.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 304
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r3.x, cb0[24].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[23].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[23].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[22].xyzx
                  add r3.x, r3.x, cb0[22].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[24].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[23].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[27].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[26].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[25].xyzx
                  add r3.x, r3.x, cb0[25].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[26].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[30].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[29].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[28].xyzx
                  add r3.x, r3.x, cb0[28].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[29].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r3.x, cb0[33].z, l(1.000000)
                if_nz r3.x
                
                #line 222
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.w, r3.xyzx, r3.xyzx
                  sqrt r3.w, r3.w  // r3.w <- distance
                  div r3.xyz, r3.xyzx, r3.wwww
                
                #line 154
                  dp3 r4.x, v2.xyzx, -r3.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[32].x  // r5.x <- diffuse
                  dp3 r4.x, r3.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r3.xyz, v2.xyzx, -r4.xxxx, r3.xyzx
                  dp3 r4.x, r3.xyzx, r3.xyzx
                  rsq r4.x, r4.x
                  mul r3.xyz, r3.xyzx, r4.xxxx  // r3.x <- lightReflection.x; r3.y <- lightReflection.y; r3.z <- lightReflection.z
                  dp3 r3.x, r1.xyzx, r3.xyzx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 166
                  max r3.z, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.z
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r5.y, r3.x, r3.y  // r5.y <- specular
                  and r3.xy, r4.yyyy, r5.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r0.xyzx, cb0[31].xyzx
                  add r3.x, r3.x, cb0[31].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r3.x, r3.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r3.x, r3.w, r3.x  // r3.x <- d
                  add r3.x, r3.x, l(1.000000)  // r3.x <- dn
                  mul r3.x, r3.x, r3.x
                  div r3.x, cb0[32].x, r3.x  // r3.x <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r3.x, r3.x, r3.y
                
                #line 240
                  mov r4.w, r0.w
                
                #line 322
                  mad r2.xyzw, r4.xyzw, r3.xxxx, r2.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r3.x, cb0[37].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[36].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[36].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[36].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[35].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[36].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[36].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[34].xyzx
                  add r3.y, r3.y, cb0[34].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[41].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[39].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[40].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[40].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[40].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[39].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[40].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[40].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[38].xyzx
                  add r3.y, r3.y, cb0[38].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[45].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[43].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[44].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[44].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[44].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[43].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[44].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[44].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r3.y, r1.xyzx, r5.xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- specularFactor
                  lt r3.w, l(0.000000), r3.y
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r3.y, r3.y
                  mul r3.y, r3.y, r4.z
                  exp r3.y, r3.y  // r3.y <- specularFactor
                  mul r3.y, r3.y, cb1[1].x  // r3.y <- specular
                  and r4.y, r3.y, r3.w  // r4.y <- specular
                  and r3.yz, r3.zzzz, r4.xxyx  // r3.y <- diffuse; r3.z <- specular
                  mul r4.xyz, r0.xyzx, cb0[42].xyzx
                  add r3.y, r3.y, cb0[42].w
                  add r3.y, r3.z, r3.y
                  mul r3.yzw, r3.yyyy, r4.xxyz  // r3.y <- litColor.x; r3.z <- litColor.y; r3.w <- litColor.z
                  log r3.yzw, r3.yyzw
                  mul r3.yzw, r3.yyzw, l(0.000000, 0.454545, 0.454545, 0.454545)
                  exp r3.yzw, r3.yyzw
                  min r4.xyz, r3.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r0.w
                  and r3.xyzw, r3.xxxx, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r2.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r3.x, cb0[49].z, l(1.000000)
                if_nz r3.x
                
                #line 254
                  add r3.xyz, v1.xyzx, -cb0[47].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r3.x, r3.xyzx, cb0[48].xyzx
                  add r3.y, -|r3.x|, l(1.000000)
                  sqrt r3.y, r3.y
                  mad r3.z, |r3.x|, l(-0.018729), l(0.074261)
                  mad r3.z, r3.z, |r3.x|, l(-0.212114)
                  mad r3.z, r3.z, |r3.x|, l(1.570729)
                  mul r3.w, r3.y, r3.z
                  mad r3.w, r3.w, l(-2.000000), l(3.141593)
                  lt r3.x, r3.x, -r3.x
                  and r3.x, r3.x, r3.w
                  mad r3.x, r3.z, r3.y, r3.x
                  mul r3.x, r3.x, l(57.295780)  // r3.x <- lightToSurfaceAngle
                  ge r3.x, cb0[48].w, r3.x
                
                #line 154
                  dp3 r3.y, v2.xyzx, -cb0[48].xyzx
                  max r3.y, r3.y, l(0.000000)  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.x, r3.y, cb0[47].x  // r4.x <- diffuse
                  dp3 r3.y, cb0[48].xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, v2.xyzx, -r3.yyyy, cb0[48].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- lightReflection.x; r5.y <- lightReflection.y; r5.z <- lightReflection.z
                  dp3 r1.x, r1.xyzx, r5.xyzx
                  max r1.x, r1.x, l(0.000000)  // r1.x <- specularFactor
                  lt r1.y, l(0.000000), r1.x
                
                #line 166
                  max r1.z, cb1[1].y, l(1.000000)
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x  // r1.x <- specularFactor
                  mul r1.x, r1.x, cb1[1].x  // r1.x <- specular
                  and r4.y, r1.x, r1.y  // r4.y <- specular
                  and r1.xy, r3.zzzz, r4.xyxx  // r1.x <- diffuse; r1.y <- specular
                  mul r3.yzw, r0.xxyz, cb0[46].xxyz
                  add r1.x, r1.x, cb0[46].w
                  add r1.x, r1.y, r1.x
                  mul r1.xyz, r1.xxxx, r3.yzwy  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                  log r1.xyz, r1.xyzx
                  mul r1.xyz, r1.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r1.xyz, r1.xyzx
                  min r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 277
                  and r0.xyzw, r0.xyzw, r3.xxxx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 338
                  add r2.xyzw, r0.xyzw, r2.xyzw
                
                #line 346
                endif 
                
                #line 453 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 456
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r2.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r2.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 459 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 565 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangent
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   o5.x <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangent return value>.tex.x; o4.y <- <VSPositionNormalTextureTangent return value>.tex.y; o4.z <- <VSPositionNormalTextureTangent return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangent return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangent return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangent return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangent return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangent return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangent return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangent return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangent return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangent return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.w
                //
                #line 471 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                dp3 o3.x, v2.xyzx, cb0[0].xyzx
                dp3 o3.y, v2.xyzx, cb0[1].xyzx
                dp3 o3.z, v2.xyzx, cb0[2].xyzx
                
                #line 479
                mov o4.xy, v3.xyxx
                mov o4.z, cb3[0].x
                
                #line 473
                dp4 o5.x, r0.xyzw, cb0[52].xyzw
                dp4 o5.y, r0.xyzw, cb0[53].xyzw
                dp4 o5.z, r0.xyzw, cb0[54].xyzw
                dp4 o5.w, r0.xyzw, cb0[55].xyzw
                
                #line 479
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // SamplerComparisonShadow         sampler_c      NA          NA    2        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 560 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 85 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 89
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 94
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 563 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // r1.x <- textureColor.x; r1.y <- textureColor.y; r1.z <- textureColor.z; r1.w <- textureColor.w
                add r2.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r2.w, r0.w
                mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.w, cb0[15].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[14].yzwy
                  max r3.x, r2.w, l(0.000000)  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.x, r3.x, cb0[14].x  // r4.x <- diffuse
                  dp3 r3.x, cb0[14].yzwy, r0.xyzx
                  add r3.x, r3.x, r3.x
                  mad r3.xzw, r0.xxyz, -r3.xxxx, cb0[14].yyzw
                  dp3 r4.z, r3.xzwx, r3.xzwx
                  rsq r4.z, r4.z
                  mul r3.xzw, r3.xxzw, r4.zzzz  // r3.x <- lightReflection.x; r3.z <- lightReflection.y; r3.w <- lightReflection.z
                  dp3 r3.x, r2.xyzx, r3.xzwx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.z, l(0.000000), r3.x
                
                #line 166
                  max r3.w, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r4.y, r3.x, r3.z  // r4.y <- specular
                  and r3.xy, r3.yyyy, r4.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[13].xyzx
                  add r3.x, r3.x, cb0[13].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r4.x, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.yzw, v5.xxyz, v5.wwww  // r4.y <- shadowPosH.x; r4.z <- shadowPosH.y; r4.w <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t2.xxxx, s2, r4.w  // r5.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r5.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r4.yzyy, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r4.y, r4.y, r5.x  // r4.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.z, r6.zwzz, t2.xxxx, s2, r4.w
                  add r4.y, r4.z, r4.y
                
                #line 129
                  mul r2.w, r2.w, r4.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r3.w, r1.w
                  mul r5.xyzw, r2.wwww, r3.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r4.xxxx, r5.xyzw, r3.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                else 
                  mov r3.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r2.w, cb0[18].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[17].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[17].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[17].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[17].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[16].xyzx
                  add r4.x, r4.x, cb0[16].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r2.w, cb0[21].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[20].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[20].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[20].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[20].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[19].xyzx
                  add r4.x, r4.x, cb0[19].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r2.w, cb0[24].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[23].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[23].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[22].xyzx
                  add r4.x, r4.x, cb0[22].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[24].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[23].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[27].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[26].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[26].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[25].xyzx
                  add r4.x, r4.x, cb0[25].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[27].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[30].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[29].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[29].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[28].xyzx
                  add r4.x, r4.x, cb0[28].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[30].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[33].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[32].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[32].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[31].xyzx
                  add r4.x, r4.x, cb0[31].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[33].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r2.w, cb0[37].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[35].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[36].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[36].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[36].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[35].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[36].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[36].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[34].xyzx
                  add r4.x, r4.x, cb0[34].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[41].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[39].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[40].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[40].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[40].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[39].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[40].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[40].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[38].xyzx
                  add r4.x, r4.x, cb0[38].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[45].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[43].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[44].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[44].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[44].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[43].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[44].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[44].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[42].xyzx
                  add r4.x, r4.x, cb0[42].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[49].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[47].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[48].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[48].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[48].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[47].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[48].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r0.xyz, r0.xyzx, -r4.xxxx, cb0[48].xyzx
                  dp3 r4.x, r0.xyzx, r0.xyzx
                  rsq r4.x, r4.x
                  mul r0.xyz, r0.xyzx, r4.xxxx  // r0.x <- lightReflection.x; r0.y <- lightReflection.y; r0.z <- lightReflection.z
                  dp3 r0.x, r2.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r5.y, r0.x, r0.y  // r5.y <- specular
                  and r0.xy, r4.yyyy, r5.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r2.xyz, r1.xyzx, cb0[46].xyzx
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r2.wwww  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r1.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 580 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 583
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r3.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r3.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r3.xyzw
                ret 
                // Approximately 580 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangentI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o5.x <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangentI return value>.tex.x; o4.y <- <VSPositionNormalTextureTangentI return value>.tex.y; o4.z <- <VSPositionNormalTextureTangentI return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangentI return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangentI return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangentI return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangentI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangentI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangentI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangentI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangentI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangentI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.w
                //
                #line 485 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v5.xyzw
                mad r0.xyzw, v0.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                dp3 o3.x, v2.xyzx, cb0[0].xyzx
                dp3 o3.y, v2.xyzx, cb0[1].xyzx
                dp3 o3.z, v2.xyzx, cb0[2].xyzx
                
                #line 495
                mov o4.xy, v3.xyxx
                mov o4.z, v8.x
                
                #line 489
                dp4 o5.x, r0.xyzw, cb0[52].xyzw
                dp4 o5.y, r0.xyzw, cb0[53].xyzw
                dp4 o5.z, r0.xyzw, cb0[54].xyzw
                dp4 o5.w, r0.xyzw, cb0[55].xyzw
                
                #line 495
                ret 
                // Approximately 27 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // SamplerComparisonShadow         sampler_c      NA          NA    2        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 560 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 85 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 89
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 94
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 563 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // r1.x <- textureColor.x; r1.y <- textureColor.y; r1.z <- textureColor.z; r1.w <- textureColor.w
                add r2.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r2.w, r0.w
                mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.w, cb0[15].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[14].yzwy
                  max r3.x, r2.w, l(0.000000)  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.x, r3.x, cb0[14].x  // r4.x <- diffuse
                  dp3 r3.x, cb0[14].yzwy, r0.xyzx
                  add r3.x, r3.x, r3.x
                  mad r3.xzw, r0.xxyz, -r3.xxxx, cb0[14].yyzw
                  dp3 r4.z, r3.xzwx, r3.xzwx
                  rsq r4.z, r4.z
                  mul r3.xzw, r3.xxzw, r4.zzzz  // r3.x <- lightReflection.x; r3.z <- lightReflection.y; r3.w <- lightReflection.z
                  dp3 r3.x, r2.xyzx, r3.xzwx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.z, l(0.000000), r3.x
                
                #line 166
                  max r3.w, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r4.y, r3.x, r3.z  // r4.y <- specular
                  and r3.xy, r3.yyyy, r4.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[13].xyzx
                  add r3.x, r3.x, cb0[13].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r4.x, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.yzw, v5.xxyz, v5.wwww  // r4.y <- shadowPosH.x; r4.z <- shadowPosH.y; r4.w <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t2.xxxx, s2, r4.w  // r5.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r5.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r4.yzyy, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r4.y, r4.y, r5.x  // r4.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.z, r6.zwzz, t2.xxxx, s2, r4.w
                  add r4.y, r4.z, r4.y
                
                #line 129
                  mul r2.w, r2.w, r4.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r3.w, r1.w
                  mul r5.xyzw, r2.wwww, r3.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r4.xxxx, r5.xyzw, r3.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                else 
                  mov r3.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r2.w, cb0[18].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[17].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[17].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[17].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[17].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[16].xyzx
                  add r4.x, r4.x, cb0[16].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r2.w, cb0[21].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[20].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[20].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[20].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[20].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[19].xyzx
                  add r4.x, r4.x, cb0[19].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r2.w, cb0[24].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[23].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[23].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[22].xyzx
                  add r4.x, r4.x, cb0[22].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[24].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[23].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[27].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[26].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[26].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[25].xyzx
                  add r4.x, r4.x, cb0[25].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[27].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[30].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[29].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[29].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[28].xyzx
                  add r4.x, r4.x, cb0[28].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[30].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[33].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[32].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[32].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[31].xyzx
                  add r4.x, r4.x, cb0[31].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[33].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r2.w, cb0[37].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[35].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[36].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[36].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[36].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[35].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[36].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[36].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[34].xyzx
                  add r4.x, r4.x, cb0[34].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[41].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[39].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[40].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[40].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[40].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[39].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[40].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[40].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[38].xyzx
                  add r4.x, r4.x, cb0[38].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[45].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[43].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[44].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[44].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[44].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[43].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[44].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[44].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[42].xyzx
                  add r4.x, r4.x, cb0[42].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[49].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[47].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[48].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[48].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[48].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[47].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[48].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r0.xyz, r0.xyzx, -r4.xxxx, cb0[48].xyzx
                  dp3 r4.x, r0.xyzx, r0.xyzx
                  rsq r4.x, r4.x
                  mul r0.xyz, r0.xyzx, r4.xxxx  // r0.x <- lightReflection.x; r0.y <- lightReflection.y; r0.z <- lightReflection.z
                  dp3 r0.x, r2.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r5.y, r0.x, r0.y  // r5.y <- specular
                  and r0.xy, r4.yyyy, r5.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r2.xyz, r1.xyzx, cb0[46].xyzx
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r2.wwww  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r1.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 580 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 583
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r3.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r3.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r3.xyzw
                ret 
                // Approximately 580 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangentSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.weights.x; v4.y <- input.weights.y; v4.z <- input.weights.z; 
                //   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
                //   o5.x <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangentSkinned return value>.tex.x; o4.y <- <VSPositionNormalTextureTangentSkinned return value>.tex.y; o4.z <- <VSPositionNormalTextureTangentSkinned return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangentSkinned return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangentSkinned return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangentSkinned return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangentSkinned return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangentSkinned return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangentSkinned return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangentSkinned return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangentSkinned return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangentSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                
                #line 425
                mov x0[0].x, v4.x
                mov x0[1].x, v4.y
                mov x0[2].x, v4.z
                mov x0[3].x, r0.x
                
                #line 433
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- normalLocal.x; r2.y <- normalLocal.y; r2.z <- normalLocal.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- tangentLocal.x; r3.y <- tangentLocal.y; r3.z <- tangentLocal.z
                mov r4.x, l(0)  // r4.x <- i
                loop 
                  ige r2.w, r4.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r4.x + 0].x
                  ineg r3.w, r4.x
                  ult r5.xyz, r4.xxxx, l(1, 2, 3, 0)
                  and r6.y, r3.w, r5.y
                
                #line 436
                  iadd r4.xy, r4.xxxx, l(1, -3, 0, 0)
                
                #line 433
                  movc r6.z, r5.y, l(0), r4.y
                  ieq r6.w, r5.z, l(0)
                  mov r6.x, r5.x
                  and r5.xyzw, r6.xyzw, v5.xyzw
                  or r4.yz, r5.yywy, r5.xxzx
                  or r3.w, r4.z, r4.y
                  ishl r3.w, r3.w, l(2)
                  dp4 r5.x, r0.xyzw, cb2[r3.w + 0].xyzw
                  dp4 r5.y, r0.xyzw, cb2[r3.w + 1].xyzw
                  dp4 r5.z, r0.xyzw, cb2[r3.w + 2].xyzw
                  mad r1.xyz, r2.wwww, r5.xyzx, r1.xyzx
                  dp3 r5.x, v1.xyzx, cb2[r3.w + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb2[r3.w + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb2[r3.w + 2].xyzx
                  mad r2.xyz, r2.wwww, r5.xyzx, r2.xyzx
                  dp3 r5.x, v2.xyzx, cb2[r3.w + 0].xyzx
                  dp3 r5.y, v2.xyzx, cb2[r3.w + 1].xyzx
                  dp3 r5.z, v2.xyzx, cb2[r3.w + 2].xyzx
                  mad r3.xyz, r2.wwww, r5.xyzx, r3.xyzx
                endloop 
                
                #line 516 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                dp4 o5.x, r1.xyzw, cb0[52].xyzw
                dp4 o5.y, r1.xyzw, cb0[53].xyzw
                dp4 o5.z, r1.xyzw, cb0[54].xyzw
                dp4 o5.w, r1.xyzw, cb0[55].xyzw
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                dp3 o3.x, r3.xyzx, cb0[0].xyzx
                dp3 o3.y, r3.xyzx, cb0[1].xyzx
                dp3 o3.z, r3.xyzx, cb0[2].xyzx
                
                #line 524
                mov o4.xy, v3.xyxx
                mov o4.z, cb3[0].x
                ret 
                // Approximately 65 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // SamplerComparisonShadow         sampler_c      NA          NA    2        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 560 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 85 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 89
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 94
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 563 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // r1.x <- textureColor.x; r1.y <- textureColor.y; r1.z <- textureColor.z; r1.w <- textureColor.w
                add r2.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r2.w, r0.w
                mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.w, cb0[15].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[14].yzwy
                  max r3.x, r2.w, l(0.000000)  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.x, r3.x, cb0[14].x  // r4.x <- diffuse
                  dp3 r3.x, cb0[14].yzwy, r0.xyzx
                  add r3.x, r3.x, r3.x
                  mad r3.xzw, r0.xxyz, -r3.xxxx, cb0[14].yyzw
                  dp3 r4.z, r3.xzwx, r3.xzwx
                  rsq r4.z, r4.z
                  mul r3.xzw, r3.xxzw, r4.zzzz  // r3.x <- lightReflection.x; r3.z <- lightReflection.y; r3.w <- lightReflection.z
                  dp3 r3.x, r2.xyzx, r3.xzwx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.z, l(0.000000), r3.x
                
                #line 166
                  max r3.w, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r4.y, r3.x, r3.z  // r4.y <- specular
                  and r3.xy, r3.yyyy, r4.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[13].xyzx
                  add r3.x, r3.x, cb0[13].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r4.x, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.yzw, v5.xxyz, v5.wwww  // r4.y <- shadowPosH.x; r4.z <- shadowPosH.y; r4.w <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t2.xxxx, s2, r4.w  // r5.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r5.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r4.yzyy, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r4.y, r4.y, r5.x  // r4.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.z, r6.zwzz, t2.xxxx, s2, r4.w
                  add r4.y, r4.z, r4.y
                
                #line 129
                  mul r2.w, r2.w, r4.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r3.w, r1.w
                  mul r5.xyzw, r2.wwww, r3.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r4.xxxx, r5.xyzw, r3.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                else 
                  mov r3.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r2.w, cb0[18].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[17].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[17].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[17].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[17].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[16].xyzx
                  add r4.x, r4.x, cb0[16].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r2.w, cb0[21].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[20].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[20].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[20].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[20].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[19].xyzx
                  add r4.x, r4.x, cb0[19].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r2.w, cb0[24].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[23].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[23].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[22].xyzx
                  add r4.x, r4.x, cb0[22].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[24].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[23].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[27].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[26].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[26].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[25].xyzx
                  add r4.x, r4.x, cb0[25].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[27].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[30].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[29].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[29].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[28].xyzx
                  add r4.x, r4.x, cb0[28].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[30].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[33].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[32].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[32].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[31].xyzx
                  add r4.x, r4.x, cb0[31].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[33].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r2.w, cb0[37].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[35].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[36].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[36].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[36].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[35].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[36].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[36].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[34].xyzx
                  add r4.x, r4.x, cb0[34].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[41].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[39].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[40].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[40].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[40].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[39].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[40].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[40].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[38].xyzx
                  add r4.x, r4.x, cb0[38].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[45].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[43].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[44].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[44].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[44].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[43].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[44].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[44].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[42].xyzx
                  add r4.x, r4.x, cb0[42].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[49].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[47].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[48].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[48].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[48].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[47].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[48].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r0.xyz, r0.xyzx, -r4.xxxx, cb0[48].xyzx
                  dp3 r4.x, r0.xyzx, r0.xyzx
                  rsq r4.x, r4.x
                  mul r0.xyz, r0.xyzx, r4.xxxx  // r0.x <- lightReflection.x; r0.y <- lightReflection.y; r0.z <- lightReflection.z
                  dp3 r0.x, r2.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r5.y, r0.x, r0.y  // r5.y <- specular
                  and r0.xy, r4.yyyy, r5.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r2.xyz, r1.xyzx, cb0[46].xyzx
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r2.wwww  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r1.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 580 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 583
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r3.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r3.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r3.xyzw
                ret 
                // Approximately 580 instruction slots used
                            
            };
        }

    }

    technique11 PositionNormalTextureTangentSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252 [unused]
                //   float gFogStart;                   // Offset:  796 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  800 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  816 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                // localTransform           0   xyzw        6     NONE   float   xyzw
                // localTransform           1   xyzw        7     NONE   float   xyzw
                // localTransform           2   xyzw        8     NONE   float   xyzw
                // localTransform           3   xyzw        9     NONE   float   xyzw
                // textureIndex             0   x          10     NONE   float   x   
                // SV_InstanceID            0   x          11   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_input v9.xyzw
                dcl_input v10.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.weights.x; v4.y <- input.weights.y; v4.z <- input.weights.z; 
                //   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
                //   v6.x <- input.localTransform._m00; v6.y <- input.localTransform._m01; v6.z <- input.localTransform._m02; v6.w <- input.localTransform._m03; 
                //   v7.x <- input.localTransform._m10; v7.y <- input.localTransform._m11; v7.z <- input.localTransform._m12; v7.w <- input.localTransform._m13; 
                //   v8.x <- input.localTransform._m20; v8.y <- input.localTransform._m21; v8.z <- input.localTransform._m22; v8.w <- input.localTransform._m23; 
                //   v9.x <- input.localTransform._m30; v9.y <- input.localTransform._m31; v9.z <- input.localTransform._m32; v9.w <- input.localTransform._m33; 
                //   v10.x <- input.textureIndex; 
                //   v11.x <- input.instanceId; 
                //   o5.x <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangentSkinnedI return value>.tex.x; o4.y <- <VSPositionNormalTextureTangentSkinnedI return value>.tex.y; o4.z <- <VSPositionNormalTextureTangentSkinnedI return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangentSkinnedI return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangentSkinnedI return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangentSkinnedI return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangentSkinnedI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangentSkinnedI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangentSkinnedI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangentSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangentSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangentSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.w
                //
                #line 365 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                
                #line 425
                mov x0[0].x, v4.x
                mov x0[1].x, v4.y
                mov x0[2].x, v4.z
                mov x0[3].x, r0.x
                
                #line 433
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalLocal.x; r1.y <- normalLocal.y; r1.z <- normalLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- tangentLocal.x; r2.y <- tangentLocal.y; r2.z <- tangentLocal.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- positionLocal.x; r3.y <- positionLocal.y; r3.z <- positionLocal.z
                mov r4.x, l(0)  // r4.x <- i
                loop 
                  ige r1.w, r4.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r4.x + 0].x
                  ineg r2.w, r4.x
                  ult r5.xyz, r4.xxxx, l(1, 2, 3, 0)
                  and r6.y, r2.w, r5.y
                
                #line 436
                  iadd r4.xy, r4.xxxx, l(1, -3, 0, 0)
                
                #line 433
                  movc r6.z, r5.y, l(0), r4.y
                  ieq r6.w, r5.z, l(0)
                  mov r6.x, r5.x
                  and r5.xyzw, r6.xyzw, v5.xyzw
                  or r4.yz, r5.yywy, r5.xxzx
                  or r2.w, r4.z, r4.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r5.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r3.xyz, r1.wwww, r5.xyzx, r3.xyzx
                  dp3 r5.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r5.xyzx, r1.xyzx
                  dp3 r5.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r5.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r5.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mad r2.xyz, r1.wwww, r5.xyzx, r2.xyzx
                endloop 
                
                #line 545 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r3.yyyy, v7.xyzw
                mad r0.xyzw, r3.xxxx, v6.xyzw, r0.xyzw
                mad r0.xyzw, r3.zzzz, v8.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v9.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp4 o5.x, r0.xyzw, cb0[52].xyzw
                dp4 o5.y, r0.xyzw, cb0[53].xyzw
                dp4 o5.z, r0.xyzw, cb0[54].xyzw
                dp4 o5.w, r0.xyzw, cb0[55].xyzw
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                dp3 o3.x, r2.xyzx, cb0[0].xyzx
                dp3 o3.y, r2.xyzx, cb0[1].xyzx
                dp3 o3.z, r2.xyzx, cb0[2].xyzx
                
                #line 555
                mov o4.xy, v3.xyxx
                mov o4.z, v10.x
                ret 
                // Approximately 68 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float3 gEyePositionWorld;          // Offset:  192 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  208
                //       float Ambient;                 // Offset:  220
                //       float Diffuse;                 // Offset:  224
                //       float3 Direction;              // Offset:  228
                //       float CastShadow;              // Offset:  240
                //       float Enabled;                 // Offset:  244
                //
                //   } gDirLights[3];                   // Offset:  208 Size:   136
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  352
                //       float Ambient;                 // Offset:  364
                //       float Diffuse;                 // Offset:  368
                //       float3 Position;               // Offset:  372
                //       float Radius;                  // Offset:  384
                //       float CastShadow;              // Offset:  388
                //       float Enabled;                 // Offset:  392
                //
                //   } gPointLights[4];                 // Offset:  352 Size:   188
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  544
                //       float Ambient;                 // Offset:  556
                //       float Diffuse;                 // Offset:  560
                //       float3 Position;               // Offset:  564
                //       float3 Direction;              // Offset:  576
                //       float Angle;                   // Offset:  588
                //       float Radius;                  // Offset:  592
                //       float CastShadow;              // Offset:  596
                //       float Enabled;                 // Offset:  600
                //
                //   } gSpotLights[4];                  // Offset:  544 Size:   252
                //   float gFogStart;                   // Offset:  796 Size:     4
                //   float gFogRange;                   // Offset:  800 Size:     4
                //   float4 gFogColor;                  // Offset:  816 Size:    16
                //   float4x4 gShadowTransform;         // Offset:  832 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // SamplerComparisonShadow         sampler_c      NA          NA    2        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[52], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 8
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 560 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 85 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 89
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 94
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 563 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v4.xyzx, t0.xyzw, s1  // r1.x <- textureColor.x; r1.y <- textureColor.y; r1.z <- textureColor.z; r1.w <- textureColor.w
                add r2.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r2.w, r0.w
                mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 302 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.w, cb0[15].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[14].yzwy
                  max r3.x, r2.w, l(0.000000)  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.x, r3.x, cb0[14].x  // r4.x <- diffuse
                  dp3 r3.x, cb0[14].yzwy, r0.xyzx
                  add r3.x, r3.x, r3.x
                  mad r3.xzw, r0.xxyz, -r3.xxxx, cb0[14].yyzw
                  dp3 r4.z, r3.xzwx, r3.xzwx
                  rsq r4.z, r4.z
                  mul r3.xzw, r3.xxzw, r4.zzzz  // r3.x <- lightReflection.x; r3.z <- lightReflection.y; r3.w <- lightReflection.z
                  dp3 r3.x, r2.xyzx, r3.xzwx
                  max r3.x, r3.x, l(0.000000)  // r3.x <- specularFactor
                  lt r3.z, l(0.000000), r3.x
                
                #line 166
                  max r3.w, cb1[1].y, l(1.000000)
                  log r3.x, r3.x
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specularFactor
                  mul r3.x, r3.x, cb1[1].x  // r3.x <- specular
                  and r4.y, r3.x, r3.z  // r4.y <- specular
                  and r3.xy, r3.yyyy, r4.xyxx  // r3.x <- diffuse; r3.y <- specular
                  mul r4.xyz, r1.xyzx, cb0[13].xyzx
                  add r3.x, r3.x, cb0[13].w
                  add r3.x, r3.y, r3.x
                  mul r3.xyz, r3.xxxx, r4.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                  log r3.xyz, r3.xyzx
                  mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r3.xyz, r3.xyzx
                  min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 201
                  eq r4.x, cb0[15].x, l(1.000000)
                
                #line 115
                  div r4.yzw, v5.xxyz, v5.wwww  // r4.y <- shadowPosH.x; r4.z <- shadowPosH.y; r4.w <- shadowPosH.z
                
                #line 125
                  add r5.xyzw, r4.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t2.xxxx, s2, r4.w  // r5.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r5.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r4.yzyy, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r6.zwzz, t2.xxxx, s2, r4.w
                  add r5.x, r5.y, r5.x
                  add r6.xyzw, r4.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.y, r6.xyxx, t2.xxxx, s2, r4.w
                  add r4.y, r4.y, r5.x  // r4.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r4.z, r6.zwzz, t2.xxxx, s2, r4.w
                  add r4.y, r4.z, r4.y
                
                #line 129
                  mul r2.w, r2.w, r4.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r3.w, r1.w
                  mul r5.xyzw, r2.wwww, r3.xyzw  // r5.x <- litColor.x; r5.y <- litColor.y; r5.z <- litColor.z; r5.w <- litColor.w
                  movc r3.xyzw, r4.xxxx, r5.xyzw, r3.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                else 
                  mov r3.xyzw, l(0,0,0,0)
                endif 
                
                #line 302
                eq r2.w, cb0[18].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[17].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[17].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[17].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[17].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[16].xyzx
                  add r4.x, r4.x, cb0[16].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[18].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z; r3.w <- litColor.w
                
                #line 314
                endif 
                
                #line 302
                eq r2.w, cb0[21].y, l(1.000000)
                if_nz r2.w
                
                #line 154
                  dp3 r2.w, r0.xyzx, -cb0[20].yzwy
                  max r4.x, r2.w, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[20].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[20].yzwy, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[20].yyzw
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[19].xyzx
                  add r4.x, r4.x, cb0[19].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 201
                  eq r5.x, cb0[21].x, l(1.000000)
                
                #line 115
                  div r5.yzw, v5.xxyz, v5.wwww  // r5.y <- shadowPosH.x; r5.z <- shadowPosH.y; r5.w <- shadowPosH.z
                
                #line 125
                  add r6.xyzw, r5.yzyz, l(-0.000488, -0.000488, 0.000000, -0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.x, r6.xyxx, t2.xxxx, s2, r5.w  // r6.x <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r6.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, -0.000488, -0.000488, 0.000000)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r5.yzyy, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000488, 0.000000, -0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r6.y, r7.zwzz, t2.xxxx, s2, r5.w
                  add r6.x, r6.y, r6.x
                  add r7.xyzw, r5.yzyz, l(0.000000, 0.000488, 0.000488, 0.000488)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.y, r7.xyxx, t2.xxxx, s2, r5.w
                  add r5.y, r5.y, r6.x  // r5.y <- percentLit
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r5.z, r7.zwzz, t2.xxxx, s2, r5.w
                  add r5.y, r5.z, r5.y
                
                #line 129
                  mul r2.w, r2.w, r5.y
                
                #line 205
                  mul r2.w, r2.w, l(0.111111)  // r2.w <- shadowFactor
                  mov r4.w, r1.w
                  mul r6.xyzw, r2.wwww, r4.xyzw  // r6.x <- litColor.x; r6.y <- litColor.y; r6.z <- litColor.z; r6.w <- litColor.w
                  movc r4.xyzw, r5.xxxx, r6.xyzw, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 304
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 314
                endif 
                
                #line 320
                eq r2.w, cb0[24].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[23].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[23].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[22].xyzx
                  add r4.x, r4.x, cb0[22].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[24].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[23].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[27].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[26].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[26].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[25].xyzx
                  add r4.x, r4.x, cb0[25].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[27].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[30].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[29].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[29].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[28].xyzx
                  add r4.x, r4.x, cb0[28].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[30].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 320
                eq r2.w, cb0[33].z, l(1.000000)
                if_nz r2.w
                
                #line 222
                  add r4.xyz, v1.xyzx, -cb0[32].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, r4.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r4.xyz, r4.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.w, r0.xyzx, -r4.xyzx
                  max r4.w, r4.w, l(0.000000)  // r4.w <- diffuseFactor
                  lt r5.x, l(0.000000), r4.w
                  mul r6.x, r4.w, cb0[32].x  // r6.x <- diffuse
                  dp3 r4.w, r4.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mad r4.xyz, r0.xyzx, -r4.wwww, r4.xyzx
                  dp3 r4.w, r4.xyzx, r4.xyzx
                  rsq r4.w, r4.w
                  mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- lightReflection.x; r4.y <- lightReflection.y; r4.z <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.y, l(0.000000), r4.x
                
                #line 166
                  max r4.z, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.z
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r6.y, r4.x, r4.y  // r6.y <- specular
                  and r4.xy, r5.xxxx, r6.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[31].xyzx
                  add r4.x, r4.x, cb0[31].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 98
                  div r5.x, r2.w, cb0[33].x  // r5.x <- f
                  mad r5.x, -r5.x, r5.x, l(1.000000)  // r5.x <- denom
                  lt r5.y, l(0.000000), r5.x
                  div r2.w, r2.w, r5.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 110
                  and r2.w, r2.w, r5.y
                
                #line 240
                  mov r4.w, r1.w
                
                #line 322
                  mad r3.xyzw, r4.xyzw, r2.wwww, r3.xyzw
                
                #line 330
                endif 
                
                #line 336
                eq r2.w, cb0[37].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[35].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[36].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[36].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[36].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[35].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[36].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[36].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[34].xyzx
                  add r4.x, r4.x, cb0[34].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[41].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[39].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[40].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[40].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[40].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[39].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[40].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[40].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[38].xyzx
                  add r4.x, r4.x, cb0[38].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[45].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[43].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[44].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[44].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[44].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[43].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[44].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r4.xzw, r0.xxyz, -r4.xxxx, cb0[44].xxyz
                  dp3 r5.z, r4.xzwx, r4.xzwx
                  rsq r5.z, r5.z
                  mul r4.xzw, r4.xxzw, r5.zzzz  // r4.x <- lightReflection.x; r4.z <- lightReflection.y; r4.w <- lightReflection.z
                  dp3 r4.x, r2.xyzx, r4.xzwx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- specularFactor
                  lt r4.z, l(0.000000), r4.x
                
                #line 166
                  max r4.w, cb1[1].y, l(1.000000)
                  log r4.x, r4.x
                  mul r4.x, r4.x, r4.w
                  exp r4.x, r4.x  // r4.x <- specularFactor
                  mul r4.x, r4.x, cb1[1].x  // r4.x <- specular
                  and r5.y, r4.x, r4.z  // r5.y <- specular
                  and r4.xy, r4.yyyy, r5.xyxx  // r4.x <- diffuse; r4.y <- specular
                  mul r5.xyz, r1.xyzx, cb0[42].xyzx
                  add r4.x, r4.x, cb0[42].w
                  add r4.x, r4.y, r4.x
                  mul r4.xyz, r4.xxxx, r5.xyzx  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                  log r4.xyz, r4.xyzx
                  mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r4.xyz, r4.xyzx
                  min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z
                
                #line 277
                  mov r4.w, r1.w
                  and r4.xyzw, r2.wwww, r4.xyzw  // r4.x <- litColor.x; r4.y <- litColor.y; r4.z <- litColor.z; r4.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 346
                endif 
                
                #line 336
                eq r2.w, cb0[49].z, l(1.000000)
                if_nz r2.w
                
                #line 254
                  add r4.xyz, v1.xyzx, -cb0[47].yzwy  // r4.x <- lightDirection.x; r4.y <- lightDirection.y; r4.z <- lightDirection.z
                  dp3 r2.w, r4.xyzx, cb0[48].xyzx
                  add r4.x, -|r2.w|, l(1.000000)
                  sqrt r4.x, r4.x
                  mad r4.y, |r2.w|, l(-0.018729), l(0.074261)
                  mad r4.y, r4.y, |r2.w|, l(-0.212114)
                  mad r4.y, r4.y, |r2.w|, l(1.570729)
                  mul r4.z, r4.x, r4.y
                  mad r4.z, r4.z, l(-2.000000), l(3.141593)
                  lt r2.w, r2.w, -r2.w
                  and r2.w, r2.w, r4.z
                  mad r2.w, r4.y, r4.x, r2.w
                  mul r2.w, r2.w, l(57.295780)  // r2.w <- lightToSurfaceAngle
                  ge r2.w, cb0[48].w, r2.w
                
                #line 154
                  dp3 r4.x, r0.xyzx, -cb0[48].xyzx
                  max r4.x, r4.x, l(0.000000)  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.x, r4.x, cb0[47].x  // r5.x <- diffuse
                  dp3 r4.x, cb0[48].xyzx, r0.xyzx
                  add r4.x, r4.x, r4.x
                  mad r0.xyz, r0.xyzx, -r4.xxxx, cb0[48].xyzx
                  dp3 r4.x, r0.xyzx, r0.xyzx
                  rsq r4.x, r4.x
                  mul r0.xyz, r0.xyzx, r4.xxxx  // r0.x <- lightReflection.x; r0.y <- lightReflection.y; r0.z <- lightReflection.z
                  dp3 r0.x, r2.xyzx, r0.xyzx
                  max r0.x, r0.x, l(0.000000)  // r0.x <- specularFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 166
                  max r0.z, cb1[1].y, l(1.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  exp r0.x, r0.x  // r0.x <- specularFactor
                  mul r0.x, r0.x, cb1[1].x  // r0.x <- specular
                  and r5.y, r0.x, r0.y  // r5.y <- specular
                  and r0.xy, r4.yyyy, r5.xyxx  // r0.x <- diffuse; r0.y <- specular
                  mul r2.xyz, r1.xyzx, cb0[46].xyzx
                  add r0.x, r0.x, cb0[46].w
                  add r0.x, r0.y, r0.x
                  mul r0.xyz, r0.xxxx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                  log r0.xyz, r0.xyzx
                  mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
                  exp r0.xyz, r0.xyzx
                  min r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 277
                  and r1.xyzw, r1.xyzw, r2.wwww  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 338
                  add r3.xyzw, r1.xyzw, r3.xyzw
                
                #line 346
                endif 
                
                #line 580 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[50].x
                
                #line 583
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 133 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[49].w
                div_sat r0.y, r0.y, cb0[50].x  // r0.y <- fogLerp
                add r1.xyzw, -r3.xyzw, cb0[51].xyzw
                mad r1.xyzw, r0.yyyy, r1.xyzw, r3.xyzw  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z; r1.w <- <ComputeFog return value>.w
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyzw, r0.xxxx, r1.xyzw, r3.xyzw
                ret 
                // Approximately 580 instruction slots used
                            
            };
        }

    }

}

