//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInverse;             // Offset:   64, size:   64
    float4x4 gWorldViewProjection;      // Offset:  128, size:   64
    float4x4 gShadowTransform;          // Offset:  192, size:   64
    DirectionalLight gDirLights[3];     // Offset:  256, size:  132
    PointLight gPointLights[4];         // Offset:  400, size:  184
    SpotLight gSpotLights[4];           // Offset:  592, size:  256
    float3  gEyePositionWorld;          // Offset:  848, size:   12
    float   gFogStart;                  // Offset:  860, size:    4
    float   gFogRange;                  // Offset:  864, size:    4
    float4  gFogColor;                  // Offset:  880, size:   16
    float   gEnableShadows;             // Offset:  896, size:    4
}

cbuffer cbPerObject : register(b1)
{
    Material gMaterial;                 // Offset:    0, size:   24
}

cbuffer cbSkinned : register(b2)
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

cbuffer cbPerInstance : register(b3)
{
    float   gTextureIndex;              // Offset:    0, size:    4
}

//
// 19 local object(s)
//
RasterizerState RasterizerDefault
{
};
RasterizerState RasterizerSolid
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerWireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerDepth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState RasterizerNoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState StencilDefault
{
};
DepthStencilState StencilEnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilDisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState StencilLessEqualDSS
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState BlendDefault
{
};
BlendState BlendAdditive
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState SamplerFont
{
};
SamplerState SamplerPoint
{
};
SamplerComparisonState SamplerShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
Texture2DArray gTextureArray;
Texture2D gNormalMap;
Texture2D gShadowMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 25 technique(s)
    //
    technique11 PositionColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   o2.x <- <VSPositionColor return value>.color.x; o2.y <- <VSPositionColor return value>.color.y; o2.z <- <VSPositionColor return value>.color.z; o2.w <- <VSPositionColor return value>.color.w; 
                //   o1.x <- <VSPositionColor return value>.positionWorld.x; o1.y <- <VSPositionColor return value>.positionWorld.y; o1.z <- <VSPositionColor return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColor return value>.positionHomogeneous.x; o0.y <- <VSPositionColor return value>.positionHomogeneous.y; o0.z <- <VSPositionColor return value>.positionHomogeneous.z; o0.w <- <VSPositionColor return value>.positionHomogeneous.w
                //
                #line 46 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 50
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 111 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                add r1.xyzw, -v2.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 109 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[54].x
                
                #line 115
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw
                ret 
                // Approximately 10 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionColorI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // localTransform           0   xyzw        2     NONE   float   xyzw
                // localTransform           1   xyzw        3     NONE   float   xyzw
                // localTransform           2   xyzw        4     NONE   float   xyzw
                // localTransform           3   xyzw        5     NONE   float   xyzw
                // textureIndex             0   x           6     NONE   float       
                // SV_InstanceID            0   x           7   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.localTransform._m00; v2.y <- input.localTransform._m01; v2.z <- input.localTransform._m02; v2.w <- input.localTransform._m03; 
                //   v3.x <- input.localTransform._m10; v3.y <- input.localTransform._m11; v3.z <- input.localTransform._m12; v3.w <- input.localTransform._m13; 
                //   v4.x <- input.localTransform._m20; v4.y <- input.localTransform._m21; v4.z <- input.localTransform._m22; v4.w <- input.localTransform._m23; 
                //   v5.x <- input.localTransform._m30; v5.y <- input.localTransform._m31; v5.z <- input.localTransform._m32; v5.w <- input.localTransform._m33; 
                //   v6.x <- input.textureIndex; 
                //   v7.x <- input.instanceId; 
                //   o2.x <- <VSPositionColorI return value>.color.x; o2.y <- <VSPositionColorI return value>.color.y; o2.z <- <VSPositionColorI return value>.color.z; o2.w <- <VSPositionColorI return value>.color.w; 
                //   o1.x <- <VSPositionColorI return value>.positionWorld.x; o1.y <- <VSPositionColorI return value>.positionWorld.y; o1.z <- <VSPositionColorI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColorI return value>.positionHomogeneous.x; o0.y <- <VSPositionColorI return value>.positionHomogeneous.y; o0.z <- <VSPositionColorI return value>.positionHomogeneous.z; o0.w <- <VSPositionColorI return value>.positionHomogeneous.w
                //
                #line 56 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 62
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 111 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                add r1.xyzw, -v2.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 109 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[54].x
                
                #line 115
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw
                ret 
                // Approximately 10 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionColorSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   o2.x <- <VSPositionColorSkinned return value>.color.x; o2.y <- <VSPositionColorSkinned return value>.color.y; o2.z <- <VSPositionColorSkinned return value>.color.z; o2.w <- <VSPositionColorSkinned return value>.color.w; 
                //   o1.x <- <VSPositionColorSkinned return value>.positionWorld.x; o1.y <- <VSPositionColorSkinned return value>.positionWorld.y; o1.z <- <VSPositionColorSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColorSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionColorSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionColorSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionColorSkinned return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 370
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 376
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 77 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                
                #line 81
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 41 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 111 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                add r1.xyzw, -v2.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 109 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[54].x
                
                #line 115
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw
                ret 
                // Approximately 10 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionColorSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float       
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o2.x <- <VSPositionColorSkinnedI return value>.color.x; o2.y <- <VSPositionColorSkinnedI return value>.color.y; o2.z <- <VSPositionColorSkinnedI return value>.color.z; o2.w <- <VSPositionColorSkinnedI return value>.color.w; 
                //   o1.x <- <VSPositionColorSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionColorSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionColorSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionColorSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionColorSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionColorSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionColorSkinnedI return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 370
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 376
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 96 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r1.yyyy, v5.xyzw
                mad r0.xyzw, r1.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 102
                mov o2.xyzw, v1.xyzw
                ret 
                // Approximately 44 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o0.x <- <PSPositionColor return value>.x; o0.y <- <PSPositionColor return value>.y; o0.z <- <PSPositionColor return value>.z; o0.w <- <PSPositionColor return value>.w
                //
                #line 111 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                add r1.xyzw, -v2.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r1.xyzw, v2.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 109 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r1.x, l(0.000000), cb0[54].x
                
                #line 115
                movc o0.xyzw, r1.xxxx, r0.xyzw, v2.xyzw
                ret 
                // Approximately 10 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   o4.x <- <VSPositionNormalColor return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColor return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColor return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColor return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColor return value>.color.x; o3.y <- <VSPositionNormalColor return value>.color.y; o3.z <- <VSPositionNormalColor return value>.color.z; o3.w <- <VSPositionNormalColor return value>.color.w; 
                //   o2.x <- <VSPositionNormalColor return value>.normalWorld.x; o2.y <- <VSPositionNormalColor return value>.normalWorld.y; o2.z <- <VSPositionNormalColor return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColor return value>.positionWorld.x; o1.y <- <VSPositionNormalColor return value>.positionWorld.y; o1.z <- <VSPositionNormalColor return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColor return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColor return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColor return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColor return value>.positionHomogeneous.w
                //
                #line 127 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 133
                mov o3.xyzw, v2.xyzw
                
                #line 129
                dp4 o4.x, r0.xyzw, cb0[12].xyzw
                dp4 o4.y, r0.xyzw, cb0[13].xyzw
                dp4 o4.z, r0.xyzw, cb0[14].xyzw
                dp4 o4.w, r0.xyzw, cb0[15].xyzw
                
                #line 133
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float      w
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.w
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 202 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.y, v2.xyzx, -cb0[17].yzwy  // r1.y <- diffuseFactor
                lt r1.z, l(0.000000), r1.y
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.yyyy, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.y, cb0[17].yzwy, v2.xyzx
                add r1.y, r1.y, r1.y
                mad r3.xyz, v2.xyzx, -r1.yyyy, cb0[17].yzwy
                dp3 r1.y, r3.xyzx, r3.xyzx
                rsq r1.y, r1.y
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.y, r0.xyzx, r3.xyzx  // r1.y <- specFactor
                lt r1.w, l(0.000000), r1.y
                
                #line 165
                max r2.w, cb1[1].y, l(1.000000)
                log r1.y, |r1.y|
                mul r1.y, r1.y, r2.w
                exp r1.y, r1.y  // r1.y <- specFactor
                mul r3.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                and r3.xyz, r1.wwww, r3.xyzx
                and r2.xyz, r1.zzzz, r2.xyzx
                and r1.yzw, r1.zzzz, r3.xxyz  // r1.y <- specularColor.x; r1.z <- specularColor.y; r1.w <- specularColor.z
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r1.yzw, r1.yyzw, r2.xxyz  // r1.y <- <ComputeLight return value>.x; r1.z <- <ComputeLight return value>.y; r1.w <- <ComputeLight return value>.z
                
                #line 346
                and r1.xyz, r1.yzwy, r1.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[20].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[20].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[20].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[19].xyzx, cb0[19].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[23].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[23].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[23].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[22].xyzx, cb0[22].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 352
                eq r1.w, cb0[27].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[25].xyzx, cb0[25].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[26].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[30].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[28].xyzx, cb0[28].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[29].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[33].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[31].xyzx, cb0[31].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[32].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[36].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[34].xyzx, cb0[34].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[36].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[35].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r1.w, cb0[40].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[39].xyzx  // r1.w <- spot
                  lt r1.w, cb0[39].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[37].xyzx, cb0[37].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[44].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[43].xyzx  // r1.w <- spot
                  lt r1.w, cb0[43].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[41].xyzx, cb0[41].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[48].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[47].xyzx  // r1.w <- spot
                  lt r1.w, cb0[47].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[45].xyzx, cb0[45].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[52].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[51].xyzx  // r1.w <- spot
                  lt r1.w, cb0[51].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.x, r0.xyzx, r4.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r2.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r4.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r0.xyz, r0.xyzx, r2.zzzz
                  mad r2.yzw, cb0[49].xxyz, cb0[49].wwww, r3.xxyz
                  add r0.xyz, r0.xyzx, r2.yzwy  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r2.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r1.wwww
                
                #line 369
                  add r1.xyz, r0.xyzx, r1.xyzx
                
                #line 376
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r2.xyz, -r1.xyzx, cb0[55].xyzx
                mad r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz  // r0.y <- <ComputeFog return value>.x; r0.z <- <ComputeFog return value>.y; r0.w <- <ComputeFog return value>.z
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
                
                #line 228
                mov o0.w, v3.w
                ret 
                // Approximately 384 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalColorI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // localTransform           0   xyzw        3     NONE   float   xyzw
                // localTransform           1   xyzw        4     NONE   float   xyzw
                // localTransform           2   xyzw        5     NONE   float   xyzw
                // localTransform           3   xyzw        6     NONE   float   xyzw
                // textureIndex             0   x           7     NONE   float       
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.localTransform._m00; v3.y <- input.localTransform._m01; v3.z <- input.localTransform._m02; v3.w <- input.localTransform._m03; 
                //   v4.x <- input.localTransform._m10; v4.y <- input.localTransform._m11; v4.z <- input.localTransform._m12; v4.w <- input.localTransform._m13; 
                //   v5.x <- input.localTransform._m20; v5.y <- input.localTransform._m21; v5.z <- input.localTransform._m22; v5.w <- input.localTransform._m23; 
                //   v6.x <- input.localTransform._m30; v6.y <- input.localTransform._m31; v6.z <- input.localTransform._m32; v6.w <- input.localTransform._m33; 
                //   v7.x <- input.textureIndex; 
                //   v8.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalColorI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColorI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColorI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColorI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColorI return value>.color.x; o3.y <- <VSPositionNormalColorI return value>.color.y; o3.z <- <VSPositionNormalColorI return value>.color.z; o3.w <- <VSPositionNormalColorI return value>.color.w; 
                //   o2.x <- <VSPositionNormalColorI return value>.normalWorld.x; o2.y <- <VSPositionNormalColorI return value>.normalWorld.y; o2.z <- <VSPositionNormalColorI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColorI return value>.positionWorld.x; o1.y <- <VSPositionNormalColorI return value>.positionWorld.y; o1.z <- <VSPositionNormalColorI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColorI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColorI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColorI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColorI return value>.positionHomogeneous.w
                //
                #line 139 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 147
                mov o3.xyzw, v2.xyzw
                
                #line 143
                dp4 o4.x, r0.xyzw, cb0[12].xyzw
                dp4 o4.y, r0.xyzw, cb0[13].xyzw
                dp4 o4.z, r0.xyzw, cb0[14].xyzw
                dp4 o4.w, r0.xyzw, cb0[15].xyzw
                
                #line 147
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float      w
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.w
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 202 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.y, v2.xyzx, -cb0[17].yzwy  // r1.y <- diffuseFactor
                lt r1.z, l(0.000000), r1.y
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.yyyy, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.y, cb0[17].yzwy, v2.xyzx
                add r1.y, r1.y, r1.y
                mad r3.xyz, v2.xyzx, -r1.yyyy, cb0[17].yzwy
                dp3 r1.y, r3.xyzx, r3.xyzx
                rsq r1.y, r1.y
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.y, r0.xyzx, r3.xyzx  // r1.y <- specFactor
                lt r1.w, l(0.000000), r1.y
                
                #line 165
                max r2.w, cb1[1].y, l(1.000000)
                log r1.y, |r1.y|
                mul r1.y, r1.y, r2.w
                exp r1.y, r1.y  // r1.y <- specFactor
                mul r3.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                and r3.xyz, r1.wwww, r3.xyzx
                and r2.xyz, r1.zzzz, r2.xyzx
                and r1.yzw, r1.zzzz, r3.xxyz  // r1.y <- specularColor.x; r1.z <- specularColor.y; r1.w <- specularColor.z
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r1.yzw, r1.yyzw, r2.xxyz  // r1.y <- <ComputeLight return value>.x; r1.z <- <ComputeLight return value>.y; r1.w <- <ComputeLight return value>.z
                
                #line 346
                and r1.xyz, r1.yzwy, r1.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[20].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[20].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[20].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[19].xyzx, cb0[19].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[23].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[23].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[23].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[22].xyzx, cb0[22].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 352
                eq r1.w, cb0[27].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[25].xyzx, cb0[25].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[26].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[30].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[28].xyzx, cb0[28].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[29].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[33].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[31].xyzx, cb0[31].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[32].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[36].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[34].xyzx, cb0[34].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[36].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[35].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r1.w, cb0[40].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[39].xyzx  // r1.w <- spot
                  lt r1.w, cb0[39].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[37].xyzx, cb0[37].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[44].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[43].xyzx  // r1.w <- spot
                  lt r1.w, cb0[43].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[41].xyzx, cb0[41].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[48].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[47].xyzx  // r1.w <- spot
                  lt r1.w, cb0[47].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[45].xyzx, cb0[45].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[52].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[51].xyzx  // r1.w <- spot
                  lt r1.w, cb0[51].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.x, r0.xyzx, r4.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r2.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r4.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r0.xyz, r0.xyzx, r2.zzzz
                  mad r2.yzw, cb0[49].xxyz, cb0[49].wwww, r3.xxyz
                  add r0.xyz, r0.xyzx, r2.yzwy  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r2.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r1.wwww
                
                #line 369
                  add r1.xyz, r0.xyzx, r1.xyzx
                
                #line 376
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r2.xyz, -r1.xyzx, cb0[55].xyzx
                mad r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz  // r0.y <- <ComputeFog return value>.x; r0.z <- <ComputeFog return value>.y; r0.w <- <ComputeFog return value>.z
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
                
                #line 228
                mov o0.w, v3.w
                ret 
                // Approximately 384 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalColorSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   o4.x <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColorSkinned return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColorSkinned return value>.color.x; o3.y <- <VSPositionNormalColorSkinned return value>.color.y; o3.z <- <VSPositionNormalColorSkinned return value>.color.z; o3.w <- <VSPositionNormalColorSkinned return value>.color.w; 
                //   o2.x <- <VSPositionNormalColorSkinned return value>.normalWorld.x; o2.y <- <VSPositionNormalColorSkinned return value>.normalWorld.y; o2.z <- <VSPositionNormalColorSkinned return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColorSkinned return value>.positionWorld.x; o1.y <- <VSPositionNormalColorSkinned return value>.positionWorld.y; o1.z <- <VSPositionNormalColorSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColorSkinned return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 392
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 399
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- normalLocal.x; r2.y <- normalLocal.y; r2.z <- normalLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx
                endloop 
                
                #line 165 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                dp4 o4.x, r1.xyzw, cb0[12].xyzw
                dp4 o4.y, r1.xyzw, cb0[13].xyzw
                dp4 o4.z, r1.xyzw, cb0[14].xyzw
                dp4 o4.w, r1.xyzw, cb0[15].xyzw
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 171
                mov o3.xyzw, v2.xyzw
                ret 
                // Approximately 56 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float      w
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.w
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 202 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.y, v2.xyzx, -cb0[17].yzwy  // r1.y <- diffuseFactor
                lt r1.z, l(0.000000), r1.y
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.yyyy, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.y, cb0[17].yzwy, v2.xyzx
                add r1.y, r1.y, r1.y
                mad r3.xyz, v2.xyzx, -r1.yyyy, cb0[17].yzwy
                dp3 r1.y, r3.xyzx, r3.xyzx
                rsq r1.y, r1.y
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.y, r0.xyzx, r3.xyzx  // r1.y <- specFactor
                lt r1.w, l(0.000000), r1.y
                
                #line 165
                max r2.w, cb1[1].y, l(1.000000)
                log r1.y, |r1.y|
                mul r1.y, r1.y, r2.w
                exp r1.y, r1.y  // r1.y <- specFactor
                mul r3.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                and r3.xyz, r1.wwww, r3.xyzx
                and r2.xyz, r1.zzzz, r2.xyzx
                and r1.yzw, r1.zzzz, r3.xxyz  // r1.y <- specularColor.x; r1.z <- specularColor.y; r1.w <- specularColor.z
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r1.yzw, r1.yyzw, r2.xxyz  // r1.y <- <ComputeLight return value>.x; r1.z <- <ComputeLight return value>.y; r1.w <- <ComputeLight return value>.z
                
                #line 346
                and r1.xyz, r1.yzwy, r1.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[20].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[20].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[20].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[19].xyzx, cb0[19].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[23].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[23].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[23].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[22].xyzx, cb0[22].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 352
                eq r1.w, cb0[27].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[25].xyzx, cb0[25].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[26].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[30].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[28].xyzx, cb0[28].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[29].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[33].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[31].xyzx, cb0[31].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[32].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[36].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[34].xyzx, cb0[34].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[36].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[35].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r1.w, cb0[40].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[39].xyzx  // r1.w <- spot
                  lt r1.w, cb0[39].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[37].xyzx, cb0[37].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[44].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[43].xyzx  // r1.w <- spot
                  lt r1.w, cb0[43].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[41].xyzx, cb0[41].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[48].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[47].xyzx  // r1.w <- spot
                  lt r1.w, cb0[47].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[45].xyzx, cb0[45].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[52].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[51].xyzx  // r1.w <- spot
                  lt r1.w, cb0[51].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.x, r0.xyzx, r4.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r2.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r4.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r0.xyz, r0.xyzx, r2.zzzz
                  mad r2.yzw, cb0[49].xxyz, cb0[49].wwww, r3.xxyz
                  add r0.xyz, r0.xyzx, r2.yzwy  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r2.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r1.wwww
                
                #line 369
                  add r1.xyz, r0.xyzx, r1.xyzx
                
                #line 376
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r2.xyz, -r1.xyzx, cb0[55].xyzx
                mad r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz  // r0.y <- <ComputeFog return value>.x; r0.z <- <ComputeFog return value>.y; r0.w <- <ComputeFog return value>.z
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
                
                #line 228
                mov o0.w, v3.w
                ret 
                // Approximately 384 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalColorSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                // localTransform           0   xyzw        5     NONE   float   xyzw
                // localTransform           1   xyzw        6     NONE   float   xyzw
                // localTransform           2   xyzw        7     NONE   float   xyzw
                // localTransform           3   xyzw        8     NONE   float   xyzw
                // textureIndex             0   x           9     NONE   float       
                // SV_InstanceID            0   x          10   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.color.x; v2.y <- input.color.y; v2.z <- input.color.z; v2.w <- input.color.w; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   v5.x <- input.localTransform._m00; v5.y <- input.localTransform._m01; v5.z <- input.localTransform._m02; v5.w <- input.localTransform._m03; 
                //   v6.x <- input.localTransform._m10; v6.y <- input.localTransform._m11; v6.z <- input.localTransform._m12; v6.w <- input.localTransform._m13; 
                //   v7.x <- input.localTransform._m20; v7.y <- input.localTransform._m21; v7.z <- input.localTransform._m22; v7.w <- input.localTransform._m23; 
                //   v8.x <- input.localTransform._m30; v8.y <- input.localTransform._m31; v8.z <- input.localTransform._m32; v8.w <- input.localTransform._m33; 
                //   v9.x <- input.textureIndex; 
                //   v10.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalColorSkinnedI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalColorSkinnedI return value>.color.x; o3.y <- <VSPositionNormalColorSkinnedI return value>.color.y; o3.z <- <VSPositionNormalColorSkinnedI return value>.color.z; o3.w <- <VSPositionNormalColorSkinnedI return value>.color.w; 
                //   o2.x <- <VSPositionNormalColorSkinnedI return value>.normalWorld.x; o2.y <- <VSPositionNormalColorSkinnedI return value>.normalWorld.y; o2.z <- <VSPositionNormalColorSkinnedI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalColorSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionNormalColorSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionNormalColorSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalColorSkinnedI return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 392
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 399
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalLocal.x; r1.y <- normalLocal.y; r1.z <- normalLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- positionLocal.x; r2.y <- positionLocal.y; r2.z <- positionLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r1.w, r3.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r3.x + 0].x
                  ineg r2.w, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r2.w, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r2.xyz, r1.wwww, r4.xyzx, r2.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r4.xyzx, r1.xyzx
                endloop 
                
                #line 189 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r2.yyyy, v6.xyzw
                mad r0.xyzw, r2.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r2.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp4 o4.x, r0.xyzw, cb0[12].xyzw
                dp4 o4.y, r0.xyzw, cb0[13].xyzw
                dp4 o4.z, r0.xyzw, cb0[14].xyzw
                dp4 o4.w, r0.xyzw, cb0[15].xyzw
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 197
                mov o3.xyzw, v2.xyzw
                ret 
                // Approximately 59 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float      w
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.w
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   o0.x <- <PSPositionNormalColor return value>.x; o0.y <- <PSPositionNormalColor return value>.y; o0.z <- <PSPositionNormalColor return value>.z; o0.w <- <PSPositionNormalColor return value>.w
                //
                #line 202 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r1.x, r0.w
                mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.y, v2.xyzx, -cb0[17].yzwy  // r1.y <- diffuseFactor
                lt r1.z, l(0.000000), r1.y
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.yyyy, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.y, cb0[17].yzwy, v2.xyzx
                add r1.y, r1.y, r1.y
                mad r3.xyz, v2.xyzx, -r1.yyyy, cb0[17].yzwy
                dp3 r1.y, r3.xyzx, r3.xyzx
                rsq r1.y, r1.y
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.y, r0.xyzx, r3.xyzx  // r1.y <- specFactor
                lt r1.w, l(0.000000), r1.y
                
                #line 165
                max r2.w, cb1[1].y, l(1.000000)
                log r1.y, |r1.y|
                mul r1.y, r1.y, r2.w
                exp r1.y, r1.y  // r1.y <- specFactor
                mul r3.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r3.xyz, r1.yyyy, r3.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                and r3.xyz, r1.wwww, r3.xyzx
                and r2.xyz, r1.zzzz, r2.xyzx
                and r1.yzw, r1.zzzz, r3.xxyz  // r1.y <- specularColor.x; r1.z <- specularColor.y; r1.w <- specularColor.z
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r1.yzw, r1.yyzw, r2.xxyz  // r1.y <- <ComputeLight return value>.x; r1.z <- <ComputeLight return value>.y; r1.w <- <ComputeLight return value>.z
                
                #line 346
                and r1.xyz, r1.yzwy, r1.xxxx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[20].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[20].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[20].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[19].xyzx, cb0[19].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 337
                eq r1.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.x, v2.xyzx, -cb0[23].yzwy  // r2.x <- diffuseFactor
                lt r2.y, l(0.000000), r2.x
                mul r3.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r3.xyz, r2.xxxx, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.x, cb0[23].yzwy, v2.xyzx
                add r2.x, r2.x, r2.x
                mad r4.xyz, v2.xyzx, -r2.xxxx, cb0[23].yzwy
                dp3 r2.x, r4.xyzx, r4.xyzx
                rsq r2.x, r2.x
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.x, r0.xyzx, r4.xyzx  // r2.x <- specFactor
                lt r2.z, l(0.000000), r2.x
                
                #line 165
                log r2.x, |r2.x|
                mul r2.x, r2.x, r2.w
                exp r2.x, r2.x  // r2.x <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.zzzz, r4.xyzx
                and r3.xyz, r2.yyyy, r3.xyzx
                and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                mad r3.xyz, cb0[22].xyzx, cb0[22].wwww, r3.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 339
                add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 346
                movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 352
                eq r1.w, cb0[27].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[25].xyzx, cb0[25].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[27].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[26].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[30].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[28].xyzx, cb0[28].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[30].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[29].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[33].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[31].xyzx, cb0[31].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[33].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[32].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r1.w, cb0[36].y, l(1.000000)
                if_nz r1.w
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w  // r1.w <- distance
                  div r2.xyz, r2.xyzx, r1.wwww
                
                #line 154
                  dp3 r3.x, v2.xyzx, -r2.xyzx  // r3.x <- diffuseFactor
                  lt r3.y, l(0.000000), r3.x
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r3.xzw, r3.xxxx, r4.xxyz  // r3.x <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r4.x, r2.xyzx, v2.xyzx
                  add r4.x, r4.x, r4.x
                  mad r2.xyz, v2.xyzx, -r4.xxxx, r2.xyzx
                  dp3 r4.x, r2.xyzx, r2.xyzx
                  rsq r4.x, r4.x
                  mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.xyzx, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r4.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r4.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r3.xzw, r3.xxzw, r3.yyyy
                  and r2.xyz, r2.xyzx, r3.yyyy
                  mad r3.xyz, cb0[34].xyzx, cb0[34].wwww, r3.xzwx
                  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.x, r1.w, cb0[36].x  // r3.x <- f
                  mad r3.x, -r3.x, r3.x, l(1.000000)  // r3.x <- denom
                  lt r3.y, l(0.000000), r3.x
                  div r1.w, r1.w, r3.x  // r1.w <- d
                  add r1.w, r1.w, l(1.000000)  // r1.w <- dn
                  mul r1.w, r1.w, r1.w
                  div r1.w, cb0[35].x, r1.w  // r1.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r1.w, r1.w, r3.y
                
                #line 354
                  mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r1.w, cb0[40].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[39].xyzx  // r1.w <- spot
                  lt r1.w, cb0[39].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[37].xyzx, cb0[37].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[44].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[43].xyzx  // r1.w <- spot
                  lt r1.w, cb0[43].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[41].xyzx, cb0[41].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[48].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[47].xyzx  // r1.w <- spot
                  lt r1.w, cb0[47].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.xyzx, r4.xyzx  // r2.y <- specFactor
                  lt r3.w, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r2.w
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r4.xyz, r3.wwww, r4.xyzx
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.xyz, cb0[45].xyzx, cb0[45].wwww, r3.xyzx
                  add r3.xyz, r4.xyzx, r3.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.xyzx, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r1.wwww, r2.xyzx
                
                #line 369
                  add r1.xyz, r1.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r1.w, cb0[52].w, l(1.000000)
                if_nz r1.w
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r1.w, r2.xyzx, cb0[51].xyzx  // r1.w <- spot
                  lt r1.w, cb0[51].w, r1.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.x, r0.xyzx, r4.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r2.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.xxxx, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r4.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.xyzx
                  and r0.xyz, r0.xyzx, r2.zzzz
                  mad r2.yzw, cb0[49].xxyz, cb0[49].wwww, r3.xxyz
                  add r0.xyz, r0.xyzx, r2.yzwy  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r2.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r1.wwww
                
                #line 369
                  add r1.xyz, r0.xyzx, r1.xyzx
                
                #line 376
                endif 
                
                #line 218 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 221
                sqrt r0.y, r0.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r2.xyz, -r1.xyzx, cb0[55].xyzx
                mad r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz  // r0.y <- <ComputeFog return value>.x; r0.z <- <ComputeFog return value>.y; r0.w <- <ComputeFog return value>.z
                
                #line 224 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
                
                #line 228
                mov o0.w, v3.w
                ret 
                // Approximately 384 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 243
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 307 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 386 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[54].x
                
                #line 311
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureRED
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 243
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureRED return value>.x; o0.y <- <PSPositionTextureRED return value>.y; o0.z <- <PSPositionTextureRED return value>.z; o0.w <- <PSPositionTextureRED return value>.w
                //
                #line 319 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.xyzw, s0  // r0.x <- litColor.x
                
                #line 322
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureGREEN
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 243
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureGREEN return value>.x; o0.y <- <PSPositionTextureGREEN return value>.y; o0.z <- <PSPositionTextureGREEN return value>.z; o0.w <- <PSPositionTextureGREEN return value>.w
                //
                #line 326 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.yxzw, s0  // r0.x <- litColor.y
                
                #line 329
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureBLUE
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 243
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureBLUE return value>.x; o0.y <- <PSPositionTextureBLUE return value>.y; o0.z <- <PSPositionTextureBLUE return value>.z; o0.w <- <PSPositionTextureBLUE return value>.w
                //
                #line 333 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.zxyw, s0  // r0.x <- litColor.z
                
                #line 336
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureALPHA
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 243
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureALPHA return value>.x; o0.y <- <PSPositionTextureALPHA return value>.y; o0.z <- <PSPositionTextureALPHA return value>.z; o0.w <- <PSPositionTextureALPHA return value>.w
                //
                #line 340 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v2.xyzx, t0.wxyz, s0  // r0.x <- litColor.w
                
                #line 343
                mov o0.xyz, r0.xxxx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureNOALPHA
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   o2.x <- <VSPositionTexture return value>.tex.x; o2.y <- <VSPositionTexture return value>.tex.y; o2.z <- <VSPositionTexture return value>.textureIndex; 
                //   o1.x <- <VSPositionTexture return value>.positionWorld.x; o1.y <- <VSPositionTexture return value>.positionWorld.y; o1.z <- <VSPositionTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionTexture return value>.positionHomogeneous.w
                //
                #line 238 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 243
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTextureNOALPHA return value>.x; o0.y <- <PSPositionTextureNOALPHA return value>.y; o0.z <- <PSPositionTextureNOALPHA return value>.z; o0.w <- <PSPositionTextureNOALPHA return value>.w
                //
                #line 347 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.xyz, v2.xyzx, t0.xyzw, s0  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 4 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // localTransform           0   xyzw        2     NONE   float   xyzw
                // localTransform           1   xyzw        3     NONE   float   xyzw
                // localTransform           2   xyzw        4     NONE   float   xyzw
                // localTransform           3   xyzw        5     NONE   float   xyzw
                // textureIndex             0   x           6     NONE   float   x   
                // SV_InstanceID            0   x           7   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.localTransform._m00; v2.y <- input.localTransform._m01; v2.z <- input.localTransform._m02; v2.w <- input.localTransform._m03; 
                //   v3.x <- input.localTransform._m10; v3.y <- input.localTransform._m11; v3.z <- input.localTransform._m12; v3.w <- input.localTransform._m13; 
                //   v4.x <- input.localTransform._m20; v4.y <- input.localTransform._m21; v4.z <- input.localTransform._m22; v4.w <- input.localTransform._m23; 
                //   v5.x <- input.localTransform._m30; v5.y <- input.localTransform._m31; v5.z <- input.localTransform._m32; v5.w <- input.localTransform._m33; 
                //   v6.x <- input.textureIndex; 
                //   v7.x <- input.instanceId; 
                //   o2.x <- <VSPositionTextureI return value>.tex.x; o2.y <- <VSPositionTextureI return value>.tex.y; o2.z <- <VSPositionTextureI return value>.textureIndex; 
                //   o1.x <- <VSPositionTextureI return value>.positionWorld.x; o1.y <- <VSPositionTextureI return value>.positionWorld.y; o1.z <- <VSPositionTextureI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTextureI return value>.positionHomogeneous.x; o0.y <- <VSPositionTextureI return value>.positionHomogeneous.y; o0.z <- <VSPositionTextureI return value>.positionHomogeneous.z; o0.w <- <VSPositionTextureI return value>.positionHomogeneous.w
                //
                #line 249 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v3.xyzw
                mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v5.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 256
                mov o2.xy, v1.xyxx
                mov o2.z, v6.x
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 307 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 386 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[54].x
                
                #line 311
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   o2.x <- <VSPositionTextureSkinned return value>.tex.x; o2.y <- <VSPositionTextureSkinned return value>.tex.y; o2.z <- <VSPositionTextureSkinned return value>.textureIndex; 
                //   o1.x <- <VSPositionTextureSkinned return value>.positionWorld.x; o1.y <- <VSPositionTextureSkinned return value>.positionWorld.y; o1.z <- <VSPositionTextureSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTextureSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionTextureSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionTextureSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionTextureSkinned return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 370
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 376
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r2.z, r2.x, l(4)
                  breakc_nz r2.z
                  mov r2.z, x0[r2.x + 0].x
                  ineg r2.w, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.w, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yw, r3.yyyw, r3.xxxz
                  or r2.y, r2.w, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r2.zzzz, r3.xyzx, r1.xyzx
                endloop 
                
                #line 271 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                
                #line 276
                mov o2.xy, v1.xyxx
                mov o2.z, cb3[0].x
                ret 
                // Approximately 42 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 307 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 386 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[54].x
                
                #line 311
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionTextureSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // WEIGHTS                  0   xyz         2     NONE   float   xyz 
                // BONEINDICES              0   xyzw        3     NONE    uint   xyzw
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.tex.x; v1.y <- input.tex.y; 
                //   v2.x <- input.weights.x; v2.y <- input.weights.y; v2.z <- input.weights.z; 
                //   v3.x <- input.boneIndices.x; v3.y <- input.boneIndices.y; v3.z <- input.boneIndices.z; v3.w <- input.boneIndices.w; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o2.x <- <VSPositionTextureSkinnedI return value>.tex.x; o2.y <- <VSPositionTextureSkinnedI return value>.tex.y; o2.z <- <VSPositionTextureSkinnedI return value>.textureIndex; 
                //   o1.x <- <VSPositionTextureSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionTextureSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionTextureSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionTextureSkinnedI return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v2.x, l(1.000000)
                add r0.x, r0.x, -v2.y
                add r0.x, r0.x, -v2.z
                
                #line 370
                mov x0[0].x, v2.x
                mov x0[1].x, v2.y
                mov x0[2].x, v2.z
                mov x0[3].x, r0.x
                
                #line 376
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.x, l(0)  // r2.x <- i
                loop 
                  ige r1.w, r2.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r2.x + 0].x
                  ineg r2.z, r2.x
                  ult r3.xyz, r2.xxxx, l(1, 2, 3, 0)
                  and r4.y, r2.z, r3.y
                  iadd r2.xy, r2.xxxx, l(1, -3, 0, 0)
                  movc r4.z, r3.y, l(0), r2.y
                  ieq r4.w, r3.z, l(0)
                  mov r4.x, r3.x
                  and r3.xyzw, r4.xyzw, v3.xyzw
                  or r2.yz, r3.yywy, r3.xxzx
                  or r2.y, r2.z, r2.y
                  ishl r2.y, r2.y, l(2)
                  dp4 r3.x, r0.xyzw, cb2[r2.y + 0].xyzw
                  dp4 r3.y, r0.xyzw, cb2[r2.y + 1].xyzw
                  dp4 r3.z, r0.xyzw, cb2[r2.y + 2].xyzw
                  mad r1.xyz, r1.wwww, r3.xyzx, r1.xyzx
                endloop 
                
                #line 291 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r1.yyyy, v5.xyzw
                mad r0.xyzw, r1.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, r1.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                
                #line 298
                mov o2.xy, v1.xyxx
                mov o2.z, v8.x
                ret 
                // Approximately 45 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // textureIndex             0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.z
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; v2.z <- input.textureIndex; 
                //   o0.x <- <PSPositionTexture return value>.x; o0.y <- <PSPositionTexture return value>.y; o0.z <- <PSPositionTexture return value>.z; o0.w <- <PSPositionTexture return value>.w
                //
                #line 307 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                add r0.xyz, -v1.xyzx, cb0[53].xyzx  // r0.x <- toEyeWorld.x; r0.y <- toEyeWorld.y; r0.z <- toEyeWorld.z
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.x, r0.x, -cb0[53].w
                div_sat r0.x, r0.x, cb0[54].x  // r0.x <- fogLerp
                
                #line 303 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, v2.xyzx, t0.xyzw, s0  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 386 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r2.xyzw, -r1.xyzw, cb0[55].xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- <ComputeFog return value>.x; r0.y <- <ComputeFog return value>.y; r0.z <- <ComputeFog return value>.z; r0.w <- <ComputeFog return value>.w
                
                #line 305 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r2.x, l(0.000000), cb0[54].x
                
                #line 311
                movc r0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mul o0.w, r0.w, cb1[0].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   o4.x <- <VSPositionNormalTexture return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTexture return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTexture return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTexture return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTexture return value>.tex.x; o3.y <- <VSPositionNormalTexture return value>.tex.y; o3.z <- <VSPositionNormalTexture return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTexture return value>.normalWorld.x; o2.y <- <VSPositionNormalTexture return value>.normalWorld.y; o2.z <- <VSPositionNormalTexture return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTexture return value>.positionWorld.x; o1.y <- <VSPositionNormalTexture return value>.positionWorld.y; o1.z <- <VSPositionNormalTexture return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTexture return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTexture return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTexture return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTexture return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 366
                mov o3.xy, v2.xyxx
                mov o3.z, cb3[0].x
                
                #line 361
                dp4 o4.x, r0.xyzw, cb0[12].xyzw
                dp4 o4.y, r0.xyzw, cb0[13].xyzw
                dp4 o4.z, r0.xyzw, cb0[14].xyzw
                dp4 o4.w, r0.xyzw, cb0[15].xyzw
                
                #line 366
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 438 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v3.xyzx, t0.wxyz, s0  // r0.x <- textureColor.w
                add r0.yzw, -v1.xxyz, cb0[53].xxyz
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.y, r1.x
                mul r0.yzw, r0.yyzw, r1.yyyy  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.y, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.z, v2.xyzx, -cb0[17].yzwy  // r1.z <- diffuseFactor
                lt r1.w, l(0.000000), r1.z
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.zzzz, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.z, cb0[17].yzwy, v2.xyzx
                add r1.z, r1.z, r1.z
                mad r3.xyz, v2.xyzx, -r1.zzzz, cb0[17].yzwy
                dp3 r1.z, r3.xyzx, r3.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.z, r0.yzwy, r3.xyzx  // r1.z <- specFactor
                lt r2.w, l(0.000000), r1.z
                
                #line 165
                max r3.x, cb1[1].y, l(1.000000)
                log r1.z, |r1.z|
                mul r1.z, r1.z, r3.x
                exp r1.z, r1.z  // r1.z <- specFactor
                mul r3.yzw, cb0[16].xxyz, cb1[1].xxxx
                mul r3.yzw, r1.zzzz, r3.yyzw  // r3.y <- specularColor.x; r3.z <- specularColor.y; r3.w <- specularColor.z
                and r3.yzw, r2.wwww, r3.yyzw
                and r2.xyz, r1.wwww, r2.xyzx
                and r3.yzw, r1.wwww, r3.yyzw
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r2.xyz, r3.yzwy, r2.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 346
                and r1.yzw, r1.yyyy, r2.xxyz  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[20].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[19].xxyz, cb0[20].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[20].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[20].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[19].xxyz, cb0[19].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[23].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[22].xxyz, cb0[23].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[23].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[23].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[22].xxyz, cb0[22].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 352
                eq r2.x, cb0[27].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[25].xxyz, cb0[25].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[27].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[30].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[28].xxyz, cb0[28].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[30].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[33].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[31].xxyz, cb0[31].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[33].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[36].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[34].xxyz, cb0[34].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[36].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 367
                eq r2.x, cb0[40].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[37].xxyz, cb0[38].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[37].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[37].xxyz, cb0[37].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[44].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[41].xxyz, cb0[42].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[41].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[41].xxyz, cb0[41].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[48].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[45].xxyz, cb0[46].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[45].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[45].xxyz, cb0[45].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[52].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[49].xxyz, cb0[50].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.y, r0.yzwy, r4.xyzx  // r0.y <- specFactor
                  lt r0.z, l(0.000000), r0.y
                
                #line 165
                  log r0.y, |r0.y|
                  mul r0.y, r0.y, r3.x
                  exp r0.y, r0.y  // r0.y <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.yzw, r0.zzzz, r4.xxyz  // r0.y <- specularColor.x; r0.z <- specularColor.y; r0.w <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.yzwy  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  and r0.yzw, r0.yyzw, r2.zzzz
                  mad r3.xyz, cb0[49].xyzx, cb0[49].wwww, r3.xyzx
                  add r0.yzw, r0.yyzw, r3.xxyz  // r0.y <- <ComputeLight return value>.x; r0.z <- <ComputeLight return value>.y; r0.w <- <ComputeLight return value>.z
                
                #line 272
                  div r0.yzw, r0.yyzw, r2.xxxx  // r0.y <- <ComputeSpotLight return value>.x; r0.z <- <ComputeSpotLight return value>.y; r0.w <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.yzw, r0.yyzw, r2.wwww
                
                #line 369
                  add r1.yzw, r0.yyzw, r1.yyzw
                
                #line 376
                endif 
                
                #line 456 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.y, l(0.000000), cb0[54].x
                
                #line 459
                sqrt r0.z, r1.x  // r0.z <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.z, r0.z, -cb0[53].w
                div_sat r0.z, r0.z, cb0[54].x  // r0.z <- fogLerp
                add r2.xyz, -r1.yzwy, cb0[55].xyzx
                mad r2.xyz, r0.zzzz, r2.xyzx, r1.yzwy  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z
                
                #line 462 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.yyyy, r2.xyzx, r1.yzwy
                
                #line 466
                mov o0.w, r0.x
                ret 
                // Approximately 385 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // localTransform           0   xyzw        3     NONE   float   xyzw
                // localTransform           1   xyzw        4     NONE   float   xyzw
                // localTransform           2   xyzw        5     NONE   float   xyzw
                // localTransform           3   xyzw        6     NONE   float   xyzw
                // textureIndex             0   x           7     NONE   float   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.localTransform._m00; v3.y <- input.localTransform._m01; v3.z <- input.localTransform._m02; v3.w <- input.localTransform._m03; 
                //   v4.x <- input.localTransform._m10; v4.y <- input.localTransform._m11; v4.z <- input.localTransform._m12; v4.w <- input.localTransform._m13; 
                //   v5.x <- input.localTransform._m20; v5.y <- input.localTransform._m21; v5.z <- input.localTransform._m22; v5.w <- input.localTransform._m23; 
                //   v6.x <- input.localTransform._m30; v6.y <- input.localTransform._m31; v6.z <- input.localTransform._m32; v6.w <- input.localTransform._m33; 
                //   v7.x <- input.textureIndex; 
                //   v8.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalTextureI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTextureI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTextureI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTextureI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTextureI return value>.tex.x; o3.y <- <VSPositionNormalTextureI return value>.tex.y; o3.z <- <VSPositionNormalTextureI return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTextureI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureI return value>.positionHomogeneous.w
                //
                #line 372 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v4.xyzw
                mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v6.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                
                #line 381
                mov o3.xy, v2.xyxx
                mov o3.z, v7.x
                
                #line 376
                dp4 o4.x, r0.xyzw, cb0[12].xyzw
                dp4 o4.y, r0.xyzw, cb0[13].xyzw
                dp4 o4.z, r0.xyzw, cb0[14].xyzw
                dp4 o4.w, r0.xyzw, cb0[15].xyzw
                
                #line 381
                ret 
                // Approximately 24 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 438 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v3.xyzx, t0.wxyz, s0  // r0.x <- textureColor.w
                add r0.yzw, -v1.xxyz, cb0[53].xxyz
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.y, r1.x
                mul r0.yzw, r0.yyzw, r1.yyyy  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.y, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.z, v2.xyzx, -cb0[17].yzwy  // r1.z <- diffuseFactor
                lt r1.w, l(0.000000), r1.z
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.zzzz, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.z, cb0[17].yzwy, v2.xyzx
                add r1.z, r1.z, r1.z
                mad r3.xyz, v2.xyzx, -r1.zzzz, cb0[17].yzwy
                dp3 r1.z, r3.xyzx, r3.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.z, r0.yzwy, r3.xyzx  // r1.z <- specFactor
                lt r2.w, l(0.000000), r1.z
                
                #line 165
                max r3.x, cb1[1].y, l(1.000000)
                log r1.z, |r1.z|
                mul r1.z, r1.z, r3.x
                exp r1.z, r1.z  // r1.z <- specFactor
                mul r3.yzw, cb0[16].xxyz, cb1[1].xxxx
                mul r3.yzw, r1.zzzz, r3.yyzw  // r3.y <- specularColor.x; r3.z <- specularColor.y; r3.w <- specularColor.z
                and r3.yzw, r2.wwww, r3.yyzw
                and r2.xyz, r1.wwww, r2.xyzx
                and r3.yzw, r1.wwww, r3.yyzw
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r2.xyz, r3.yzwy, r2.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 346
                and r1.yzw, r1.yyyy, r2.xxyz  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[20].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[19].xxyz, cb0[20].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[20].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[20].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[19].xxyz, cb0[19].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[23].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[22].xxyz, cb0[23].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[23].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[23].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[22].xxyz, cb0[22].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 352
                eq r2.x, cb0[27].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[25].xxyz, cb0[25].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[27].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[30].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[28].xxyz, cb0[28].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[30].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[33].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[31].xxyz, cb0[31].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[33].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[36].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[34].xxyz, cb0[34].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[36].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 367
                eq r2.x, cb0[40].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[37].xxyz, cb0[38].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[37].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[37].xxyz, cb0[37].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[44].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[41].xxyz, cb0[42].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[41].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[41].xxyz, cb0[41].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[48].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[45].xxyz, cb0[46].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[45].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[45].xxyz, cb0[45].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[52].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[49].xxyz, cb0[50].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.y, r0.yzwy, r4.xyzx  // r0.y <- specFactor
                  lt r0.z, l(0.000000), r0.y
                
                #line 165
                  log r0.y, |r0.y|
                  mul r0.y, r0.y, r3.x
                  exp r0.y, r0.y  // r0.y <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.yzw, r0.zzzz, r4.xxyz  // r0.y <- specularColor.x; r0.z <- specularColor.y; r0.w <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.yzwy  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  and r0.yzw, r0.yyzw, r2.zzzz
                  mad r3.xyz, cb0[49].xyzx, cb0[49].wwww, r3.xyzx
                  add r0.yzw, r0.yyzw, r3.xxyz  // r0.y <- <ComputeLight return value>.x; r0.z <- <ComputeLight return value>.y; r0.w <- <ComputeLight return value>.z
                
                #line 272
                  div r0.yzw, r0.yyzw, r2.xxxx  // r0.y <- <ComputeSpotLight return value>.x; r0.z <- <ComputeSpotLight return value>.y; r0.w <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.yzw, r0.yyzw, r2.wwww
                
                #line 369
                  add r1.yzw, r0.yyzw, r1.yyzw
                
                #line 376
                endif 
                
                #line 456 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.y, l(0.000000), cb0[54].x
                
                #line 459
                sqrt r0.z, r1.x  // r0.z <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.z, r0.z, -cb0[53].w
                div_sat r0.z, r0.z, cb0[54].x  // r0.z <- fogLerp
                add r2.xyz, -r1.yzwy, cb0[55].xyzx
                mad r2.xyz, r0.zzzz, r2.xyzx, r1.yzwy  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z
                
                #line 462 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.yyyy, r2.xyzx, r1.yzwy
                
                #line 466
                mov o0.w, r0.x
                ret 
                // Approximately 385 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   o4.x <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTextureSkinned return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTextureSkinned return value>.tex.x; o3.y <- <VSPositionNormalTextureSkinned return value>.tex.y; o3.z <- <VSPositionNormalTextureSkinned return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTextureSkinned return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureSkinned return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureSkinned return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureSkinned return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureSkinned return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureSkinned return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 392
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 399
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- normalLocal.x; r2.y <- normalLocal.y; r2.z <- normalLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r2.w, r3.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r3.x + 0].x
                  ineg r3.z, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r3.z, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r3.y, r3.z, r3.y
                  ishl r3.y, r3.y, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r3.y + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r3.y + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r3.y + 2].xyzw
                  mad r1.xyz, r2.wwww, r4.xyzx, r1.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r3.y + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r3.y + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r3.y + 2].xyzx
                  mad r2.xyz, r2.wwww, r4.xyzx, r2.xyzx
                endloop 
                
                #line 399 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                dp4 o4.x, r1.xyzw, cb0[12].xyzw
                dp4 o4.y, r1.xyzw, cb0[13].xyzw
                dp4 o4.z, r1.xyzw, cb0[14].xyzw
                dp4 o4.w, r1.xyzw, cb0[15].xyzw
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 406
                mov o3.xy, v2.xyxx
                mov o3.z, cb3[0].x
                ret 
                // Approximately 57 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 438 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v3.xyzx, t0.wxyz, s0  // r0.x <- textureColor.w
                add r0.yzw, -v1.xxyz, cb0[53].xxyz
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.y, r1.x
                mul r0.yzw, r0.yyzw, r1.yyyy  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.y, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.z, v2.xyzx, -cb0[17].yzwy  // r1.z <- diffuseFactor
                lt r1.w, l(0.000000), r1.z
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.zzzz, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.z, cb0[17].yzwy, v2.xyzx
                add r1.z, r1.z, r1.z
                mad r3.xyz, v2.xyzx, -r1.zzzz, cb0[17].yzwy
                dp3 r1.z, r3.xyzx, r3.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.z, r0.yzwy, r3.xyzx  // r1.z <- specFactor
                lt r2.w, l(0.000000), r1.z
                
                #line 165
                max r3.x, cb1[1].y, l(1.000000)
                log r1.z, |r1.z|
                mul r1.z, r1.z, r3.x
                exp r1.z, r1.z  // r1.z <- specFactor
                mul r3.yzw, cb0[16].xxyz, cb1[1].xxxx
                mul r3.yzw, r1.zzzz, r3.yyzw  // r3.y <- specularColor.x; r3.z <- specularColor.y; r3.w <- specularColor.z
                and r3.yzw, r2.wwww, r3.yyzw
                and r2.xyz, r1.wwww, r2.xyzx
                and r3.yzw, r1.wwww, r3.yyzw
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r2.xyz, r3.yzwy, r2.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 346
                and r1.yzw, r1.yyyy, r2.xxyz  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[20].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[19].xxyz, cb0[20].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[20].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[20].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[19].xxyz, cb0[19].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[23].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[22].xxyz, cb0[23].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[23].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[23].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[22].xxyz, cb0[22].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 352
                eq r2.x, cb0[27].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[25].xxyz, cb0[25].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[27].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[30].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[28].xxyz, cb0[28].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[30].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[33].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[31].xxyz, cb0[31].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[33].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[36].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[34].xxyz, cb0[34].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[36].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 367
                eq r2.x, cb0[40].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[37].xxyz, cb0[38].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[37].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[37].xxyz, cb0[37].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[44].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[41].xxyz, cb0[42].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[41].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[41].xxyz, cb0[41].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[48].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[45].xxyz, cb0[46].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[45].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[45].xxyz, cb0[45].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[52].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[49].xxyz, cb0[50].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.y, r0.yzwy, r4.xyzx  // r0.y <- specFactor
                  lt r0.z, l(0.000000), r0.y
                
                #line 165
                  log r0.y, |r0.y|
                  mul r0.y, r0.y, r3.x
                  exp r0.y, r0.y  // r0.y <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.yzw, r0.zzzz, r4.xxyz  // r0.y <- specularColor.x; r0.z <- specularColor.y; r0.w <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.yzwy  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  and r0.yzw, r0.yyzw, r2.zzzz
                  mad r3.xyz, cb0[49].xyzx, cb0[49].wwww, r3.xyzx
                  add r0.yzw, r0.yyzw, r3.xxyz  // r0.y <- <ComputeLight return value>.x; r0.z <- <ComputeLight return value>.y; r0.w <- <ComputeLight return value>.z
                
                #line 272
                  div r0.yzw, r0.yyzw, r2.xxxx  // r0.y <- <ComputeSpotLight return value>.x; r0.z <- <ComputeSpotLight return value>.y; r0.w <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.yzw, r0.yyzw, r2.wwww
                
                #line 369
                  add r1.yzw, r0.yyzw, r1.yyzw
                
                #line 376
                endif 
                
                #line 456 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.y, l(0.000000), cb0[54].x
                
                #line 459
                sqrt r0.z, r1.x  // r0.z <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.z, r0.z, -cb0[53].w
                div_sat r0.z, r0.z, cb0[54].x  // r0.z <- fogLerp
                add r2.xyz, -r1.yzwy, cb0[55].xyzx
                mad r2.xyz, r0.zzzz, r2.xyzx, r1.yzwy  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z
                
                #line 462 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.yyyy, r2.xyzx, r1.yzwy
                
                #line 466
                mov o0.w, r0.x
                ret 
                // Approximately 385 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WEIGHTS                  0   xyz         3     NONE   float   xyz 
                // BONEINDICES              0   xyzw        4     NONE    uint   xyzw
                // localTransform           0   xyzw        5     NONE   float   xyzw
                // localTransform           1   xyzw        6     NONE   float   xyzw
                // localTransform           2   xyzw        7     NONE   float   xyzw
                // localTransform           3   xyzw        8     NONE   float   xyzw
                // textureIndex             0   x           9     NONE   float   x   
                // SV_InstanceID            0   x          10   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_input v9.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_output o4.xyzw
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tex.x; v2.y <- input.tex.y; 
                //   v3.x <- input.weights.x; v3.y <- input.weights.y; v3.z <- input.weights.z; 
                //   v4.x <- input.boneIndices.x; v4.y <- input.boneIndices.y; v4.z <- input.boneIndices.z; v4.w <- input.boneIndices.w; 
                //   v5.x <- input.localTransform._m00; v5.y <- input.localTransform._m01; v5.z <- input.localTransform._m02; v5.w <- input.localTransform._m03; 
                //   v6.x <- input.localTransform._m10; v6.y <- input.localTransform._m11; v6.z <- input.localTransform._m12; v6.w <- input.localTransform._m13; 
                //   v7.x <- input.localTransform._m20; v7.y <- input.localTransform._m21; v7.z <- input.localTransform._m22; v7.w <- input.localTransform._m23; 
                //   v8.x <- input.localTransform._m30; v8.y <- input.localTransform._m31; v8.z <- input.localTransform._m32; v8.w <- input.localTransform._m33; 
                //   v9.x <- input.textureIndex; 
                //   v10.x <- input.instanceId; 
                //   o4.x <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.x; o4.y <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.y; o4.z <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.z; o4.w <- <VSPositionNormalTextureSkinnedI return value>.shadowHomogeneous.w; 
                //   o3.x <- <VSPositionNormalTextureSkinnedI return value>.tex.x; o3.y <- <VSPositionNormalTextureSkinnedI return value>.tex.y; o3.z <- <VSPositionNormalTextureSkinnedI return value>.textureIndex; 
                //   o2.x <- <VSPositionNormalTextureSkinnedI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureSkinnedI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureSkinnedI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureSkinnedI return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v3.x, l(1.000000)
                add r0.x, r0.x, -v3.y
                add r0.x, r0.x, -v3.z
                
                #line 392
                mov x0[0].x, v3.x
                mov x0[1].x, v3.y
                mov x0[2].x, v3.z
                mov x0[3].x, r0.x
                
                #line 399
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalLocal.x; r1.y <- normalLocal.y; r1.z <- normalLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- positionLocal.x; r2.y <- positionLocal.y; r2.z <- positionLocal.z
                mov r3.x, l(0)  // r3.x <- i
                loop 
                  ige r1.w, r3.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r3.x + 0].x
                  ineg r2.w, r3.x
                  ult r4.xyz, r3.xxxx, l(1, 2, 3, 0)
                  and r5.y, r2.w, r4.y
                  iadd r3.xy, r3.xxxx, l(1, -3, 0, 0)
                  movc r5.z, r4.y, l(0), r3.y
                  ieq r5.w, r4.z, l(0)
                  mov r5.x, r4.x
                  and r4.xyzw, r5.xyzw, v4.xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r4.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r4.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r4.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r2.xyz, r1.wwww, r4.xyzx, r2.xyzx
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r4.xyzx, r1.xyzx
                endloop 
                
                #line 424 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r2.yyyy, v6.xyzw
                mad r0.xyzw, r2.xxxx, v5.xyzw, r0.xyzw
                mad r0.xyzw, r2.zzzz, v7.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v8.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp4 o4.x, r0.xyzw, cb0[12].xyzw
                dp4 o4.y, r0.xyzw, cb0[13].xyzw
                dp4 o4.z, r0.xyzw, cb0[14].xyzw
                dp4 o4.w, r0.xyzw, cb0[15].xyzw
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                
                #line 433
                mov o3.xy, v2.xyxx
                mov o3.z, v9.x
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerAnisotropic                sampler      NA          NA    0        1
                // gTextureArray                     texture  float4     2darray    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // textureIndex             0     z         3     NONE   float     z 
                // TEXCOORD                 1   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.shadowHomogeneous.x; v4.y <- input.shadowHomogeneous.y; v4.z <- input.shadowHomogeneous.z; v4.w <- input.shadowHomogeneous.w; 
                //   v3.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTexture return value>.x; o0.y <- <PSPositionNormalTexture return value>.y; o0.z <- <PSPositionNormalTexture return value>.z; o0.w <- <PSPositionNormalTexture return value>.w
                //
                #line 438 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.x, v3.xyzx, t0.wxyz, s0  // r0.x <- textureColor.w
                add r0.yzw, -v1.xxyz, cb0[53].xxyz
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.y, r1.x
                mul r0.yzw, r0.yyzw, r1.yyyy  // r0.y <- toEye.x; r0.z <- toEye.y; r0.w <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r1.y, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r1.z, v2.xyzx, -cb0[17].yzwy  // r1.z <- diffuseFactor
                lt r1.w, l(0.000000), r1.z
                mul r2.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r2.xyz, r1.zzzz, r2.xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z
                dp3 r1.z, cb0[17].yzwy, v2.xyzx
                add r1.z, r1.z, r1.z
                mad r3.xyz, v2.xyzx, -r1.zzzz, cb0[17].yzwy
                dp3 r1.z, r3.xyzx, r3.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r3.xyzx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                dp3 r1.z, r0.yzwy, r3.xyzx  // r1.z <- specFactor
                lt r2.w, l(0.000000), r1.z
                
                #line 165
                max r3.x, cb1[1].y, l(1.000000)
                log r1.z, |r1.z|
                mul r1.z, r1.z, r3.x
                exp r1.z, r1.z  // r1.z <- specFactor
                mul r3.yzw, cb0[16].xxyz, cb1[1].xxxx
                mul r3.yzw, r1.zzzz, r3.yyzw  // r3.y <- specularColor.x; r3.z <- specularColor.y; r3.w <- specularColor.z
                and r3.yzw, r2.wwww, r3.yyzw
                and r2.xyz, r1.wwww, r2.xyzx
                and r3.yzw, r1.wwww, r3.yyzw
                mad r2.xyz, cb0[16].xyzx, cb0[16].wwww, r2.xyzx
                add r2.xyz, r3.yzwy, r2.xyzx  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 346
                and r1.yzw, r1.yyyy, r2.xxyz  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[20].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[19].xxyz, cb0[20].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[20].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[20].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[19].xxyz, cb0[19].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 337
                eq r2.x, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r2.y, v2.xyzx, -cb0[23].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.yzw, cb0[22].xxyz, cb0[23].xxxx
                mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                dp3 r2.y, cb0[23].yzwy, v2.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[23].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.x
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.yzw, r2.zzzz, r3.yyzw
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.yzw, cb0[22].xxyz, cb0[22].wwww, r3.yyzw
                add r2.yzw, r2.yyzw, r3.yyzw  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 339
                add r2.yzw, r1.yyzw, r2.yyzw  // r2.y <- litColor.x; r2.z <- litColor.y; r2.w <- litColor.z
                
                #line 346
                movc r1.yzw, r2.xxxx, r2.yyzw, r1.yyzw  // r1.y <- litColor.x; r1.z <- litColor.y; r1.w <- litColor.z
                
                #line 352
                eq r2.x, cb0[27].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[26].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[25].xxyz, cb0[25].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[27].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[30].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[29].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[28].xxyz, cb0[28].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[30].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[33].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[32].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[31].xxyz, cb0[31].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[33].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 352
                eq r2.x, cb0[36].y, l(1.000000)
                if_nz r2.x
                
                #line 218
                  add r2.xyz, v1.xyzx, -cb0[35].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r2.xyz, r2.xyzx, r2.wwww
                
                #line 154
                  dp3 r3.y, v2.xyzx, -r2.xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, r2.xyzx, v2.xyzx
                  add r3.y, r3.y, r3.y
                  mad r2.xyz, v2.xyzx, -r3.yyyy, r2.xyzx
                  dp3 r3.y, r2.xyzx, r2.xyzx
                  rsq r3.y, r3.y
                  mul r2.xyz, r2.xyzx, r3.yyyy  // r2.x <- reflectLight.x; r2.y <- reflectLight.y; r2.z <- reflectLight.z
                  dp3 r2.x, r0.yzwy, r2.xyzx  // r2.x <- specFactor
                  lt r2.y, l(0.000000), r2.x
                
                #line 165
                  log r2.x, |r2.x|
                  mul r2.x, r2.x, r3.x
                  exp r2.x, r2.x  // r2.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r2.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r2.xyz, r2.yyyy, r5.xyzx  // r2.x <- specularColor.x; r2.y <- specularColor.y; r2.z <- specularColor.z
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r2.xyz, r2.xyzx, r3.zzzz
                  mad r3.yzw, cb0[34].xxyz, cb0[34].wwww, r4.xxyz
                  add r2.xyz, r2.xyzx, r3.yzwy  // r2.x <- <ComputeLight return value>.x; r2.y <- <ComputeLight return value>.y; r2.z <- <ComputeLight return value>.z
                
                #line 175
                  div r3.y, r2.w, cb0[36].x  // r3.y <- f
                  mad r3.y, -r3.y, r3.y, l(1.000000)  // r3.y <- denom
                  lt r3.z, l(0.000000), r3.y
                  div r2.w, r2.w, r3.y  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r3.z
                
                #line 354
                  mad r1.yzw, r2.xxyz, r2.wwww, r1.yyzw
                
                #line 361
                endif 
                
                #line 367
                eq r2.x, cb0[40].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[38].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[40].y, r2.y, cb0[40].x
                  mad r2.x, r2.x, cb0[40].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[39].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[37].xxyz, cb0[38].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[39].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[39].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[37].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[37].xxyz, cb0[37].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[44].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[42].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[44].y, r2.y, cb0[44].x
                  mad r2.x, r2.x, cb0[44].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[43].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[41].xxyz, cb0[42].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[43].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[43].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[41].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[41].xxyz, cb0[41].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[48].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[46].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[48].y, r2.y, cb0[48].x
                  mad r2.x, r2.x, cb0[48].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[47].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[45].xxyz, cb0[46].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[47].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[47].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r2.y, r0.yzwy, r4.xyzx  // r2.y <- specFactor
                  lt r4.x, l(0.000000), r2.y
                
                #line 165
                  log r2.y, |r2.y|
                  mul r2.y, r2.y, r3.x
                  exp r2.y, r2.y  // r2.y <- specFactor
                  mul r4.yzw, cb0[45].xxyz, cb1[1].xxxx
                  mul r4.yzw, r2.yyyy, r4.yyzw  // r4.y <- specularColor.x; r4.z <- specularColor.y; r4.w <- specularColor.z
                  and r4.xyz, r4.yzwy, r4.xxxx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r3.yzw, r2.zzzz, r3.yyzw
                  and r4.xyz, r2.zzzz, r4.xyzx
                  mad r3.yzw, cb0[45].xxyz, cb0[45].wwww, r3.yyzw
                  add r3.yzw, r4.xxyz, r3.yyzw  // r3.y <- <ComputeLight return value>.x; r3.z <- <ComputeLight return value>.y; r3.w <- <ComputeLight return value>.z
                
                #line 272
                  div r2.xyz, r3.yzwy, r2.xxxx  // r2.x <- <ComputeSpotLight return value>.x; r2.y <- <ComputeSpotLight return value>.y; r2.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r2.xyz, r2.xyzx, r2.wwww
                
                #line 369
                  add r1.yzw, r1.yyzw, r2.xxyz
                
                #line 376
                endif 
                
                #line 367
                eq r2.x, cb0[52].w, l(1.000000)
                if_nz r2.x
                
                #line 246
                  add r2.xyz, v1.xyzx, -cb0[50].yzwy  // r2.x <- lightDirection.x; r2.y <- lightDirection.y; r2.z <- lightDirection.z
                  dp3 r2.w, r2.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.y, r2.x  // r2.y <- distance
                
                #line 254
                  mad r2.y, cb0[52].y, r2.y, cb0[52].x
                  mad r2.x, r2.x, cb0[52].z, r2.y  // r2.x <- attenuation
                
                #line 259
                  max r2.x, r2.x, l(1.000000)
                
                #line 154
                  dp3 r2.y, v2.xyzx, -cb0[51].xyzx  // r2.y <- diffuseFactor
                  lt r2.z, l(0.000000), r2.y
                  mul r3.yzw, cb0[49].xxyz, cb0[50].xxxx
                  mul r3.yzw, r2.yyyy, r3.yyzw  // r3.y <- diffuseColor.x; r3.z <- diffuseColor.y; r3.w <- diffuseColor.z
                  dp3 r2.y, cb0[51].xyzx, v2.xyzx
                  add r2.y, r2.y, r2.y
                  mad r4.xyz, v2.xyzx, -r2.yyyy, cb0[51].xyzx
                  dp3 r2.y, r4.xyzx, r4.xyzx
                  rsq r2.y, r2.y
                  mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                  dp3 r0.y, r0.yzwy, r4.xyzx  // r0.y <- specFactor
                  lt r0.z, l(0.000000), r0.y
                
                #line 165
                  log r0.y, |r0.y|
                  mul r0.y, r0.y, r3.x
                  exp r0.y, r0.y  // r0.y <- specFactor
                  mul r4.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r4.xyz, r0.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                  and r0.yzw, r0.zzzz, r4.xxyz  // r0.y <- specularColor.x; r0.z <- specularColor.y; r0.w <- specularColor.z
                  and r3.xyz, r2.zzzz, r3.yzwy  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                  and r0.yzw, r0.yyzw, r2.zzzz
                  mad r3.xyz, cb0[49].xyzx, cb0[49].wwww, r3.xyzx
                  add r0.yzw, r0.yyzw, r3.xxyz  // r0.y <- <ComputeLight return value>.x; r0.z <- <ComputeLight return value>.y; r0.w <- <ComputeLight return value>.z
                
                #line 272
                  div r0.yzw, r0.yyzw, r2.xxxx  // r0.y <- <ComputeSpotLight return value>.x; r0.z <- <ComputeSpotLight return value>.y; r0.w <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.yzw, r0.yyzw, r2.wwww
                
                #line 369
                  add r1.yzw, r0.yyzw, r1.yyzw
                
                #line 376
                endif 
                
                #line 456 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.y, l(0.000000), cb0[54].x
                
                #line 459
                sqrt r0.z, r1.x  // r0.z <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.z, r0.z, -cb0[53].w
                div_sat r0.z, r0.z, cb0[54].x  // r0.z <- fogLerp
                add r2.xyz, -r1.yzwy, cb0[55].xyzx
                mad r2.xyz, r0.zzzz, r2.xyzx, r1.yzwy  // r2.x <- <ComputeFog return value>.x; r2.y <- <ComputeFog return value>.y; r2.z <- <ComputeFog return value>.z
                
                #line 462 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.yyyy, r2.xyzx, r1.yzwy
                
                #line 466
                mov o0.w, r0.x
                ret 
                // Approximately 385 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureTangent
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   o5.x <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangent return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangent return value>.tex.x; o4.y <- <VSPositionNormalTextureTangent return value>.tex.y; o4.z <- <VSPositionNormalTextureTangent return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangent return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangent return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangent return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangent return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangent return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangent return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangent return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangent return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangent return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangent return value>.positionHomogeneous.w
                //
                #line 476 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                dp3 o3.x, v2.xyzx, cb0[0].xyzx
                dp3 o3.y, v2.xyzx, cb0[1].xyzx
                dp3 o3.z, v2.xyzx, cb0[2].xyzx
                
                #line 484
                mov o4.xy, v3.xyxx
                mov o4.z, cb3[0].x
                
                #line 478
                dp4 o5.x, r0.xyzw, cb0[12].xyzw
                dp4 o5.y, r0.xyzw, cb0[13].xyzw
                dp4 o5.z, r0.xyzw, cb0[14].xyzw
                dp4 o5.w, r0.xyzw, cb0[15].xyzw
                
                #line 484
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 565 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 126 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 130
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 135
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 568 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.w, v4.xyzx, t0.xyzw, s1  // r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r2.y, r0.xyzx, -cb0[17].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.y, cb0[17].yzwy, r0.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, r0.xyzx, -r2.yyyy, cb0[17].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r1.xyzx, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                max r3.w, cb1[1].y, l(1.000000)
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.w
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.xyz, r2.zzzz, r3.xyzx
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.xyz, cb0[16].xyzx, cb0[16].wwww, r3.xyzx
                add r2.yzw, r2.yyzw, r3.xxyz  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 346
                and r2.xyz, r2.yzwy, r2.xxxx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[20].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[20].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[20].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[19].xyzx, cb0[19].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[23].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[23].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[23].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[22].xyzx, cb0[22].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 352
                eq r2.w, cb0[27].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[25].xyzx, cb0[25].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[27].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[30].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[28].xyzx, cb0[28].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[30].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[33].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[31].xyzx, cb0[31].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[33].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[36].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[34].xyzx, cb0[34].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[36].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r2.w, cb0[40].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[38].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[40].y, r3.y, cb0[40].x
                  mad r3.x, r3.x, cb0[40].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[39].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[39].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[39].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[37].xyzx, cb0[37].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[44].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[42].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[44].y, r3.y, cb0[44].x
                  mad r3.x, r3.x, cb0[44].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[43].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[43].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[43].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[41].xyzx, cb0[41].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[48].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[46].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[48].y, r3.y, cb0[48].x
                  mad r3.x, r3.x, cb0[48].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[47].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[47].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[47].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[45].xyzx, cb0[45].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[52].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[50].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[52].y, r3.y, cb0[52].x
                  mad r3.x, r3.x, cb0[52].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[51].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[51].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r0.xyz, r0.xyzx, -r3.yyyy, cb0[51].xyzx
                  dp3 r3.y, r0.xyzx, r0.xyzx
                  rsq r3.y, r3.y
                  mul r0.xyz, r0.xyzx, r3.yyyy  // r0.x <- reflectLight.x; r0.y <- reflectLight.y; r0.z <- reflectLight.z
                  dp3 r0.x, r1.xyzx, r0.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r3.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r1.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r1.xyz, r0.xxxx, r1.xyzx  // r1.x <- specularColor.x; r1.y <- specularColor.y; r1.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r1.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r1.xyz, r3.zzzz, r4.xyzx  // r1.x <- diffuseColor.x; r1.y <- diffuseColor.y; r1.z <- diffuseColor.z
                  and r0.xyz, r0.xyzx, r3.zzzz
                  mad r1.xyz, cb0[49].xyzx, cb0[49].wwww, r1.xyzx
                  add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r3.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r2.wwww
                
                #line 369
                  add r2.xyz, r0.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 589
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r1.xyz, -r2.xyzx, cb0[55].xyzx
                mad r1.xyz, r0.yyyy, r1.xyzx, r2.xyzx  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z
                
                #line 592 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r1.xyzx, r2.xyzx
                
                #line 596
                mov o0.w, r0.w
                ret 
                // Approximately 400 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureTangentI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // localTransform           0   xyzw        4     NONE   float   xyzw
                // localTransform           1   xyzw        5     NONE   float   xyzw
                // localTransform           2   xyzw        6     NONE   float   xyzw
                // localTransform           3   xyzw        7     NONE   float   xyzw
                // textureIndex             0   x           8     NONE   float   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.localTransform._m00; v4.y <- input.localTransform._m01; v4.z <- input.localTransform._m02; v4.w <- input.localTransform._m03; 
                //   v5.x <- input.localTransform._m10; v5.y <- input.localTransform._m11; v5.z <- input.localTransform._m12; v5.w <- input.localTransform._m13; 
                //   v6.x <- input.localTransform._m20; v6.y <- input.localTransform._m21; v6.z <- input.localTransform._m22; v6.w <- input.localTransform._m23; 
                //   v7.x <- input.localTransform._m30; v7.y <- input.localTransform._m31; v7.z <- input.localTransform._m32; v7.w <- input.localTransform._m33; 
                //   v8.x <- input.textureIndex; 
                //   v9.x <- input.instanceId; 
                //   o5.x <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangentI return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangentI return value>.tex.x; o4.y <- <VSPositionNormalTextureTangentI return value>.tex.y; o4.z <- <VSPositionNormalTextureTangentI return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangentI return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangentI return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangentI return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangentI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangentI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangentI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangentI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangentI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangentI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangentI return value>.positionHomogeneous.w
                //
                #line 490 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, v0.yyyy, v5.xyzw
                mad r0.xyzw, v0.xxxx, v4.xyzw, r0.xyzw
                mad r0.xyzw, v0.zzzz, v6.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v7.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp3 r1.x, v1.xyzx, cb0[4].xyzx
                dp3 r1.y, v1.xyzx, cb0[5].xyzx
                dp3 r1.z, v1.xyzx, cb0[6].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul o2.xyz, r1.wwww, r1.xyzx
                dp3 o3.x, v2.xyzx, cb0[0].xyzx
                dp3 o3.y, v2.xyzx, cb0[1].xyzx
                dp3 o3.z, v2.xyzx, cb0[2].xyzx
                
                #line 500
                mov o4.xy, v3.xyxx
                mov o4.z, v8.x
                
                #line 494
                dp4 o5.x, r0.xyzw, cb0[12].xyzw
                dp4 o5.y, r0.xyzw, cb0[13].xyzw
                dp4 o5.z, r0.xyzw, cb0[14].xyzw
                dp4 o5.w, r0.xyzw, cb0[15].xyzw
                
                #line 500
                ret 
                // Approximately 27 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 565 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 126 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 130
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 135
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 568 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.w, v4.xyzx, t0.xyzw, s1  // r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r2.y, r0.xyzx, -cb0[17].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.y, cb0[17].yzwy, r0.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, r0.xyzx, -r2.yyyy, cb0[17].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r1.xyzx, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                max r3.w, cb1[1].y, l(1.000000)
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.w
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.xyz, r2.zzzz, r3.xyzx
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.xyz, cb0[16].xyzx, cb0[16].wwww, r3.xyzx
                add r2.yzw, r2.yyzw, r3.xxyz  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 346
                and r2.xyz, r2.yzwy, r2.xxxx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[20].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[20].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[20].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[19].xyzx, cb0[19].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[23].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[23].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[23].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[22].xyzx, cb0[22].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 352
                eq r2.w, cb0[27].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[25].xyzx, cb0[25].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[27].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[30].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[28].xyzx, cb0[28].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[30].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[33].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[31].xyzx, cb0[31].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[33].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[36].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[34].xyzx, cb0[34].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[36].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r2.w, cb0[40].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[38].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[40].y, r3.y, cb0[40].x
                  mad r3.x, r3.x, cb0[40].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[39].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[39].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[39].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[37].xyzx, cb0[37].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[44].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[42].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[44].y, r3.y, cb0[44].x
                  mad r3.x, r3.x, cb0[44].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[43].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[43].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[43].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[41].xyzx, cb0[41].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[48].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[46].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[48].y, r3.y, cb0[48].x
                  mad r3.x, r3.x, cb0[48].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[47].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[47].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[47].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[45].xyzx, cb0[45].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[52].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[50].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[52].y, r3.y, cb0[52].x
                  mad r3.x, r3.x, cb0[52].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[51].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[51].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r0.xyz, r0.xyzx, -r3.yyyy, cb0[51].xyzx
                  dp3 r3.y, r0.xyzx, r0.xyzx
                  rsq r3.y, r3.y
                  mul r0.xyz, r0.xyzx, r3.yyyy  // r0.x <- reflectLight.x; r0.y <- reflectLight.y; r0.z <- reflectLight.z
                  dp3 r0.x, r1.xyzx, r0.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r3.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r1.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r1.xyz, r0.xxxx, r1.xyzx  // r1.x <- specularColor.x; r1.y <- specularColor.y; r1.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r1.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r1.xyz, r3.zzzz, r4.xyzx  // r1.x <- diffuseColor.x; r1.y <- diffuseColor.y; r1.z <- diffuseColor.z
                  and r0.xyz, r0.xyzx, r3.zzzz
                  mad r1.xyz, cb0[49].xyzx, cb0[49].wwww, r1.xyzx
                  add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r3.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r2.wwww
                
                #line 369
                  add r2.xyz, r0.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 589
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r1.xyz, -r2.xyzx, cb0[55].xyzx
                mad r1.xyz, r0.yyyy, r1.xyzx, r2.xyzx  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z
                
                #line 592 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r1.xyzx, r2.xyzx
                
                #line 596
                mov o0.w, r0.w
                ret 
                // Approximately 400 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureTangentSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                // cbuffer cbPerInstance
                // {
                //
                //   float gTextureIndex;               // Offset:    0 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                // cbPerInstance                     cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.weights.x; v4.y <- input.weights.y; v4.z <- input.weights.z; 
                //   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
                //   o5.x <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangentSkinned return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangentSkinned return value>.tex.x; o4.y <- <VSPositionNormalTextureTangentSkinned return value>.tex.y; o4.z <- <VSPositionNormalTextureTangentSkinned return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangentSkinned return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangentSkinned return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangentSkinned return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangentSkinned return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangentSkinned return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangentSkinned return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangentSkinned return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangentSkinned return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangentSkinned return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangentSkinned return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                
                #line 419
                mov x0[0].x, v4.x
                mov x0[1].x, v4.y
                mov x0[2].x, v4.z
                mov x0[3].x, r0.x
                
                #line 427
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- positionLocal.x; r1.y <- positionLocal.y; r1.z <- positionLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- normalLocal.x; r2.y <- normalLocal.y; r2.z <- normalLocal.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- tangentLocal.x; r3.y <- tangentLocal.y; r3.z <- tangentLocal.z
                mov r4.x, l(0)  // r4.x <- i
                loop 
                  ige r2.w, r4.x, l(4)
                  breakc_nz r2.w
                  mov r2.w, x0[r4.x + 0].x
                  ineg r3.w, r4.x
                  ult r5.xyz, r4.xxxx, l(1, 2, 3, 0)
                  and r6.y, r3.w, r5.y
                
                #line 430
                  iadd r4.xy, r4.xxxx, l(1, -3, 0, 0)
                
                #line 427
                  movc r6.z, r5.y, l(0), r4.y
                  ieq r6.w, r5.z, l(0)
                  mov r6.x, r5.x
                  and r5.xyzw, r6.xyzw, v5.xyzw
                  or r4.yz, r5.yywy, r5.xxzx
                  or r3.w, r4.z, r4.y
                  ishl r3.w, r3.w, l(2)
                  dp4 r5.x, r0.xyzw, cb2[r3.w + 0].xyzw
                  dp4 r5.y, r0.xyzw, cb2[r3.w + 1].xyzw
                  dp4 r5.z, r0.xyzw, cb2[r3.w + 2].xyzw
                  mad r1.xyz, r2.wwww, r5.xyzx, r1.xyzx
                  dp3 r5.x, v1.xyzx, cb2[r3.w + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb2[r3.w + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb2[r3.w + 2].xyzx
                  mad r2.xyz, r2.wwww, r5.xyzx, r2.xyzx
                  dp3 r5.x, v2.xyzx, cb2[r3.w + 0].xyzx
                  dp3 r5.y, v2.xyzx, cb2[r3.w + 1].xyzx
                  dp3 r5.z, v2.xyzx, cb2[r3.w + 2].xyzx
                  mad r3.xyz, r2.wwww, r5.xyzx, r3.xyzx
                endloop 
                
                #line 521 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mov r1.w, l(1.000000)
                dp4 o0.x, r1.xyzw, cb0[8].xyzw
                dp4 o0.y, r1.xyzw, cb0[9].xyzw
                dp4 o0.z, r1.xyzw, cb0[10].xyzw
                dp4 o0.w, r1.xyzw, cb0[11].xyzw
                dp4 o1.x, r1.xyzw, cb0[0].xyzw
                dp4 o1.y, r1.xyzw, cb0[1].xyzw
                dp4 o1.z, r1.xyzw, cb0[2].xyzw
                dp4 o5.x, r1.xyzw, cb0[12].xyzw
                dp4 o5.y, r1.xyzw, cb0[13].xyzw
                dp4 o5.z, r1.xyzw, cb0[14].xyzw
                dp4 o5.w, r1.xyzw, cb0[15].xyzw
                dp3 r0.x, r2.xyzx, cb0[4].xyzx
                dp3 r0.y, r2.xyzx, cb0[5].xyzx
                dp3 r0.z, r2.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                dp3 o3.x, r3.xyzx, cb0[0].xyzx
                dp3 o3.y, r3.xyzx, cb0[1].xyzx
                dp3 o3.z, r3.xyzx, cb0[2].xyzx
                
                #line 529
                mov o4.xy, v3.xyxx
                mov o4.z, cb3[0].x
                ret 
                // Approximately 65 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 565 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 126 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 130
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 135
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 568 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.w, v4.xyzx, t0.xyzw, s1  // r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r2.y, r0.xyzx, -cb0[17].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.y, cb0[17].yzwy, r0.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, r0.xyzx, -r2.yyyy, cb0[17].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r1.xyzx, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                max r3.w, cb1[1].y, l(1.000000)
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.w
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.xyz, r2.zzzz, r3.xyzx
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.xyz, cb0[16].xyzx, cb0[16].wwww, r3.xyzx
                add r2.yzw, r2.yyzw, r3.xxyz  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 346
                and r2.xyz, r2.yzwy, r2.xxxx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[20].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[20].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[20].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[19].xyzx, cb0[19].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[23].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[23].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[23].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[22].xyzx, cb0[22].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 352
                eq r2.w, cb0[27].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[25].xyzx, cb0[25].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[27].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[30].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[28].xyzx, cb0[28].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[30].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[33].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[31].xyzx, cb0[31].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[33].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[36].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[34].xyzx, cb0[34].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[36].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r2.w, cb0[40].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[38].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[40].y, r3.y, cb0[40].x
                  mad r3.x, r3.x, cb0[40].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[39].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[39].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[39].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[37].xyzx, cb0[37].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[44].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[42].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[44].y, r3.y, cb0[44].x
                  mad r3.x, r3.x, cb0[44].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[43].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[43].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[43].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[41].xyzx, cb0[41].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[48].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[46].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[48].y, r3.y, cb0[48].x
                  mad r3.x, r3.x, cb0[48].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[47].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[47].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[47].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[45].xyzx, cb0[45].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[52].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[50].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[52].y, r3.y, cb0[52].x
                  mad r3.x, r3.x, cb0[52].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[51].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[51].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r0.xyz, r0.xyzx, -r3.yyyy, cb0[51].xyzx
                  dp3 r3.y, r0.xyzx, r0.xyzx
                  rsq r3.y, r3.y
                  mul r0.xyz, r0.xyzx, r3.yyyy  // r0.x <- reflectLight.x; r0.y <- reflectLight.y; r0.z <- reflectLight.z
                  dp3 r0.x, r1.xyzx, r0.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r3.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r1.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r1.xyz, r0.xxxx, r1.xyzx  // r1.x <- specularColor.x; r1.y <- specularColor.y; r1.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r1.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r1.xyz, r3.zzzz, r4.xyzx  // r1.x <- diffuseColor.x; r1.y <- diffuseColor.y; r1.z <- diffuseColor.z
                  and r0.xyz, r0.xyzx, r3.zzzz
                  mad r1.xyz, cb0[49].xyzx, cb0[49].wwww, r1.xyzx
                  add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r3.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r2.wwww
                
                #line 369
                  add r2.xyz, r0.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 589
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r1.xyz, -r2.xyzx, cb0[55].xyzx
                mad r1.xyz, r0.yyyy, r1.xyzx, r2.xyzx  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z
                
                #line 592 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r1.xyzx, r2.xyzx
                
                #line 596
                mov o0.w, r0.w
                ret 
                // Approximately 400 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

    technique11 PositionNormalTextureTangentSkinnedI
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256 [unused]
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  860 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  864 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  880 Size:    16 [unused]
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                // localTransform           0   xyzw        6     NONE   float   xyzw
                // localTransform           1   xyzw        7     NONE   float   xyzw
                // localTransform           2   xyzw        8     NONE   float   xyzw
                // localTransform           3   xyzw        9     NONE   float   xyzw
                // textureIndex             0   x          10     NONE   float   x   
                // SV_InstanceID            0   x          11   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xyzw
                dcl_input v8.xyzw
                dcl_input v9.xyzw
                dcl_input v10.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.z
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   x0 <- weights; 
                //   v0.x <- input.positionLocal.x; v0.y <- input.positionLocal.y; v0.z <- input.positionLocal.z; 
                //   v1.x <- input.normalLocal.x; v1.y <- input.normalLocal.y; v1.z <- input.normalLocal.z; 
                //   v2.x <- input.tangentLocal.x; v2.y <- input.tangentLocal.y; v2.z <- input.tangentLocal.z; 
                //   v3.x <- input.tex.x; v3.y <- input.tex.y; 
                //   v4.x <- input.weights.x; v4.y <- input.weights.y; v4.z <- input.weights.z; 
                //   v5.x <- input.boneIndices.x; v5.y <- input.boneIndices.y; v5.z <- input.boneIndices.z; v5.w <- input.boneIndices.w; 
                //   v6.x <- input.localTransform._m00; v6.y <- input.localTransform._m01; v6.z <- input.localTransform._m02; v6.w <- input.localTransform._m03; 
                //   v7.x <- input.localTransform._m10; v7.y <- input.localTransform._m11; v7.z <- input.localTransform._m12; v7.w <- input.localTransform._m13; 
                //   v8.x <- input.localTransform._m20; v8.y <- input.localTransform._m21; v8.z <- input.localTransform._m22; v8.w <- input.localTransform._m23; 
                //   v9.x <- input.localTransform._m30; v9.y <- input.localTransform._m31; v9.z <- input.localTransform._m32; v9.w <- input.localTransform._m33; 
                //   v10.x <- input.textureIndex; 
                //   v11.x <- input.instanceId; 
                //   o5.x <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.x; o5.y <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.y; o5.z <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.z; o5.w <- <VSPositionNormalTextureTangentSkinnedI return value>.shadowHomogeneous.w; 
                //   o4.x <- <VSPositionNormalTextureTangentSkinnedI return value>.tex.x; o4.y <- <VSPositionNormalTextureTangentSkinnedI return value>.tex.y; o4.z <- <VSPositionNormalTextureTangentSkinnedI return value>.textureIndex; 
                //   o3.x <- <VSPositionNormalTextureTangentSkinnedI return value>.tangentWorld.x; o3.y <- <VSPositionNormalTextureTangentSkinnedI return value>.tangentWorld.y; o3.z <- <VSPositionNormalTextureTangentSkinnedI return value>.tangentWorld.z; 
                //   o2.x <- <VSPositionNormalTextureTangentSkinnedI return value>.normalWorld.x; o2.y <- <VSPositionNormalTextureTangentSkinnedI return value>.normalWorld.y; o2.z <- <VSPositionNormalTextureTangentSkinnedI return value>.normalWorld.z; 
                //   o1.x <- <VSPositionNormalTextureTangentSkinnedI return value>.positionWorld.x; o1.y <- <VSPositionNormalTextureTangentSkinnedI return value>.positionWorld.y; o1.z <- <VSPositionNormalTextureTangentSkinnedI return value>.positionWorld.z; 
                //   o0.x <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.x; o0.y <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.y; o0.z <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.z; o0.w <- <VSPositionNormalTextureTangentSkinnedI return value>.positionHomogeneous.w
                //
                #line 359 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncVertexFormats.fx"
                add r0.x, -v4.x, l(1.000000)
                add r0.x, r0.x, -v4.y
                add r0.x, r0.x, -v4.z
                
                #line 419
                mov x0[0].x, v4.x
                mov x0[1].x, v4.y
                mov x0[2].x, v4.z
                mov x0[3].x, r0.x
                
                #line 427
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalLocal.x; r1.y <- normalLocal.y; r1.z <- normalLocal.z
                mov r2.xyz, l(0,0,0,0)  // r2.x <- tangentLocal.x; r2.y <- tangentLocal.y; r2.z <- tangentLocal.z
                mov r3.xyz, l(0,0,0,0)  // r3.x <- positionLocal.x; r3.y <- positionLocal.y; r3.z <- positionLocal.z
                mov r4.x, l(0)  // r4.x <- i
                loop 
                  ige r1.w, r4.x, l(4)
                  breakc_nz r1.w
                  mov r1.w, x0[r4.x + 0].x
                  ineg r2.w, r4.x
                  ult r5.xyz, r4.xxxx, l(1, 2, 3, 0)
                  and r6.y, r2.w, r5.y
                
                #line 430
                  iadd r4.xy, r4.xxxx, l(1, -3, 0, 0)
                
                #line 427
                  movc r6.z, r5.y, l(0), r4.y
                  ieq r6.w, r5.z, l(0)
                  mov r6.x, r5.x
                  and r5.xyzw, r6.xyzw, v5.xyzw
                  or r4.yz, r5.yywy, r5.xxzx
                  or r2.w, r4.z, r4.y
                  ishl r2.w, r2.w, l(2)
                  dp4 r5.x, r0.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r0.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r0.xyzw, cb2[r2.w + 2].xyzw
                  mad r3.xyz, r1.wwww, r5.xyzx, r3.xyzx
                  dp3 r5.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mad r1.xyz, r1.wwww, r5.xyzx, r1.xyzx
                  dp3 r5.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r5.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r5.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mad r2.xyz, r1.wwww, r5.xyzx, r2.xyzx
                endloop 
                
                #line 550 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                mul r0.xyzw, r3.yyyy, v7.xyzw
                mad r0.xyzw, r3.xxxx, v6.xyzw, r0.xyzw
                mad r0.xyzw, r3.zzzz, v8.xyzw, r0.xyzw
                add r0.xyzw, r0.xyzw, v9.xyzw  // r0.x <- instancePosition.x; r0.y <- instancePosition.y; r0.z <- instancePosition.z; r0.w <- instancePosition.w
                dp4 o0.x, r0.xyzw, cb0[8].xyzw
                dp4 o0.y, r0.xyzw, cb0[9].xyzw
                dp4 o0.z, r0.xyzw, cb0[10].xyzw
                dp4 o0.w, r0.xyzw, cb0[11].xyzw
                dp4 o1.x, r0.xyzw, cb0[0].xyzw
                dp4 o1.y, r0.xyzw, cb0[1].xyzw
                dp4 o1.z, r0.xyzw, cb0[2].xyzw
                dp4 o5.x, r0.xyzw, cb0[12].xyzw
                dp4 o5.y, r0.xyzw, cb0[13].xyzw
                dp4 o5.z, r0.xyzw, cb0[14].xyzw
                dp4 o5.w, r0.xyzw, cb0[15].xyzw
                dp3 r0.x, r1.xyzx, cb0[4].xyzx
                dp3 r0.y, r1.xyzx, cb0[5].xyzx
                dp3 r0.z, r1.xyzx, cb0[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul o2.xyz, r0.wwww, r0.xyzx
                dp3 o3.x, r2.xyzx, cb0[0].xyzx
                dp3 o3.y, r2.xyzx, cb0[1].xyzx
                dp3 o3.z, r2.xyzx, cb0[2].xyzx
                
                #line 560
                mov o4.xy, v3.xyxx
                mov o4.z, v10.x
                ret 
                // Approximately 68 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInverse;            // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProjection;     // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float3 Color;                  // Offset:  256
                //       float Ambient;                 // Offset:  268
                //       float Diffuse;                 // Offset:  272
                //       float3 Direction;              // Offset:  276
                //       float Enabled;                 // Offset:  288
                //
                //   } gDirLights[3];                   // Offset:  256 Size:   132
                //   
                //   struct PointLight
                //   {
                //       
                //       float3 Color;                  // Offset:  400
                //       float Ambient;                 // Offset:  412
                //       float Diffuse;                 // Offset:  416
                //       float3 Position;               // Offset:  420
                //       float Radius;                  // Offset:  432
                //       float Enabled;                 // Offset:  436
                //
                //   } gPointLights[4];                 // Offset:  400 Size:   184
                //   
                //   struct SpotLight
                //   {
                //       
                //       float3 Color;                  // Offset:  592
                //       float Ambient;                 // Offset:  604
                //       float Diffuse;                 // Offset:  608
                //       float3 Position;               // Offset:  612
                //       float3 Direction;              // Offset:  624
                //       float Spot;                    // Offset:  636
                //       float AttenuationConstant;     // Offset:  640
                //       float AttenuationLinear;       // Offset:  644
                //       float AttenuationExp;          // Offset:  648
                //       float Enabled;                 // Offset:  652
                //
                //   } gSpotLights[4];                  // Offset:  592 Size:   256
                //   float3 gEyePositionWorld;          // Offset:  848 Size:    12
                //   float gFogStart;                   // Offset:  860 Size:     4
                //   float gFogRange;                   // Offset:  864 Size:     4
                //   float4 gFogColor;                  // Offset:  880 Size:    16
                //   float gEnableShadows;              // Offset:  896 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float SpecularIntensity;       // Offset:   16
                //       float SpecularPower;           // Offset:   20
                //
                //   } gMaterial;                       // Offset:    0 Size:    24
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // SamplerAnisotropic                sampler      NA          NA    1        1
                // gTextureArray                     texture  float4     2darray    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // textureIndex             0     z         4     NONE   float     z 
                // TEXCOORD                 1   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[56], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v4.z
                dcl_output o0.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.positionHomogeneous.x; v0.y <- input.positionHomogeneous.y; v0.z <- input.positionHomogeneous.z; v0.w <- input.positionHomogeneous.w; 
                //   v1.x <- input.positionWorld.x; v1.y <- input.positionWorld.y; v1.z <- input.positionWorld.z; 
                //   v2.x <- input.normalWorld.x; v2.y <- input.normalWorld.y; v2.z <- input.normalWorld.z; 
                //   v3.x <- input.tangentWorld.x; v3.y <- input.tangentWorld.y; v3.z <- input.tangentWorld.z; 
                //   v4.x <- input.tex.x; v4.y <- input.tex.y; 
                //   v5.x <- input.shadowHomogeneous.x; v5.y <- input.shadowHomogeneous.y; v5.z <- input.shadowHomogeneous.z; v5.w <- input.shadowHomogeneous.w; 
                //   v4.z <- input.textureIndex; 
                //   o0.x <- <PSPositionNormalTextureTangent return value>.x; o0.y <- <PSPositionNormalTextureTangent return value>.y; o0.z <- <PSPositionNormalTextureTangent return value>.z; o0.w <- <PSPositionNormalTextureTangent return value>.w
                //
                #line 565 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t1.xyzw, s0  // r0.x <- normalMapSample.x; r0.y <- normalMapSample.y; r0.z <- normalMapSample.z
                
                #line 126 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)  // r0.x <- normalT.x; r0.y <- normalT.y; r0.z <- normalT.z
                
                #line 130
                dp3 r0.w, v3.xyzx, v2.xyzx
                mad r1.xyz, -r0.wwww, v2.xyzx, v3.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- T.x; r1.y <- T.y; r1.z <- T.z
                mul r2.xyz, r1.yzxy, v2.zxyz
                mad r2.xyz, v2.yzxy, r1.zxyz, -r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z
                
                #line 135
                mul r2.xyz, r0.yyyy, r2.xyzx
                mad r0.xyw, r0.xxxx, r1.xyxz, r2.xyxz
                mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 568 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                sample_indexable(texture2darray)(float,float,float,float) r0.w, v4.xyzx, t0.xyzw, s1  // r0.w <- textureColor.w
                add r1.xyz, -v1.xyzx, cb0[53].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r2.x, r1.w
                mul r1.xyz, r1.xyzx, r2.xxxx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 337 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                eq r2.x, cb0[18].x, l(1.000000)
                
                #line 154
                dp3 r2.y, r0.xyzx, -cb0[17].yzwy  // r2.y <- diffuseFactor
                lt r2.z, l(0.000000), r2.y
                mul r3.xyz, cb0[16].xyzx, cb0[17].xxxx
                mul r3.xyz, r2.yyyy, r3.xyzx  // r3.x <- diffuseColor.x; r3.y <- diffuseColor.y; r3.z <- diffuseColor.z
                dp3 r2.y, cb0[17].yzwy, r0.xyzx
                add r2.y, r2.y, r2.y
                mad r4.xyz, r0.xyzx, -r2.yyyy, cb0[17].yzwy
                dp3 r2.y, r4.xyzx, r4.xyzx
                rsq r2.y, r2.y
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- reflectLight.x; r4.y <- reflectLight.y; r4.z <- reflectLight.z
                dp3 r2.y, r1.xyzx, r4.xyzx  // r2.y <- specFactor
                lt r2.w, l(0.000000), r2.y
                
                #line 165
                max r3.w, cb1[1].y, l(1.000000)
                log r2.y, |r2.y|
                mul r2.y, r2.y, r3.w
                exp r2.y, r2.y  // r2.y <- specFactor
                mul r4.xyz, cb0[16].xyzx, cb1[1].xxxx
                mul r4.xyz, r2.yyyy, r4.xyzx  // r4.x <- specularColor.x; r4.y <- specularColor.y; r4.z <- specularColor.z
                and r4.xyz, r2.wwww, r4.xyzx
                and r3.xyz, r2.zzzz, r3.xyzx
                and r2.yzw, r2.zzzz, r4.xxyz  // r2.y <- specularColor.x; r2.z <- specularColor.y; r2.w <- specularColor.z
                mad r3.xyz, cb0[16].xyzx, cb0[16].wwww, r3.xyzx
                add r2.yzw, r2.yyzw, r3.xxyz  // r2.y <- <ComputeLight return value>.x; r2.z <- <ComputeLight return value>.y; r2.w <- <ComputeLight return value>.z
                
                #line 346
                and r2.xyz, r2.yzwy, r2.xxxx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[21].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[20].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[19].xyzx, cb0[20].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[20].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[20].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[19].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[19].xyzx, cb0[19].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 337
                eq r2.w, cb0[24].x, l(1.000000)
                
                #line 154
                dp3 r3.x, r0.xyzx, -cb0[23].yzwy  // r3.x <- diffuseFactor
                lt r3.y, l(0.000000), r3.x
                mul r4.xyz, cb0[22].xyzx, cb0[23].xxxx
                mul r4.xyz, r3.xxxx, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                dp3 r3.x, cb0[23].yzwy, r0.xyzx
                add r3.x, r3.x, r3.x
                mad r5.xyz, r0.xyzx, -r3.xxxx, cb0[23].yzwy
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                dp3 r3.x, r1.xyzx, r5.xyzx  // r3.x <- specFactor
                lt r3.z, l(0.000000), r3.x
                
                #line 165
                log r3.x, |r3.x|
                mul r3.x, r3.x, r3.w
                exp r3.x, r3.x  // r3.x <- specFactor
                mul r5.xyz, cb0[22].xyzx, cb1[1].xxxx
                mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                and r5.xyz, r3.zzzz, r5.xyzx
                and r4.xyz, r3.yyyy, r4.xyzx
                and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                mad r4.xyz, cb0[22].xyzx, cb0[22].wwww, r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 339
                add r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- litColor.x; r3.y <- litColor.y; r3.z <- litColor.z
                
                #line 346
                movc r2.xyz, r2.wwww, r3.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 352
                eq r2.w, cb0[27].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[26].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[25].xyzx, cb0[26].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[25].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[25].xyzx, cb0[25].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[27].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[26].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[30].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[29].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[28].xyzx, cb0[29].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[28].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[28].xyzx, cb0[28].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[30].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[29].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[33].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[32].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[31].xyzx, cb0[32].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[31].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[31].xyzx, cb0[31].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[33].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[32].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 352
                eq r2.w, cb0[36].y, l(1.000000)
                if_nz r2.w
                
                #line 218
                  add r3.xyz, v1.xyzx, -cb0[35].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  sqrt r2.w, r2.w  // r2.w <- distance
                  div r3.xyz, r3.xyzx, r2.wwww
                
                #line 154
                  dp3 r4.x, r0.xyzx, -r3.xyzx  // r4.x <- diffuseFactor
                  lt r4.y, l(0.000000), r4.x
                  mul r5.xyz, cb0[34].xyzx, cb0[35].xxxx
                  mul r4.xzw, r4.xxxx, r5.xxyz  // r4.x <- diffuseColor.x; r4.z <- diffuseColor.y; r4.w <- diffuseColor.z
                  dp3 r5.x, r3.xyzx, r0.xyzx
                  add r5.x, r5.x, r5.x
                  mad r3.xyz, r0.xyzx, -r5.xxxx, r3.xyzx
                  dp3 r5.x, r3.xyzx, r3.xyzx
                  rsq r5.x, r5.x
                  mul r3.xyz, r3.xyzx, r5.xxxx  // r3.x <- reflectLight.x; r3.y <- reflectLight.y; r3.z <- reflectLight.z
                  dp3 r3.x, r1.xyzx, r3.xyzx  // r3.x <- specFactor
                  lt r3.y, l(0.000000), r3.x
                
                #line 165
                  log r3.x, |r3.x|
                  mul r3.x, r3.x, r3.w
                  exp r3.x, r3.x  // r3.x <- specFactor
                  mul r5.xyz, cb0[34].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.xxxx, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r3.xyz, r3.yyyy, r5.xyzx  // r3.x <- specularColor.x; r3.y <- specularColor.y; r3.z <- specularColor.z
                  and r4.xzw, r4.xxzw, r4.yyyy
                  and r3.xyz, r3.xyzx, r4.yyyy
                  mad r4.xyz, cb0[34].xyzx, cb0[34].wwww, r4.xzwx
                  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- <ComputeLight return value>.x; r3.y <- <ComputeLight return value>.y; r3.z <- <ComputeLight return value>.z
                
                #line 175
                  div r4.x, r2.w, cb0[36].x  // r4.x <- f
                  mad r4.x, -r4.x, r4.x, l(1.000000)  // r4.x <- denom
                  lt r4.y, l(0.000000), r4.x
                  div r2.w, r2.w, r4.x  // r2.w <- d
                  add r2.w, r2.w, l(1.000000)  // r2.w <- dn
                  mul r2.w, r2.w, r2.w
                  div r2.w, cb0[35].x, r2.w  // r2.w <- <CalcSphericAttenuation return value>
                
                #line 187
                  and r2.w, r2.w, r4.y
                
                #line 354
                  mad r2.xyz, r3.xyzx, r2.wwww, r2.xyzx
                
                #line 361
                endif 
                
                #line 367
                eq r2.w, cb0[40].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[38].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[39].xyzx  // r2.w <- spot
                  lt r2.w, cb0[39].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[40].y, r3.y, cb0[40].x
                  mad r3.x, r3.x, cb0[40].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[39].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[37].xyzx, cb0[38].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[39].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[39].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[37].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[37].xyzx, cb0[37].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[44].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[42].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[43].xyzx  // r2.w <- spot
                  lt r2.w, cb0[43].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[44].y, r3.y, cb0[44].x
                  mad r3.x, r3.x, cb0[44].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[43].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[41].xyzx, cb0[42].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[43].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[43].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[41].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[41].xyzx, cb0[41].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[48].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[46].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[47].xyzx  // r2.w <- spot
                  lt r2.w, cb0[47].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[48].y, r3.y, cb0[48].x
                  mad r3.x, r3.x, cb0[48].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[47].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[45].xyzx, cb0[46].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[47].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r5.xyz, r0.xyzx, -r3.yyyy, cb0[47].xyzx
                  dp3 r3.y, r5.xyzx, r5.xyzx
                  rsq r3.y, r3.y
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- reflectLight.x; r5.y <- reflectLight.y; r5.z <- reflectLight.z
                  dp3 r3.y, r1.xyzx, r5.xyzx  // r3.y <- specFactor
                  lt r4.w, l(0.000000), r3.y
                
                #line 165
                  log r3.y, |r3.y|
                  mul r3.y, r3.y, r3.w
                  exp r3.y, r3.y  // r3.y <- specFactor
                  mul r5.xyz, cb0[45].xyzx, cb1[1].xxxx
                  mul r5.xyz, r3.yyyy, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z
                  and r5.xyz, r4.wwww, r5.xyzx
                  and r4.xyz, r3.zzzz, r4.xyzx
                  and r5.xyz, r3.zzzz, r5.xyzx
                  mad r4.xyz, cb0[45].xyzx, cb0[45].wwww, r4.xyzx
                  add r4.xyz, r5.xyzx, r4.xyzx  // r4.x <- <ComputeLight return value>.x; r4.y <- <ComputeLight return value>.y; r4.z <- <ComputeLight return value>.z
                
                #line 272
                  div r3.xyz, r4.xyzx, r3.xxxx  // r3.x <- <ComputeSpotLight return value>.x; r3.y <- <ComputeSpotLight return value>.y; r3.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r3.xyz, r2.wwww, r3.xyzx
                
                #line 369
                  add r2.xyz, r2.xyzx, r3.xyzx
                
                #line 376
                endif 
                
                #line 367
                eq r2.w, cb0[52].w, l(1.000000)
                if_nz r2.w
                
                #line 246
                  add r3.xyz, v1.xyzx, -cb0[50].yzwy  // r3.x <- lightDirection.x; r3.y <- lightDirection.y; r3.z <- lightDirection.z
                  dp3 r2.w, r3.xyzx, cb0[51].xyzx  // r2.w <- spot
                  lt r2.w, cb0[51].w, r2.w
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.y, r3.x  // r3.y <- distance
                
                #line 254
                  mad r3.y, cb0[52].y, r3.y, cb0[52].x
                  mad r3.x, r3.x, cb0[52].z, r3.y  // r3.x <- attenuation
                
                #line 259
                  max r3.x, r3.x, l(1.000000)
                
                #line 154
                  dp3 r3.y, r0.xyzx, -cb0[51].xyzx  // r3.y <- diffuseFactor
                  lt r3.z, l(0.000000), r3.y
                  mul r4.xyz, cb0[49].xyzx, cb0[50].xxxx
                  mul r4.xyz, r3.yyyy, r4.xyzx  // r4.x <- diffuseColor.x; r4.y <- diffuseColor.y; r4.z <- diffuseColor.z
                  dp3 r3.y, cb0[51].xyzx, r0.xyzx
                  add r3.y, r3.y, r3.y
                  mad r0.xyz, r0.xyzx, -r3.yyyy, cb0[51].xyzx
                  dp3 r3.y, r0.xyzx, r0.xyzx
                  rsq r3.y, r3.y
                  mul r0.xyz, r0.xyzx, r3.yyyy  // r0.x <- reflectLight.x; r0.y <- reflectLight.y; r0.z <- reflectLight.z
                  dp3 r0.x, r1.xyzx, r0.xyzx  // r0.x <- specFactor
                  lt r0.y, l(0.000000), r0.x
                
                #line 165
                  log r0.x, |r0.x|
                  mul r0.x, r0.x, r3.w
                  exp r0.x, r0.x  // r0.x <- specFactor
                  mul r1.xyz, cb0[49].xyzx, cb1[1].xxxx
                  mul r1.xyz, r0.xxxx, r1.xyzx  // r1.x <- specularColor.x; r1.y <- specularColor.y; r1.z <- specularColor.z
                  and r0.xyz, r0.yyyy, r1.xyzx  // r0.x <- specularColor.x; r0.y <- specularColor.y; r0.z <- specularColor.z
                  and r1.xyz, r3.zzzz, r4.xyzx  // r1.x <- diffuseColor.x; r1.y <- diffuseColor.y; r1.z <- diffuseColor.z
                  and r0.xyz, r0.xyzx, r3.zzzz
                  mad r1.xyz, cb0[49].xyzx, cb0[49].wwww, r1.xyzx
                  add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- <ComputeLight return value>.x; r0.y <- <ComputeLight return value>.y; r0.z <- <ComputeLight return value>.z
                
                #line 272
                  div r0.xyz, r0.xyzx, r3.xxxx  // r0.x <- <ComputeSpotLight return value>.x; r0.y <- <ComputeSpotLight return value>.y; r0.z <- <ComputeSpotLight return value>.z
                
                #line 277
                  and r0.xyz, r0.xyzx, r2.wwww
                
                #line 369
                  add r2.xyz, r0.xyzx, r2.xyzx
                
                #line 376
                endif 
                
                #line 586 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                lt r0.x, l(0.000000), cb0[54].x
                
                #line 589
                sqrt r0.y, r1.w  // r0.y <- distToEye
                
                #line 384 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\IncLights.fx"
                add r0.y, r0.y, -cb0[53].w
                div_sat r0.y, r0.y, cb0[54].x  // r0.y <- fogLerp
                add r1.xyz, -r2.xyzx, cb0[55].xyzx
                mad r1.xyz, r0.yyyy, r1.xyzx, r2.xyzx  // r1.x <- <ComputeFog return value>.x; r1.y <- <ComputeFog return value>.y; r1.z <- <ComputeFog return value>.z
                
                #line 592 "C:\Users\Selinux\Documents\GitHub\SharpDX-Tests\Engine\Resources\ShaderBasic.fx"
                movc o0.xyz, r0.xxxx, r1.xyzx, r2.xyzx
                
                #line 596
                mov o0.w, r0.w
                ret 
                // Approximately 400 instruction slots used
                            
            };
            RasterizerState = RasterizerSolid;
        }

    }

}

